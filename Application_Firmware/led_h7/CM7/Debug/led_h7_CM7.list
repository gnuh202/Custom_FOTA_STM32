
led_h7_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08040000  08040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059ac  08040298  08040298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08045c44  08045c44  00006c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08045ec8  08045ec8  000070d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08045ec8  08045ec8  00006ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08045ed0  08045ed0  000070d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08045ed0  08045ed0  00006ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08045ed4  08045ed4  00006ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  24000000  08045ed8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  240000d4  08045fac  000070d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400048c  08045fac  0000748c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000070d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb75  00000000  00000000  00007102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a48  00000000  00000000  00015c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  000186c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b00  00000000  00000000  00019598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cf98  00000000  00000000  0001a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001184e  00000000  00000000  00057030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018627c  00000000  00000000  0006887e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001eeafa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d10  00000000  00000000  001eeb40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001f2850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040298 <__do_global_dtors_aux>:
 8040298:	b510      	push	{r4, lr}
 804029a:	4c05      	ldr	r4, [pc, #20]	@ (80402b0 <__do_global_dtors_aux+0x18>)
 804029c:	7823      	ldrb	r3, [r4, #0]
 804029e:	b933      	cbnz	r3, 80402ae <__do_global_dtors_aux+0x16>
 80402a0:	4b04      	ldr	r3, [pc, #16]	@ (80402b4 <__do_global_dtors_aux+0x1c>)
 80402a2:	b113      	cbz	r3, 80402aa <__do_global_dtors_aux+0x12>
 80402a4:	4804      	ldr	r0, [pc, #16]	@ (80402b8 <__do_global_dtors_aux+0x20>)
 80402a6:	f3af 8000 	nop.w
 80402aa:	2301      	movs	r3, #1
 80402ac:	7023      	strb	r3, [r4, #0]
 80402ae:	bd10      	pop	{r4, pc}
 80402b0:	240000d4 	.word	0x240000d4
 80402b4:	00000000 	.word	0x00000000
 80402b8:	08045c2c 	.word	0x08045c2c

080402bc <frame_dummy>:
 80402bc:	b508      	push	{r3, lr}
 80402be:	4b03      	ldr	r3, [pc, #12]	@ (80402cc <frame_dummy+0x10>)
 80402c0:	b11b      	cbz	r3, 80402ca <frame_dummy+0xe>
 80402c2:	4903      	ldr	r1, [pc, #12]	@ (80402d0 <frame_dummy+0x14>)
 80402c4:	4803      	ldr	r0, [pc, #12]	@ (80402d4 <frame_dummy+0x18>)
 80402c6:	f3af 8000 	nop.w
 80402ca:	bd08      	pop	{r3, pc}
 80402cc:	00000000 	.word	0x00000000
 80402d0:	240000d8 	.word	0x240000d8
 80402d4:	08045c2c 	.word	0x08045c2c

080402d8 <strcmp>:
 80402d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80402dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80402e0:	2a01      	cmp	r2, #1
 80402e2:	bf28      	it	cs
 80402e4:	429a      	cmpcs	r2, r3
 80402e6:	d0f7      	beq.n	80402d8 <strcmp>
 80402e8:	1ad0      	subs	r0, r2, r3
 80402ea:	4770      	bx	lr

080402ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80402ec:	b480      	push	{r7}
 80402ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80402f0:	4b49      	ldr	r3, [pc, #292]	@ (8040418 <SystemInit+0x12c>)
 80402f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80402f6:	4a48      	ldr	r2, [pc, #288]	@ (8040418 <SystemInit+0x12c>)
 80402f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80402fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8040300:	4b45      	ldr	r3, [pc, #276]	@ (8040418 <SystemInit+0x12c>)
 8040302:	691b      	ldr	r3, [r3, #16]
 8040304:	4a44      	ldr	r2, [pc, #272]	@ (8040418 <SystemInit+0x12c>)
 8040306:	f043 0310 	orr.w	r3, r3, #16
 804030a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 804030c:	4b43      	ldr	r3, [pc, #268]	@ (804041c <SystemInit+0x130>)
 804030e:	681b      	ldr	r3, [r3, #0]
 8040310:	f003 030f 	and.w	r3, r3, #15
 8040314:	2b06      	cmp	r3, #6
 8040316:	d807      	bhi.n	8040328 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8040318:	4b40      	ldr	r3, [pc, #256]	@ (804041c <SystemInit+0x130>)
 804031a:	681b      	ldr	r3, [r3, #0]
 804031c:	f023 030f 	bic.w	r3, r3, #15
 8040320:	4a3e      	ldr	r2, [pc, #248]	@ (804041c <SystemInit+0x130>)
 8040322:	f043 0307 	orr.w	r3, r3, #7
 8040326:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8040328:	4b3d      	ldr	r3, [pc, #244]	@ (8040420 <SystemInit+0x134>)
 804032a:	681b      	ldr	r3, [r3, #0]
 804032c:	4a3c      	ldr	r2, [pc, #240]	@ (8040420 <SystemInit+0x134>)
 804032e:	f043 0301 	orr.w	r3, r3, #1
 8040332:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8040334:	4b3a      	ldr	r3, [pc, #232]	@ (8040420 <SystemInit+0x134>)
 8040336:	2200      	movs	r2, #0
 8040338:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 804033a:	4b39      	ldr	r3, [pc, #228]	@ (8040420 <SystemInit+0x134>)
 804033c:	681a      	ldr	r2, [r3, #0]
 804033e:	4938      	ldr	r1, [pc, #224]	@ (8040420 <SystemInit+0x134>)
 8040340:	4b38      	ldr	r3, [pc, #224]	@ (8040424 <SystemInit+0x138>)
 8040342:	4013      	ands	r3, r2
 8040344:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8040346:	4b35      	ldr	r3, [pc, #212]	@ (804041c <SystemInit+0x130>)
 8040348:	681b      	ldr	r3, [r3, #0]
 804034a:	f003 0308 	and.w	r3, r3, #8
 804034e:	2b00      	cmp	r3, #0
 8040350:	d007      	beq.n	8040362 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8040352:	4b32      	ldr	r3, [pc, #200]	@ (804041c <SystemInit+0x130>)
 8040354:	681b      	ldr	r3, [r3, #0]
 8040356:	f023 030f 	bic.w	r3, r3, #15
 804035a:	4a30      	ldr	r2, [pc, #192]	@ (804041c <SystemInit+0x130>)
 804035c:	f043 0307 	orr.w	r3, r3, #7
 8040360:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8040362:	4b2f      	ldr	r3, [pc, #188]	@ (8040420 <SystemInit+0x134>)
 8040364:	2200      	movs	r2, #0
 8040366:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8040368:	4b2d      	ldr	r3, [pc, #180]	@ (8040420 <SystemInit+0x134>)
 804036a:	2200      	movs	r2, #0
 804036c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 804036e:	4b2c      	ldr	r3, [pc, #176]	@ (8040420 <SystemInit+0x134>)
 8040370:	2200      	movs	r2, #0
 8040372:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8040374:	4b2a      	ldr	r3, [pc, #168]	@ (8040420 <SystemInit+0x134>)
 8040376:	4a2c      	ldr	r2, [pc, #176]	@ (8040428 <SystemInit+0x13c>)
 8040378:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 804037a:	4b29      	ldr	r3, [pc, #164]	@ (8040420 <SystemInit+0x134>)
 804037c:	4a2b      	ldr	r2, [pc, #172]	@ (804042c <SystemInit+0x140>)
 804037e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8040380:	4b27      	ldr	r3, [pc, #156]	@ (8040420 <SystemInit+0x134>)
 8040382:	4a2b      	ldr	r2, [pc, #172]	@ (8040430 <SystemInit+0x144>)
 8040384:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8040386:	4b26      	ldr	r3, [pc, #152]	@ (8040420 <SystemInit+0x134>)
 8040388:	2200      	movs	r2, #0
 804038a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 804038c:	4b24      	ldr	r3, [pc, #144]	@ (8040420 <SystemInit+0x134>)
 804038e:	4a28      	ldr	r2, [pc, #160]	@ (8040430 <SystemInit+0x144>)
 8040390:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8040392:	4b23      	ldr	r3, [pc, #140]	@ (8040420 <SystemInit+0x134>)
 8040394:	2200      	movs	r2, #0
 8040396:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8040398:	4b21      	ldr	r3, [pc, #132]	@ (8040420 <SystemInit+0x134>)
 804039a:	4a25      	ldr	r2, [pc, #148]	@ (8040430 <SystemInit+0x144>)
 804039c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 804039e:	4b20      	ldr	r3, [pc, #128]	@ (8040420 <SystemInit+0x134>)
 80403a0:	2200      	movs	r2, #0
 80403a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80403a4:	4b1e      	ldr	r3, [pc, #120]	@ (8040420 <SystemInit+0x134>)
 80403a6:	681b      	ldr	r3, [r3, #0]
 80403a8:	4a1d      	ldr	r2, [pc, #116]	@ (8040420 <SystemInit+0x134>)
 80403aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80403ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80403b0:	4b1b      	ldr	r3, [pc, #108]	@ (8040420 <SystemInit+0x134>)
 80403b2:	2200      	movs	r2, #0
 80403b4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80403b6:	4b1f      	ldr	r3, [pc, #124]	@ (8040434 <SystemInit+0x148>)
 80403b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80403ba:	4a1e      	ldr	r2, [pc, #120]	@ (8040434 <SystemInit+0x148>)
 80403bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80403c0:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80403c2:	4b1d      	ldr	r3, [pc, #116]	@ (8040438 <SystemInit+0x14c>)
 80403c4:	681a      	ldr	r2, [r3, #0]
 80403c6:	4b1d      	ldr	r3, [pc, #116]	@ (804043c <SystemInit+0x150>)
 80403c8:	4013      	ands	r3, r2
 80403ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80403ce:	d202      	bcs.n	80403d6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80403d0:	4b1b      	ldr	r3, [pc, #108]	@ (8040440 <SystemInit+0x154>)
 80403d2:	2201      	movs	r2, #1
 80403d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80403d6:	4b12      	ldr	r3, [pc, #72]	@ (8040420 <SystemInit+0x134>)
 80403d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80403dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80403e0:	2b00      	cmp	r3, #0
 80403e2:	d113      	bne.n	804040c <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80403e4:	4b0e      	ldr	r3, [pc, #56]	@ (8040420 <SystemInit+0x134>)
 80403e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80403ea:	4a0d      	ldr	r2, [pc, #52]	@ (8040420 <SystemInit+0x134>)
 80403ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80403f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80403f4:	4b13      	ldr	r3, [pc, #76]	@ (8040444 <SystemInit+0x158>)
 80403f6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80403fa:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80403fc:	4b08      	ldr	r3, [pc, #32]	@ (8040420 <SystemInit+0x134>)
 80403fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8040402:	4a07      	ldr	r2, [pc, #28]	@ (8040420 <SystemInit+0x134>)
 8040404:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8040408:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 804040c:	bf00      	nop
 804040e:	46bd      	mov	sp, r7
 8040410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040414:	4770      	bx	lr
 8040416:	bf00      	nop
 8040418:	e000ed00 	.word	0xe000ed00
 804041c:	52002000 	.word	0x52002000
 8040420:	58024400 	.word	0x58024400
 8040424:	eaf6ed7f 	.word	0xeaf6ed7f
 8040428:	02020200 	.word	0x02020200
 804042c:	01ff0000 	.word	0x01ff0000
 8040430:	01010280 	.word	0x01010280
 8040434:	580000c0 	.word	0x580000c0
 8040438:	5c001000 	.word	0x5c001000
 804043c:	ffff0000 	.word	0xffff0000
 8040440:	51008108 	.word	0x51008108
 8040444:	52004000 	.word	0x52004000

08040448 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8040448:	b480      	push	{r7}
 804044a:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 804044c:	4b0a      	ldr	r3, [pc, #40]	@ (8040478 <ExitRun0Mode+0x30>)
 804044e:	68db      	ldr	r3, [r3, #12]
 8040450:	f023 0306 	bic.w	r3, r3, #6
 8040454:	4a08      	ldr	r2, [pc, #32]	@ (8040478 <ExitRun0Mode+0x30>)
 8040456:	f043 0302 	orr.w	r3, r3, #2
 804045a:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 804045c:	bf00      	nop
 804045e:	4b06      	ldr	r3, [pc, #24]	@ (8040478 <ExitRun0Mode+0x30>)
 8040460:	685b      	ldr	r3, [r3, #4]
 8040462:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8040466:	2b00      	cmp	r3, #0
 8040468:	d0f9      	beq.n	804045e <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 804046a:	bf00      	nop
 804046c:	bf00      	nop
 804046e:	46bd      	mov	sp, r7
 8040470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040474:	4770      	bx	lr
 8040476:	bf00      	nop
 8040478:	58024800 	.word	0x58024800

0804047c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 804047c:	b480      	push	{r7}
 804047e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040480:	4b04      	ldr	r3, [pc, #16]	@ (8040494 <__NVIC_GetPriorityGrouping+0x18>)
 8040482:	68db      	ldr	r3, [r3, #12]
 8040484:	0a1b      	lsrs	r3, r3, #8
 8040486:	f003 0307 	and.w	r3, r3, #7
}
 804048a:	4618      	mov	r0, r3
 804048c:	46bd      	mov	sp, r7
 804048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040492:	4770      	bx	lr
 8040494:	e000ed00 	.word	0xe000ed00

08040498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040498:	b480      	push	{r7}
 804049a:	b083      	sub	sp, #12
 804049c:	af00      	add	r7, sp, #0
 804049e:	4603      	mov	r3, r0
 80404a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80404a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80404a6:	2b00      	cmp	r3, #0
 80404a8:	db0b      	blt.n	80404c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80404aa:	88fb      	ldrh	r3, [r7, #6]
 80404ac:	f003 021f 	and.w	r2, r3, #31
 80404b0:	4907      	ldr	r1, [pc, #28]	@ (80404d0 <__NVIC_EnableIRQ+0x38>)
 80404b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80404b6:	095b      	lsrs	r3, r3, #5
 80404b8:	2001      	movs	r0, #1
 80404ba:	fa00 f202 	lsl.w	r2, r0, r2
 80404be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80404c2:	bf00      	nop
 80404c4:	370c      	adds	r7, #12
 80404c6:	46bd      	mov	sp, r7
 80404c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80404cc:	4770      	bx	lr
 80404ce:	bf00      	nop
 80404d0:	e000e100 	.word	0xe000e100

080404d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80404d4:	b480      	push	{r7}
 80404d6:	b083      	sub	sp, #12
 80404d8:	af00      	add	r7, sp, #0
 80404da:	4603      	mov	r3, r0
 80404dc:	6039      	str	r1, [r7, #0]
 80404de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80404e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80404e4:	2b00      	cmp	r3, #0
 80404e6:	db0a      	blt.n	80404fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80404e8:	683b      	ldr	r3, [r7, #0]
 80404ea:	b2da      	uxtb	r2, r3
 80404ec:	490c      	ldr	r1, [pc, #48]	@ (8040520 <__NVIC_SetPriority+0x4c>)
 80404ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80404f2:	0112      	lsls	r2, r2, #4
 80404f4:	b2d2      	uxtb	r2, r2
 80404f6:	440b      	add	r3, r1
 80404f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80404fc:	e00a      	b.n	8040514 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80404fe:	683b      	ldr	r3, [r7, #0]
 8040500:	b2da      	uxtb	r2, r3
 8040502:	4908      	ldr	r1, [pc, #32]	@ (8040524 <__NVIC_SetPriority+0x50>)
 8040504:	88fb      	ldrh	r3, [r7, #6]
 8040506:	f003 030f 	and.w	r3, r3, #15
 804050a:	3b04      	subs	r3, #4
 804050c:	0112      	lsls	r2, r2, #4
 804050e:	b2d2      	uxtb	r2, r2
 8040510:	440b      	add	r3, r1
 8040512:	761a      	strb	r2, [r3, #24]
}
 8040514:	bf00      	nop
 8040516:	370c      	adds	r7, #12
 8040518:	46bd      	mov	sp, r7
 804051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804051e:	4770      	bx	lr
 8040520:	e000e100 	.word	0xe000e100
 8040524:	e000ed00 	.word	0xe000ed00

08040528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040528:	b480      	push	{r7}
 804052a:	b089      	sub	sp, #36	@ 0x24
 804052c:	af00      	add	r7, sp, #0
 804052e:	60f8      	str	r0, [r7, #12]
 8040530:	60b9      	str	r1, [r7, #8]
 8040532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040534:	68fb      	ldr	r3, [r7, #12]
 8040536:	f003 0307 	and.w	r3, r3, #7
 804053a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 804053c:	69fb      	ldr	r3, [r7, #28]
 804053e:	f1c3 0307 	rsb	r3, r3, #7
 8040542:	2b04      	cmp	r3, #4
 8040544:	bf28      	it	cs
 8040546:	2304      	movcs	r3, #4
 8040548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 804054a:	69fb      	ldr	r3, [r7, #28]
 804054c:	3304      	adds	r3, #4
 804054e:	2b06      	cmp	r3, #6
 8040550:	d902      	bls.n	8040558 <NVIC_EncodePriority+0x30>
 8040552:	69fb      	ldr	r3, [r7, #28]
 8040554:	3b03      	subs	r3, #3
 8040556:	e000      	b.n	804055a <NVIC_EncodePriority+0x32>
 8040558:	2300      	movs	r3, #0
 804055a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 804055c:	f04f 32ff 	mov.w	r2, #4294967295
 8040560:	69bb      	ldr	r3, [r7, #24]
 8040562:	fa02 f303 	lsl.w	r3, r2, r3
 8040566:	43da      	mvns	r2, r3
 8040568:	68bb      	ldr	r3, [r7, #8]
 804056a:	401a      	ands	r2, r3
 804056c:	697b      	ldr	r3, [r7, #20]
 804056e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040570:	f04f 31ff 	mov.w	r1, #4294967295
 8040574:	697b      	ldr	r3, [r7, #20]
 8040576:	fa01 f303 	lsl.w	r3, r1, r3
 804057a:	43d9      	mvns	r1, r3
 804057c:	687b      	ldr	r3, [r7, #4]
 804057e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040580:	4313      	orrs	r3, r2
         );
}
 8040582:	4618      	mov	r0, r3
 8040584:	3724      	adds	r7, #36	@ 0x24
 8040586:	46bd      	mov	sp, r7
 8040588:	f85d 7b04 	ldr.w	r7, [sp], #4
 804058c:	4770      	bx	lr

0804058e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 804058e:	b480      	push	{r7}
 8040590:	b083      	sub	sp, #12
 8040592:	af00      	add	r7, sp, #0
 8040594:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8040596:	687b      	ldr	r3, [r7, #4]
 8040598:	681b      	ldr	r3, [r3, #0]
 804059a:	f043 0201 	orr.w	r2, r3, #1
 804059e:	687b      	ldr	r3, [r7, #4]
 80405a0:	601a      	str	r2, [r3, #0]
}
 80405a2:	bf00      	nop
 80405a4:	370c      	adds	r7, #12
 80405a6:	46bd      	mov	sp, r7
 80405a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80405ac:	4770      	bx	lr

080405ae <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 80405ae:	b480      	push	{r7}
 80405b0:	b083      	sub	sp, #12
 80405b2:	af00      	add	r7, sp, #0
 80405b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80405b6:	687b      	ldr	r3, [r7, #4]
 80405b8:	681b      	ldr	r3, [r3, #0]
 80405ba:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80405be:	687b      	ldr	r3, [r7, #4]
 80405c0:	601a      	str	r2, [r3, #0]
}
 80405c2:	bf00      	nop
 80405c4:	370c      	adds	r7, #12
 80405c6:	46bd      	mov	sp, r7
 80405c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80405cc:	4770      	bx	lr

080405ce <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80405ce:	b480      	push	{r7}
 80405d0:	b089      	sub	sp, #36	@ 0x24
 80405d2:	af00      	add	r7, sp, #0
 80405d4:	6078      	str	r0, [r7, #4]
 80405d6:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80405d8:	687b      	ldr	r3, [r7, #4]
 80405da:	3308      	adds	r3, #8
 80405dc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80405de:	68fb      	ldr	r3, [r7, #12]
 80405e0:	e853 3f00 	ldrex	r3, [r3]
 80405e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80405e6:	68bb      	ldr	r3, [r7, #8]
 80405e8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80405ec:	683b      	ldr	r3, [r7, #0]
 80405ee:	075b      	lsls	r3, r3, #29
 80405f0:	4313      	orrs	r3, r2
 80405f2:	61fb      	str	r3, [r7, #28]
 80405f4:	687b      	ldr	r3, [r7, #4]
 80405f6:	3308      	adds	r3, #8
 80405f8:	69fa      	ldr	r2, [r7, #28]
 80405fa:	61ba      	str	r2, [r7, #24]
 80405fc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80405fe:	6979      	ldr	r1, [r7, #20]
 8040600:	69ba      	ldr	r2, [r7, #24]
 8040602:	e841 2300 	strex	r3, r2, [r1]
 8040606:	613b      	str	r3, [r7, #16]
   return(result);
 8040608:	693b      	ldr	r3, [r7, #16]
 804060a:	2b00      	cmp	r3, #0
 804060c:	d1e4      	bne.n	80405d8 <LL_USART_SetTXFIFOThreshold+0xa>
}
 804060e:	bf00      	nop
 8040610:	bf00      	nop
 8040612:	3724      	adds	r7, #36	@ 0x24
 8040614:	46bd      	mov	sp, r7
 8040616:	f85d 7b04 	ldr.w	r7, [sp], #4
 804061a:	4770      	bx	lr

0804061c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 804061c:	b480      	push	{r7}
 804061e:	b089      	sub	sp, #36	@ 0x24
 8040620:	af00      	add	r7, sp, #0
 8040622:	6078      	str	r0, [r7, #4]
 8040624:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8040626:	687b      	ldr	r3, [r7, #4]
 8040628:	3308      	adds	r3, #8
 804062a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804062c:	68fb      	ldr	r3, [r7, #12]
 804062e:	e853 3f00 	ldrex	r3, [r3]
 8040632:	60bb      	str	r3, [r7, #8]
   return(result);
 8040634:	68bb      	ldr	r3, [r7, #8]
 8040636:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 804063a:	683b      	ldr	r3, [r7, #0]
 804063c:	065b      	lsls	r3, r3, #25
 804063e:	4313      	orrs	r3, r2
 8040640:	61fb      	str	r3, [r7, #28]
 8040642:	687b      	ldr	r3, [r7, #4]
 8040644:	3308      	adds	r3, #8
 8040646:	69fa      	ldr	r2, [r7, #28]
 8040648:	61ba      	str	r2, [r7, #24]
 804064a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804064c:	6979      	ldr	r1, [r7, #20]
 804064e:	69ba      	ldr	r2, [r7, #24]
 8040650:	e841 2300 	strex	r3, r2, [r1]
 8040654:	613b      	str	r3, [r7, #16]
   return(result);
 8040656:	693b      	ldr	r3, [r7, #16]
 8040658:	2b00      	cmp	r3, #0
 804065a:	d1e4      	bne.n	8040626 <LL_USART_SetRXFIFOThreshold+0xa>
}
 804065c:	bf00      	nop
 804065e:	bf00      	nop
 8040660:	3724      	adds	r7, #36	@ 0x24
 8040662:	46bd      	mov	sp, r7
 8040664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040668:	4770      	bx	lr

0804066a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 804066a:	b480      	push	{r7}
 804066c:	b083      	sub	sp, #12
 804066e:	af00      	add	r7, sp, #0
 8040670:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8040672:	687b      	ldr	r3, [r7, #4]
 8040674:	685b      	ldr	r3, [r3, #4]
 8040676:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 804067a:	687b      	ldr	r3, [r7, #4]
 804067c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 804067e:	687b      	ldr	r3, [r7, #4]
 8040680:	689b      	ldr	r3, [r3, #8]
 8040682:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8040686:	687b      	ldr	r3, [r7, #4]
 8040688:	609a      	str	r2, [r3, #8]
}
 804068a:	bf00      	nop
 804068c:	370c      	adds	r7, #12
 804068e:	46bd      	mov	sp, r7
 8040690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040694:	4770      	bx	lr

08040696 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8040696:	b480      	push	{r7}
 8040698:	b083      	sub	sp, #12
 804069a:	af00      	add	r7, sp, #0
 804069c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 804069e:	687b      	ldr	r3, [r7, #4]
 80406a0:	69db      	ldr	r3, [r3, #28]
 80406a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80406a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80406aa:	d101      	bne.n	80406b0 <LL_USART_IsActiveFlag_TEACK+0x1a>
 80406ac:	2301      	movs	r3, #1
 80406ae:	e000      	b.n	80406b2 <LL_USART_IsActiveFlag_TEACK+0x1c>
 80406b0:	2300      	movs	r3, #0
}
 80406b2:	4618      	mov	r0, r3
 80406b4:	370c      	adds	r7, #12
 80406b6:	46bd      	mov	sp, r7
 80406b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406bc:	4770      	bx	lr

080406be <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 80406be:	b480      	push	{r7}
 80406c0:	b083      	sub	sp, #12
 80406c2:	af00      	add	r7, sp, #0
 80406c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80406c6:	687b      	ldr	r3, [r7, #4]
 80406c8:	69db      	ldr	r3, [r3, #28]
 80406ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80406ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80406d2:	d101      	bne.n	80406d8 <LL_USART_IsActiveFlag_REACK+0x1a>
 80406d4:	2301      	movs	r3, #1
 80406d6:	e000      	b.n	80406da <LL_USART_IsActiveFlag_REACK+0x1c>
 80406d8:	2300      	movs	r3, #0
}
 80406da:	4618      	mov	r0, r3
 80406dc:	370c      	adds	r7, #12
 80406de:	46bd      	mov	sp, r7
 80406e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406e4:	4770      	bx	lr
	...

080406e8 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 80406e8:	b480      	push	{r7}
 80406ea:	b085      	sub	sp, #20
 80406ec:	af00      	add	r7, sp, #0
 80406ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 80406f0:	4b0a      	ldr	r3, [pc, #40]	@ (804071c <LL_AHB4_GRP1_EnableClock+0x34>)
 80406f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80406f6:	4909      	ldr	r1, [pc, #36]	@ (804071c <LL_AHB4_GRP1_EnableClock+0x34>)
 80406f8:	687b      	ldr	r3, [r7, #4]
 80406fa:	4313      	orrs	r3, r2
 80406fc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8040700:	4b06      	ldr	r3, [pc, #24]	@ (804071c <LL_AHB4_GRP1_EnableClock+0x34>)
 8040702:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8040706:	687b      	ldr	r3, [r7, #4]
 8040708:	4013      	ands	r3, r2
 804070a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 804070c:	68fb      	ldr	r3, [r7, #12]
}
 804070e:	bf00      	nop
 8040710:	3714      	adds	r7, #20
 8040712:	46bd      	mov	sp, r7
 8040714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040718:	4770      	bx	lr
 804071a:	bf00      	nop
 804071c:	58024400 	.word	0x58024400

08040720 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8040720:	b480      	push	{r7}
 8040722:	b085      	sub	sp, #20
 8040724:	af00      	add	r7, sp, #0
 8040726:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8040728:	4b0a      	ldr	r3, [pc, #40]	@ (8040754 <LL_APB1_GRP1_EnableClock+0x34>)
 804072a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 804072e:	4909      	ldr	r1, [pc, #36]	@ (8040754 <LL_APB1_GRP1_EnableClock+0x34>)
 8040730:	687b      	ldr	r3, [r7, #4]
 8040732:	4313      	orrs	r3, r2
 8040734:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8040738:	4b06      	ldr	r3, [pc, #24]	@ (8040754 <LL_APB1_GRP1_EnableClock+0x34>)
 804073a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 804073e:	687b      	ldr	r3, [r7, #4]
 8040740:	4013      	ands	r3, r2
 8040742:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8040744:	68fb      	ldr	r3, [r7, #12]
}
 8040746:	bf00      	nop
 8040748:	3714      	adds	r7, #20
 804074a:	46bd      	mov	sp, r7
 804074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040750:	4770      	bx	lr
 8040752:	bf00      	nop
 8040754:	58024400 	.word	0x58024400

08040758 <Status_Led>:
        .bActive = true                      // Kích hoạt
    }
};

void Status_Led(void*)
{
 8040758:	b580      	push	{r7, lr}
 804075a:	b082      	sub	sp, #8
 804075c:	af00      	add	r7, sp, #0
 804075e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);
 8040760:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8040764:	4803      	ldr	r0, [pc, #12]	@ (8040774 <Status_Led+0x1c>)
 8040766:	f000 fe40 	bl	80413ea <HAL_GPIO_TogglePin>
}
 804076a:	bf00      	nop
 804076c:	3708      	adds	r7, #8
 804076e:	46bd      	mov	sp, r7
 8040770:	bd80      	pop	{r7, pc}
 8040772:	bf00      	nop
 8040774:	58021400 	.word	0x58021400

08040778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040778:	b580      	push	{r7, lr}
 804077a:	b082      	sub	sp, #8
 804077c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 804077e:	f000 f9c1 	bl	8040b04 <MPU_Config>
//  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET);
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040782:	f000 fa6f 	bl	8040c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040786:	f000 f82f 	bl	80407e8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#ifdef USE_CORE_M4
  __HAL_RCC_HSEM_CLK_ENABLE();
 804078a:	4b16      	ldr	r3, [pc, #88]	@ (80407e4 <main+0x6c>)
 804078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040790:	4a14      	ldr	r2, [pc, #80]	@ (80407e4 <main+0x6c>)
 8040792:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8040796:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804079a:	4b12      	ldr	r3, [pc, #72]	@ (80407e4 <main+0x6c>)
 804079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80407a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80407a4:	607b      	str	r3, [r7, #4]
 80407a6:	687b      	ldr	r3, [r7, #4]
  HAL_HSEM_FastTake(1);
 80407a8:	2001      	movs	r0, #1
 80407aa:	f000 fe39 	bl	8041420 <HAL_HSEM_FastTake>

  while(!HAL_HSEM_IsSemTaken(0));
 80407ae:	bf00      	nop
 80407b0:	2000      	movs	r0, #0
 80407b2:	f000 fe4f 	bl	8041454 <HAL_HSEM_IsSemTaken>
 80407b6:	4603      	mov	r3, r0
 80407b8:	2b00      	cmp	r3, #0
 80407ba:	d0f9      	beq.n	80407b0 <main+0x38>
  HAL_HSEM_Release(0, 0);
 80407bc:	2100      	movs	r1, #0
 80407be:	2000      	movs	r0, #0
 80407c0:	f000 fe5e 	bl	8041480 <HAL_HSEM_Release>
  while (!__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY));
 80407c4:	bf00      	nop
 80407c6:	4b07      	ldr	r3, [pc, #28]	@ (80407e4 <main+0x6c>)
 80407c8:	681b      	ldr	r3, [r3, #0]
 80407ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80407ce:	2b00      	cmp	r3, #0
 80407d0:	d0f9      	beq.n	80407c6 <main+0x4e>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80407d2:	f000 f941 	bl	8040a58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80407d6:	f000 f883 	bl	80408e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  command_init();
 80407da:	f004 fb43 	bl	8044e64 <command_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SchedulerRun();
 80407de:	f005 f911 	bl	8045a04 <SchedulerRun>
 80407e2:	e7fc      	b.n	80407de <main+0x66>
 80407e4:	58024400 	.word	0x58024400

080407e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80407e8:	b580      	push	{r7, lr}
 80407ea:	b09c      	sub	sp, #112	@ 0x70
 80407ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80407ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80407f2:	224c      	movs	r2, #76	@ 0x4c
 80407f4:	2100      	movs	r1, #0
 80407f6:	4618      	mov	r0, r3
 80407f8:	f005 f9e6 	bl	8045bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80407fc:	1d3b      	adds	r3, r7, #4
 80407fe:	2220      	movs	r2, #32
 8040800:	2100      	movs	r1, #0
 8040802:	4618      	mov	r0, r3
 8040804:	f005 f9e0 	bl	8045bc8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8040808:	2002      	movs	r0, #2
 804080a:	f000 fe4d 	bl	80414a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 804080e:	2300      	movs	r3, #0
 8040810:	603b      	str	r3, [r7, #0]
 8040812:	4b31      	ldr	r3, [pc, #196]	@ (80408d8 <SystemClock_Config+0xf0>)
 8040814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8040816:	4a30      	ldr	r2, [pc, #192]	@ (80408d8 <SystemClock_Config+0xf0>)
 8040818:	f023 0301 	bic.w	r3, r3, #1
 804081c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 804081e:	4b2e      	ldr	r3, [pc, #184]	@ (80408d8 <SystemClock_Config+0xf0>)
 8040820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8040822:	f003 0301 	and.w	r3, r3, #1
 8040826:	603b      	str	r3, [r7, #0]
 8040828:	4b2c      	ldr	r3, [pc, #176]	@ (80408dc <SystemClock_Config+0xf4>)
 804082a:	699b      	ldr	r3, [r3, #24]
 804082c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8040830:	4a2a      	ldr	r2, [pc, #168]	@ (80408dc <SystemClock_Config+0xf4>)
 8040832:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8040836:	6193      	str	r3, [r2, #24]
 8040838:	4b28      	ldr	r3, [pc, #160]	@ (80408dc <SystemClock_Config+0xf4>)
 804083a:	699b      	ldr	r3, [r3, #24]
 804083c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8040840:	603b      	str	r3, [r7, #0]
 8040842:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8040844:	bf00      	nop
 8040846:	4b25      	ldr	r3, [pc, #148]	@ (80408dc <SystemClock_Config+0xf4>)
 8040848:	699b      	ldr	r3, [r3, #24]
 804084a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 804084e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8040852:	d1f8      	bne.n	8040846 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8040854:	2301      	movs	r3, #1
 8040856:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8040858:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 804085c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 804085e:	2302      	movs	r3, #2
 8040860:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8040862:	2302      	movs	r3, #2
 8040864:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8040866:	2305      	movs	r3, #5
 8040868:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 804086a:	2360      	movs	r3, #96	@ 0x60
 804086c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 10;
 804086e:	230a      	movs	r3, #10
 8040870:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8040872:	2302      	movs	r3, #2
 8040874:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8040876:	2302      	movs	r3, #2
 8040878:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 804087a:	2308      	movs	r3, #8
 804087c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 804087e:	2300      	movs	r3, #0
 8040880:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8040882:	2300      	movs	r3, #0
 8040884:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 804088a:	4618      	mov	r0, r3
 804088c:	f000 fe66 	bl	804155c <HAL_RCC_OscConfig>
 8040890:	4603      	mov	r3, r0
 8040892:	2b00      	cmp	r3, #0
 8040894:	d001      	beq.n	804089a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8040896:	f000 f961 	bl	8040b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 804089a:	233f      	movs	r3, #63	@ 0x3f
 804089c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 804089e:	2303      	movs	r3, #3
 80408a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80408a2:	2300      	movs	r3, #0
 80408a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80408a6:	2300      	movs	r3, #0
 80408a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80408aa:	2300      	movs	r3, #0
 80408ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80408ae:	2300      	movs	r3, #0
 80408b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80408b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80408b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80408b8:	2300      	movs	r3, #0
 80408ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80408bc:	1d3b      	adds	r3, r7, #4
 80408be:	2101      	movs	r1, #1
 80408c0:	4618      	mov	r0, r3
 80408c2:	f001 faa5 	bl	8041e10 <HAL_RCC_ClockConfig>
 80408c6:	4603      	mov	r3, r0
 80408c8:	2b00      	cmp	r3, #0
 80408ca:	d001      	beq.n	80408d0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80408cc:	f000 f946 	bl	8040b5c <Error_Handler>
  }
}
 80408d0:	bf00      	nop
 80408d2:	3770      	adds	r7, #112	@ 0x70
 80408d4:	46bd      	mov	sp, r7
 80408d6:	bd80      	pop	{r7, pc}
 80408d8:	58000400 	.word	0x58000400
 80408dc:	58024800 	.word	0x58024800

080408e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80408e0:	b580      	push	{r7, lr}
 80408e2:	b0be      	sub	sp, #248	@ 0xf8
 80408e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80408e6:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80408ea:	2220      	movs	r2, #32
 80408ec:	2100      	movs	r1, #0
 80408ee:	4618      	mov	r0, r3
 80408f0:	f005 f96a 	bl	8045bc8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80408f4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80408f8:	2200      	movs	r2, #0
 80408fa:	601a      	str	r2, [r3, #0]
 80408fc:	605a      	str	r2, [r3, #4]
 80408fe:	609a      	str	r2, [r3, #8]
 8040900:	60da      	str	r2, [r3, #12]
 8040902:	611a      	str	r2, [r3, #16]
 8040904:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040906:	463b      	mov	r3, r7
 8040908:	22c0      	movs	r2, #192	@ 0xc0
 804090a:	2100      	movs	r1, #0
 804090c:	4618      	mov	r0, r3
 804090e:	f005 f95b 	bl	8045bc8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8040912:	f04f 0202 	mov.w	r2, #2
 8040916:	f04f 0300 	mov.w	r3, #0
 804091a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 804091e:	2300      	movs	r3, #0
 8040920:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040922:	463b      	mov	r3, r7
 8040924:	4618      	mov	r0, r3
 8040926:	f001 fda3 	bl	8042470 <HAL_RCCEx_PeriphCLKConfig>
 804092a:	4603      	mov	r3, r0
 804092c:	2b00      	cmp	r3, #0
 804092e:	d001      	beq.n	8040934 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8040930:	f000 f914 	bl	8040b5c <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8040934:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8040938:	f7ff fef2 	bl	8040720 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 804093c:	2001      	movs	r0, #1
 804093e:	f7ff fed3 	bl	80406e8 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 8040942:	2008      	movs	r0, #8
 8040944:	f7ff fed0 	bl	80406e8 <LL_AHB4_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8040948:	2304      	movs	r3, #4
 804094a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 804094e:	2302      	movs	r3, #2
 8040950:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8040954:	2300      	movs	r3, #0
 8040956:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 804095a:	2300      	movs	r3, #0
 804095c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8040960:	2300      	movs	r3, #0
 8040962:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8040966:	2307      	movs	r3, #7
 8040968:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804096c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8040970:	4619      	mov	r1, r3
 8040972:	4836      	ldr	r0, [pc, #216]	@ (8040a4c <MX_USART2_UART_Init+0x16c>)
 8040974:	f003 f9c4 	bl	8043d00 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8040978:	2340      	movs	r3, #64	@ 0x40
 804097a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 804097e:	2302      	movs	r3, #2
 8040980:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8040984:	2300      	movs	r3, #0
 8040986:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 804098a:	2300      	movs	r3, #0
 804098c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8040990:	2300      	movs	r3, #0
 8040992:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8040996:	2307      	movs	r3, #7
 8040998:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 804099c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80409a0:	4619      	mov	r1, r3
 80409a2:	482b      	ldr	r0, [pc, #172]	@ (8040a50 <MX_USART2_UART_Init+0x170>)
 80409a4:	f003 f9ac 	bl	8043d00 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80409a8:	f7ff fd68 	bl	804047c <__NVIC_GetPriorityGrouping>
 80409ac:	4603      	mov	r3, r0
 80409ae:	2200      	movs	r2, #0
 80409b0:	2100      	movs	r1, #0
 80409b2:	4618      	mov	r0, r3
 80409b4:	f7ff fdb8 	bl	8040528 <NVIC_EncodePriority>
 80409b8:	4603      	mov	r3, r0
 80409ba:	4619      	mov	r1, r3
 80409bc:	2026      	movs	r0, #38	@ 0x26
 80409be:	f7ff fd89 	bl	80404d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80409c2:	2026      	movs	r0, #38	@ 0x26
 80409c4:	f7ff fd68 	bl	8040498 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80409c8:	2300      	movs	r3, #0
 80409ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.BaudRate = 115200;
 80409ce:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80409d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80409d6:	2300      	movs	r3, #0
 80409d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80409dc:	2300      	movs	r3, #0
 80409de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80409e2:	2300      	movs	r3, #0
 80409e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80409e8:	230c      	movs	r3, #12
 80409ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80409ee:	2300      	movs	r3, #0
 80409f0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80409f4:	2300      	movs	r3, #0
 80409f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(USART2, &USART_InitStruct);
 80409fa:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80409fe:	4619      	mov	r1, r3
 8040a00:	4814      	ldr	r0, [pc, #80]	@ (8040a54 <MX_USART2_UART_Init+0x174>)
 8040a02:	f004 f92b 	bl	8044c5c <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8040a06:	2100      	movs	r1, #0
 8040a08:	4812      	ldr	r0, [pc, #72]	@ (8040a54 <MX_USART2_UART_Init+0x174>)
 8040a0a:	f7ff fde0 	bl	80405ce <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8040a0e:	2100      	movs	r1, #0
 8040a10:	4810      	ldr	r0, [pc, #64]	@ (8040a54 <MX_USART2_UART_Init+0x174>)
 8040a12:	f7ff fe03 	bl	804061c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8040a16:	480f      	ldr	r0, [pc, #60]	@ (8040a54 <MX_USART2_UART_Init+0x174>)
 8040a18:	f7ff fdc9 	bl	80405ae <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8040a1c:	480d      	ldr	r0, [pc, #52]	@ (8040a54 <MX_USART2_UART_Init+0x174>)
 8040a1e:	f7ff fe24 	bl	804066a <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8040a22:	480c      	ldr	r0, [pc, #48]	@ (8040a54 <MX_USART2_UART_Init+0x174>)
 8040a24:	f7ff fdb3 	bl	804058e <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8040a28:	bf00      	nop
 8040a2a:	480a      	ldr	r0, [pc, #40]	@ (8040a54 <MX_USART2_UART_Init+0x174>)
 8040a2c:	f7ff fe33 	bl	8040696 <LL_USART_IsActiveFlag_TEACK>
 8040a30:	4603      	mov	r3, r0
 8040a32:	2b00      	cmp	r3, #0
 8040a34:	d0f9      	beq.n	8040a2a <MX_USART2_UART_Init+0x14a>
 8040a36:	4807      	ldr	r0, [pc, #28]	@ (8040a54 <MX_USART2_UART_Init+0x174>)
 8040a38:	f7ff fe41 	bl	80406be <LL_USART_IsActiveFlag_REACK>
 8040a3c:	4603      	mov	r3, r0
 8040a3e:	2b00      	cmp	r3, #0
 8040a40:	d0f3      	beq.n	8040a2a <MX_USART2_UART_Init+0x14a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8040a42:	bf00      	nop
 8040a44:	bf00      	nop
 8040a46:	37f8      	adds	r7, #248	@ 0xf8
 8040a48:	46bd      	mov	sp, r7
 8040a4a:	bd80      	pop	{r7, pc}
 8040a4c:	58020000 	.word	0x58020000
 8040a50:	58020c00 	.word	0x58020c00
 8040a54:	40004400 	.word	0x40004400

08040a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040a58:	b580      	push	{r7, lr}
 8040a5a:	b088      	sub	sp, #32
 8040a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040a5e:	f107 030c 	add.w	r3, r7, #12
 8040a62:	2200      	movs	r2, #0
 8040a64:	601a      	str	r2, [r3, #0]
 8040a66:	605a      	str	r2, [r3, #4]
 8040a68:	609a      	str	r2, [r3, #8]
 8040a6a:	60da      	str	r2, [r3, #12]
 8040a6c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8040a6e:	4b23      	ldr	r3, [pc, #140]	@ (8040afc <MX_GPIO_Init+0xa4>)
 8040a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040a74:	4a21      	ldr	r2, [pc, #132]	@ (8040afc <MX_GPIO_Init+0xa4>)
 8040a76:	f043 0320 	orr.w	r3, r3, #32
 8040a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8040afc <MX_GPIO_Init+0xa4>)
 8040a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040a84:	f003 0320 	and.w	r3, r3, #32
 8040a88:	60bb      	str	r3, [r7, #8]
 8040a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8040afc <MX_GPIO_Init+0xa4>)
 8040a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040a92:	4a1a      	ldr	r2, [pc, #104]	@ (8040afc <MX_GPIO_Init+0xa4>)
 8040a94:	f043 0301 	orr.w	r3, r3, #1
 8040a98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040a9c:	4b17      	ldr	r3, [pc, #92]	@ (8040afc <MX_GPIO_Init+0xa4>)
 8040a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040aa2:	f003 0301 	and.w	r3, r3, #1
 8040aa6:	607b      	str	r3, [r7, #4]
 8040aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040aaa:	4b14      	ldr	r3, [pc, #80]	@ (8040afc <MX_GPIO_Init+0xa4>)
 8040aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040ab0:	4a12      	ldr	r2, [pc, #72]	@ (8040afc <MX_GPIO_Init+0xa4>)
 8040ab2:	f043 0308 	orr.w	r3, r3, #8
 8040ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040aba:	4b10      	ldr	r3, [pc, #64]	@ (8040afc <MX_GPIO_Init+0xa4>)
 8040abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040ac0:	f003 0308 	and.w	r3, r3, #8
 8040ac4:	603b      	str	r3, [r7, #0]
 8040ac6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8040ac8:	2200      	movs	r2, #0
 8040aca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8040ace:	480c      	ldr	r0, [pc, #48]	@ (8040b00 <MX_GPIO_Init+0xa8>)
 8040ad0:	f000 fc72 	bl	80413b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8040ad4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8040ad8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040ada:	2301      	movs	r3, #1
 8040adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040ade:	2300      	movs	r3, #0
 8040ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040ae2:	2300      	movs	r3, #0
 8040ae4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8040ae6:	f107 030c 	add.w	r3, r7, #12
 8040aea:	4619      	mov	r1, r3
 8040aec:	4804      	ldr	r0, [pc, #16]	@ (8040b00 <MX_GPIO_Init+0xa8>)
 8040aee:	f000 fab3 	bl	8041058 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8040af2:	bf00      	nop
 8040af4:	3720      	adds	r7, #32
 8040af6:	46bd      	mov	sp, r7
 8040af8:	bd80      	pop	{r7, pc}
 8040afa:	bf00      	nop
 8040afc:	58024400 	.word	0x58024400
 8040b00:	58021400 	.word	0x58021400

08040b04 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8040b04:	b580      	push	{r7, lr}
 8040b06:	b084      	sub	sp, #16
 8040b08:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8040b0a:	463b      	mov	r3, r7
 8040b0c:	2200      	movs	r2, #0
 8040b0e:	601a      	str	r2, [r3, #0]
 8040b10:	605a      	str	r2, [r3, #4]
 8040b12:	609a      	str	r2, [r3, #8]
 8040b14:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8040b16:	f000 fa27 	bl	8040f68 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8040b1a:	2301      	movs	r3, #1
 8040b1c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8040b1e:	2300      	movs	r3, #0
 8040b20:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8040b22:	2300      	movs	r3, #0
 8040b24:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8040b26:	231f      	movs	r3, #31
 8040b28:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8040b2a:	2387      	movs	r3, #135	@ 0x87
 8040b2c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8040b2e:	2300      	movs	r3, #0
 8040b30:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8040b32:	2300      	movs	r3, #0
 8040b34:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8040b36:	2301      	movs	r3, #1
 8040b38:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8040b3a:	2301      	movs	r3, #1
 8040b3c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8040b3e:	2300      	movs	r3, #0
 8040b40:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8040b42:	2300      	movs	r3, #0
 8040b44:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8040b46:	463b      	mov	r3, r7
 8040b48:	4618      	mov	r0, r3
 8040b4a:	f000 fa45 	bl	8040fd8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8040b4e:	2004      	movs	r0, #4
 8040b50:	f000 fa22 	bl	8040f98 <HAL_MPU_Enable>

}
 8040b54:	bf00      	nop
 8040b56:	3710      	adds	r7, #16
 8040b58:	46bd      	mov	sp, r7
 8040b5a:	bd80      	pop	{r7, pc}

08040b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040b5c:	b480      	push	{r7}
 8040b5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8040b60:	b672      	cpsid	i
}
 8040b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040b64:	bf00      	nop
 8040b66:	e7fd      	b.n	8040b64 <Error_Handler+0x8>

08040b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040b68:	b480      	push	{r7}
 8040b6a:	b083      	sub	sp, #12
 8040b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8040b98 <HAL_MspInit+0x30>)
 8040b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8040b74:	4a08      	ldr	r2, [pc, #32]	@ (8040b98 <HAL_MspInit+0x30>)
 8040b76:	f043 0302 	orr.w	r3, r3, #2
 8040b7a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8040b7e:	4b06      	ldr	r3, [pc, #24]	@ (8040b98 <HAL_MspInit+0x30>)
 8040b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8040b84:	f003 0302 	and.w	r3, r3, #2
 8040b88:	607b      	str	r3, [r7, #4]
 8040b8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040b8c:	bf00      	nop
 8040b8e:	370c      	adds	r7, #12
 8040b90:	46bd      	mov	sp, r7
 8040b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b96:	4770      	bx	lr
 8040b98:	58024400 	.word	0x58024400

08040b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040b9c:	b480      	push	{r7}
 8040b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8040ba0:	bf00      	nop
 8040ba2:	e7fd      	b.n	8040ba0 <NMI_Handler+0x4>

08040ba4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040ba4:	b480      	push	{r7}
 8040ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040ba8:	bf00      	nop
 8040baa:	e7fd      	b.n	8040ba8 <HardFault_Handler+0x4>

08040bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040bac:	b480      	push	{r7}
 8040bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040bb0:	bf00      	nop
 8040bb2:	e7fd      	b.n	8040bb0 <MemManage_Handler+0x4>

08040bb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040bb4:	b480      	push	{r7}
 8040bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040bb8:	bf00      	nop
 8040bba:	e7fd      	b.n	8040bb8 <BusFault_Handler+0x4>

08040bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040bbc:	b480      	push	{r7}
 8040bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040bc0:	bf00      	nop
 8040bc2:	e7fd      	b.n	8040bc0 <UsageFault_Handler+0x4>

08040bc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040bc4:	b480      	push	{r7}
 8040bc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040bc8:	bf00      	nop
 8040bca:	46bd      	mov	sp, r7
 8040bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bd0:	4770      	bx	lr

08040bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040bd2:	b480      	push	{r7}
 8040bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040bd6:	bf00      	nop
 8040bd8:	46bd      	mov	sp, r7
 8040bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bde:	4770      	bx	lr

08040be0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040be0:	b480      	push	{r7}
 8040be2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040be4:	bf00      	nop
 8040be6:	46bd      	mov	sp, r7
 8040be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bec:	4770      	bx	lr

08040bee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040bee:	b580      	push	{r7, lr}
 8040bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SchedulerSysTickIntHandler();
 8040bf2:	f004 fef9 	bl	80459e8 <SchedulerSysTickIntHandler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040bf6:	f000 f8a7 	bl	8040d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040bfa:	bf00      	nop
 8040bfc:	bd80      	pop	{r7, pc}

08040bfe <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8040bfe:	b580      	push	{r7, lr}
 8040c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2_IRQ();
 8040c02:	f004 fbd5 	bl	80453b0 <USART2_IRQ>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8040c06:	bf00      	nop
 8040c08:	bd80      	pop	{r7, pc}
	...

08040c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8040c0c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8040c48 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8040c10:	f7ff fc1a 	bl	8040448 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8040c14:	f7ff fb6a 	bl	80402ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8040c18:	480c      	ldr	r0, [pc, #48]	@ (8040c4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8040c1a:	490d      	ldr	r1, [pc, #52]	@ (8040c50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8040c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8040c54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8040c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040c20:	e002      	b.n	8040c28 <LoopCopyDataInit>

08040c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040c26:	3304      	adds	r3, #4

08040c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040c2c:	d3f9      	bcc.n	8040c22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8040c58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8040c30:	4c0a      	ldr	r4, [pc, #40]	@ (8040c5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8040c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040c34:	e001      	b.n	8040c3a <LoopFillZerobss>

08040c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040c38:	3204      	adds	r2, #4

08040c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040c3c:	d3fb      	bcc.n	8040c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8040c3e:	f004 ffd1 	bl	8045be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040c42:	f7ff fd99 	bl	8040778 <main>
  bx  lr
 8040c46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8040c48:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8040c4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8040c50:	240000d4 	.word	0x240000d4
  ldr r2, =_sidata
 8040c54:	08045ed8 	.word	0x08045ed8
  ldr r2, =_sbss
 8040c58:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 8040c5c:	2400048c 	.word	0x2400048c

08040c60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040c60:	e7fe      	b.n	8040c60 <ADC3_IRQHandler>
	...

08040c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040c64:	b580      	push	{r7, lr}
 8040c66:	b082      	sub	sp, #8
 8040c68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08140000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040c6a:	2003      	movs	r0, #3
 8040c6c:	f000 f94a 	bl	8040f04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8040c70:	f001 fa84 	bl	804217c <HAL_RCC_GetSysClockFreq>
 8040c74:	4602      	mov	r2, r0
 8040c76:	4b15      	ldr	r3, [pc, #84]	@ (8040ccc <HAL_Init+0x68>)
 8040c78:	699b      	ldr	r3, [r3, #24]
 8040c7a:	0a1b      	lsrs	r3, r3, #8
 8040c7c:	f003 030f 	and.w	r3, r3, #15
 8040c80:	4913      	ldr	r1, [pc, #76]	@ (8040cd0 <HAL_Init+0x6c>)
 8040c82:	5ccb      	ldrb	r3, [r1, r3]
 8040c84:	f003 031f 	and.w	r3, r3, #31
 8040c88:	fa22 f303 	lsr.w	r3, r2, r3
 8040c8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8040c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8040ccc <HAL_Init+0x68>)
 8040c90:	699b      	ldr	r3, [r3, #24]
 8040c92:	f003 030f 	and.w	r3, r3, #15
 8040c96:	4a0e      	ldr	r2, [pc, #56]	@ (8040cd0 <HAL_Init+0x6c>)
 8040c98:	5cd3      	ldrb	r3, [r2, r3]
 8040c9a:	f003 031f 	and.w	r3, r3, #31
 8040c9e:	687a      	ldr	r2, [r7, #4]
 8040ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8040ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8040cd4 <HAL_Init+0x70>)
 8040ca6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8040ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8040cd8 <HAL_Init+0x74>)
 8040caa:	687b      	ldr	r3, [r7, #4]
 8040cac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040cae:	200f      	movs	r0, #15
 8040cb0:	f000 f814 	bl	8040cdc <HAL_InitTick>
 8040cb4:	4603      	mov	r3, r0
 8040cb6:	2b00      	cmp	r3, #0
 8040cb8:	d001      	beq.n	8040cbe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8040cba:	2301      	movs	r3, #1
 8040cbc:	e002      	b.n	8040cc4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8040cbe:	f7ff ff53 	bl	8040b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8040cc2:	2300      	movs	r3, #0
}
 8040cc4:	4618      	mov	r0, r3
 8040cc6:	3708      	adds	r7, #8
 8040cc8:	46bd      	mov	sp, r7
 8040cca:	bd80      	pop	{r7, pc}
 8040ccc:	58024400 	.word	0x58024400
 8040cd0:	08045d74 	.word	0x08045d74
 8040cd4:	24000004 	.word	0x24000004
 8040cd8:	24000000 	.word	0x24000000

08040cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040cdc:	b580      	push	{r7, lr}
 8040cde:	b082      	sub	sp, #8
 8040ce0:	af00      	add	r7, sp, #0
 8040ce2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8040ce4:	4b15      	ldr	r3, [pc, #84]	@ (8040d3c <HAL_InitTick+0x60>)
 8040ce6:	781b      	ldrb	r3, [r3, #0]
 8040ce8:	2b00      	cmp	r3, #0
 8040cea:	d101      	bne.n	8040cf0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8040cec:	2301      	movs	r3, #1
 8040cee:	e021      	b.n	8040d34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8040cf0:	4b13      	ldr	r3, [pc, #76]	@ (8040d40 <HAL_InitTick+0x64>)
 8040cf2:	681a      	ldr	r2, [r3, #0]
 8040cf4:	4b11      	ldr	r3, [pc, #68]	@ (8040d3c <HAL_InitTick+0x60>)
 8040cf6:	781b      	ldrb	r3, [r3, #0]
 8040cf8:	4619      	mov	r1, r3
 8040cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8040cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8040d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8040d06:	4618      	mov	r0, r3
 8040d08:	f000 f921 	bl	8040f4e <HAL_SYSTICK_Config>
 8040d0c:	4603      	mov	r3, r0
 8040d0e:	2b00      	cmp	r3, #0
 8040d10:	d001      	beq.n	8040d16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8040d12:	2301      	movs	r3, #1
 8040d14:	e00e      	b.n	8040d34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040d16:	687b      	ldr	r3, [r7, #4]
 8040d18:	2b0f      	cmp	r3, #15
 8040d1a:	d80a      	bhi.n	8040d32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040d1c:	2200      	movs	r2, #0
 8040d1e:	6879      	ldr	r1, [r7, #4]
 8040d20:	f04f 30ff 	mov.w	r0, #4294967295
 8040d24:	f000 f8f9 	bl	8040f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040d28:	4a06      	ldr	r2, [pc, #24]	@ (8040d44 <HAL_InitTick+0x68>)
 8040d2a:	687b      	ldr	r3, [r7, #4]
 8040d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8040d2e:	2300      	movs	r3, #0
 8040d30:	e000      	b.n	8040d34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8040d32:	2301      	movs	r3, #1
}
 8040d34:	4618      	mov	r0, r3
 8040d36:	3708      	adds	r7, #8
 8040d38:	46bd      	mov	sp, r7
 8040d3a:	bd80      	pop	{r7, pc}
 8040d3c:	24000038 	.word	0x24000038
 8040d40:	24000000 	.word	0x24000000
 8040d44:	24000034 	.word	0x24000034

08040d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040d48:	b480      	push	{r7}
 8040d4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8040d4c:	4b06      	ldr	r3, [pc, #24]	@ (8040d68 <HAL_IncTick+0x20>)
 8040d4e:	781b      	ldrb	r3, [r3, #0]
 8040d50:	461a      	mov	r2, r3
 8040d52:	4b06      	ldr	r3, [pc, #24]	@ (8040d6c <HAL_IncTick+0x24>)
 8040d54:	681b      	ldr	r3, [r3, #0]
 8040d56:	4413      	add	r3, r2
 8040d58:	4a04      	ldr	r2, [pc, #16]	@ (8040d6c <HAL_IncTick+0x24>)
 8040d5a:	6013      	str	r3, [r2, #0]
}
 8040d5c:	bf00      	nop
 8040d5e:	46bd      	mov	sp, r7
 8040d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d64:	4770      	bx	lr
 8040d66:	bf00      	nop
 8040d68:	24000038 	.word	0x24000038
 8040d6c:	240000f0 	.word	0x240000f0

08040d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040d70:	b480      	push	{r7}
 8040d72:	af00      	add	r7, sp, #0
  return uwTick;
 8040d74:	4b03      	ldr	r3, [pc, #12]	@ (8040d84 <HAL_GetTick+0x14>)
 8040d76:	681b      	ldr	r3, [r3, #0]
}
 8040d78:	4618      	mov	r0, r3
 8040d7a:	46bd      	mov	sp, r7
 8040d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d80:	4770      	bx	lr
 8040d82:	bf00      	nop
 8040d84:	240000f0 	.word	0x240000f0

08040d88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8040d88:	b480      	push	{r7}
 8040d8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8040d8c:	4b03      	ldr	r3, [pc, #12]	@ (8040d9c <HAL_GetREVID+0x14>)
 8040d8e:	681b      	ldr	r3, [r3, #0]
 8040d90:	0c1b      	lsrs	r3, r3, #16
}
 8040d92:	4618      	mov	r0, r3
 8040d94:	46bd      	mov	sp, r7
 8040d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d9a:	4770      	bx	lr
 8040d9c:	5c001000 	.word	0x5c001000

08040da0 <__NVIC_SetPriorityGrouping>:
{
 8040da0:	b480      	push	{r7}
 8040da2:	b085      	sub	sp, #20
 8040da4:	af00      	add	r7, sp, #0
 8040da6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040da8:	687b      	ldr	r3, [r7, #4]
 8040daa:	f003 0307 	and.w	r3, r3, #7
 8040dae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040db0:	4b0b      	ldr	r3, [pc, #44]	@ (8040de0 <__NVIC_SetPriorityGrouping+0x40>)
 8040db2:	68db      	ldr	r3, [r3, #12]
 8040db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040db6:	68ba      	ldr	r2, [r7, #8]
 8040db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8040dbc:	4013      	ands	r3, r2
 8040dbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040dc0:	68fb      	ldr	r3, [r7, #12]
 8040dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040dc4:	68bb      	ldr	r3, [r7, #8]
 8040dc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8040dc8:	4b06      	ldr	r3, [pc, #24]	@ (8040de4 <__NVIC_SetPriorityGrouping+0x44>)
 8040dca:	4313      	orrs	r3, r2
 8040dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040dce:	4a04      	ldr	r2, [pc, #16]	@ (8040de0 <__NVIC_SetPriorityGrouping+0x40>)
 8040dd0:	68bb      	ldr	r3, [r7, #8]
 8040dd2:	60d3      	str	r3, [r2, #12]
}
 8040dd4:	bf00      	nop
 8040dd6:	3714      	adds	r7, #20
 8040dd8:	46bd      	mov	sp, r7
 8040dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040dde:	4770      	bx	lr
 8040de0:	e000ed00 	.word	0xe000ed00
 8040de4:	05fa0000 	.word	0x05fa0000

08040de8 <__NVIC_GetPriorityGrouping>:
{
 8040de8:	b480      	push	{r7}
 8040dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040dec:	4b04      	ldr	r3, [pc, #16]	@ (8040e00 <__NVIC_GetPriorityGrouping+0x18>)
 8040dee:	68db      	ldr	r3, [r3, #12]
 8040df0:	0a1b      	lsrs	r3, r3, #8
 8040df2:	f003 0307 	and.w	r3, r3, #7
}
 8040df6:	4618      	mov	r0, r3
 8040df8:	46bd      	mov	sp, r7
 8040dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040dfe:	4770      	bx	lr
 8040e00:	e000ed00 	.word	0xe000ed00

08040e04 <__NVIC_SetPriority>:
{
 8040e04:	b480      	push	{r7}
 8040e06:	b083      	sub	sp, #12
 8040e08:	af00      	add	r7, sp, #0
 8040e0a:	4603      	mov	r3, r0
 8040e0c:	6039      	str	r1, [r7, #0]
 8040e0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8040e10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8040e14:	2b00      	cmp	r3, #0
 8040e16:	db0a      	blt.n	8040e2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040e18:	683b      	ldr	r3, [r7, #0]
 8040e1a:	b2da      	uxtb	r2, r3
 8040e1c:	490c      	ldr	r1, [pc, #48]	@ (8040e50 <__NVIC_SetPriority+0x4c>)
 8040e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8040e22:	0112      	lsls	r2, r2, #4
 8040e24:	b2d2      	uxtb	r2, r2
 8040e26:	440b      	add	r3, r1
 8040e28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8040e2c:	e00a      	b.n	8040e44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040e2e:	683b      	ldr	r3, [r7, #0]
 8040e30:	b2da      	uxtb	r2, r3
 8040e32:	4908      	ldr	r1, [pc, #32]	@ (8040e54 <__NVIC_SetPriority+0x50>)
 8040e34:	88fb      	ldrh	r3, [r7, #6]
 8040e36:	f003 030f 	and.w	r3, r3, #15
 8040e3a:	3b04      	subs	r3, #4
 8040e3c:	0112      	lsls	r2, r2, #4
 8040e3e:	b2d2      	uxtb	r2, r2
 8040e40:	440b      	add	r3, r1
 8040e42:	761a      	strb	r2, [r3, #24]
}
 8040e44:	bf00      	nop
 8040e46:	370c      	adds	r7, #12
 8040e48:	46bd      	mov	sp, r7
 8040e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e4e:	4770      	bx	lr
 8040e50:	e000e100 	.word	0xe000e100
 8040e54:	e000ed00 	.word	0xe000ed00

08040e58 <NVIC_EncodePriority>:
{
 8040e58:	b480      	push	{r7}
 8040e5a:	b089      	sub	sp, #36	@ 0x24
 8040e5c:	af00      	add	r7, sp, #0
 8040e5e:	60f8      	str	r0, [r7, #12]
 8040e60:	60b9      	str	r1, [r7, #8]
 8040e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040e64:	68fb      	ldr	r3, [r7, #12]
 8040e66:	f003 0307 	and.w	r3, r3, #7
 8040e6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040e6c:	69fb      	ldr	r3, [r7, #28]
 8040e6e:	f1c3 0307 	rsb	r3, r3, #7
 8040e72:	2b04      	cmp	r3, #4
 8040e74:	bf28      	it	cs
 8040e76:	2304      	movcs	r3, #4
 8040e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040e7a:	69fb      	ldr	r3, [r7, #28]
 8040e7c:	3304      	adds	r3, #4
 8040e7e:	2b06      	cmp	r3, #6
 8040e80:	d902      	bls.n	8040e88 <NVIC_EncodePriority+0x30>
 8040e82:	69fb      	ldr	r3, [r7, #28]
 8040e84:	3b03      	subs	r3, #3
 8040e86:	e000      	b.n	8040e8a <NVIC_EncodePriority+0x32>
 8040e88:	2300      	movs	r3, #0
 8040e8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8040e90:	69bb      	ldr	r3, [r7, #24]
 8040e92:	fa02 f303 	lsl.w	r3, r2, r3
 8040e96:	43da      	mvns	r2, r3
 8040e98:	68bb      	ldr	r3, [r7, #8]
 8040e9a:	401a      	ands	r2, r3
 8040e9c:	697b      	ldr	r3, [r7, #20]
 8040e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8040ea4:	697b      	ldr	r3, [r7, #20]
 8040ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8040eaa:	43d9      	mvns	r1, r3
 8040eac:	687b      	ldr	r3, [r7, #4]
 8040eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040eb0:	4313      	orrs	r3, r2
}
 8040eb2:	4618      	mov	r0, r3
 8040eb4:	3724      	adds	r7, #36	@ 0x24
 8040eb6:	46bd      	mov	sp, r7
 8040eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ebc:	4770      	bx	lr
	...

08040ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040ec0:	b580      	push	{r7, lr}
 8040ec2:	b082      	sub	sp, #8
 8040ec4:	af00      	add	r7, sp, #0
 8040ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040ec8:	687b      	ldr	r3, [r7, #4]
 8040eca:	3b01      	subs	r3, #1
 8040ecc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8040ed0:	d301      	bcc.n	8040ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040ed2:	2301      	movs	r3, #1
 8040ed4:	e00f      	b.n	8040ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8040f00 <SysTick_Config+0x40>)
 8040ed8:	687b      	ldr	r3, [r7, #4]
 8040eda:	3b01      	subs	r3, #1
 8040edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040ede:	210f      	movs	r1, #15
 8040ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8040ee4:	f7ff ff8e 	bl	8040e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040ee8:	4b05      	ldr	r3, [pc, #20]	@ (8040f00 <SysTick_Config+0x40>)
 8040eea:	2200      	movs	r2, #0
 8040eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040eee:	4b04      	ldr	r3, [pc, #16]	@ (8040f00 <SysTick_Config+0x40>)
 8040ef0:	2207      	movs	r2, #7
 8040ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040ef4:	2300      	movs	r3, #0
}
 8040ef6:	4618      	mov	r0, r3
 8040ef8:	3708      	adds	r7, #8
 8040efa:	46bd      	mov	sp, r7
 8040efc:	bd80      	pop	{r7, pc}
 8040efe:	bf00      	nop
 8040f00:	e000e010 	.word	0xe000e010

08040f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040f04:	b580      	push	{r7, lr}
 8040f06:	b082      	sub	sp, #8
 8040f08:	af00      	add	r7, sp, #0
 8040f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040f0c:	6878      	ldr	r0, [r7, #4]
 8040f0e:	f7ff ff47 	bl	8040da0 <__NVIC_SetPriorityGrouping>
}
 8040f12:	bf00      	nop
 8040f14:	3708      	adds	r7, #8
 8040f16:	46bd      	mov	sp, r7
 8040f18:	bd80      	pop	{r7, pc}

08040f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040f1a:	b580      	push	{r7, lr}
 8040f1c:	b086      	sub	sp, #24
 8040f1e:	af00      	add	r7, sp, #0
 8040f20:	4603      	mov	r3, r0
 8040f22:	60b9      	str	r1, [r7, #8]
 8040f24:	607a      	str	r2, [r7, #4]
 8040f26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8040f28:	f7ff ff5e 	bl	8040de8 <__NVIC_GetPriorityGrouping>
 8040f2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040f2e:	687a      	ldr	r2, [r7, #4]
 8040f30:	68b9      	ldr	r1, [r7, #8]
 8040f32:	6978      	ldr	r0, [r7, #20]
 8040f34:	f7ff ff90 	bl	8040e58 <NVIC_EncodePriority>
 8040f38:	4602      	mov	r2, r0
 8040f3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8040f3e:	4611      	mov	r1, r2
 8040f40:	4618      	mov	r0, r3
 8040f42:	f7ff ff5f 	bl	8040e04 <__NVIC_SetPriority>
}
 8040f46:	bf00      	nop
 8040f48:	3718      	adds	r7, #24
 8040f4a:	46bd      	mov	sp, r7
 8040f4c:	bd80      	pop	{r7, pc}

08040f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040f4e:	b580      	push	{r7, lr}
 8040f50:	b082      	sub	sp, #8
 8040f52:	af00      	add	r7, sp, #0
 8040f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040f56:	6878      	ldr	r0, [r7, #4]
 8040f58:	f7ff ffb2 	bl	8040ec0 <SysTick_Config>
 8040f5c:	4603      	mov	r3, r0
}
 8040f5e:	4618      	mov	r0, r3
 8040f60:	3708      	adds	r7, #8
 8040f62:	46bd      	mov	sp, r7
 8040f64:	bd80      	pop	{r7, pc}
	...

08040f68 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8040f68:	b480      	push	{r7}
 8040f6a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8040f6c:	f3bf 8f5f 	dmb	sy
}
 8040f70:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8040f72:	4b07      	ldr	r3, [pc, #28]	@ (8040f90 <HAL_MPU_Disable+0x28>)
 8040f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8040f76:	4a06      	ldr	r2, [pc, #24]	@ (8040f90 <HAL_MPU_Disable+0x28>)
 8040f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8040f7c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8040f7e:	4b05      	ldr	r3, [pc, #20]	@ (8040f94 <HAL_MPU_Disable+0x2c>)
 8040f80:	2200      	movs	r2, #0
 8040f82:	605a      	str	r2, [r3, #4]
}
 8040f84:	bf00      	nop
 8040f86:	46bd      	mov	sp, r7
 8040f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f8c:	4770      	bx	lr
 8040f8e:	bf00      	nop
 8040f90:	e000ed00 	.word	0xe000ed00
 8040f94:	e000ed90 	.word	0xe000ed90

08040f98 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8040f98:	b480      	push	{r7}
 8040f9a:	b083      	sub	sp, #12
 8040f9c:	af00      	add	r7, sp, #0
 8040f9e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8040fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8040fd0 <HAL_MPU_Enable+0x38>)
 8040fa2:	687b      	ldr	r3, [r7, #4]
 8040fa4:	f043 0301 	orr.w	r3, r3, #1
 8040fa8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8040faa:	4b0a      	ldr	r3, [pc, #40]	@ (8040fd4 <HAL_MPU_Enable+0x3c>)
 8040fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8040fae:	4a09      	ldr	r2, [pc, #36]	@ (8040fd4 <HAL_MPU_Enable+0x3c>)
 8040fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8040fb4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8040fb6:	f3bf 8f4f 	dsb	sy
}
 8040fba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8040fbc:	f3bf 8f6f 	isb	sy
}
 8040fc0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8040fc2:	bf00      	nop
 8040fc4:	370c      	adds	r7, #12
 8040fc6:	46bd      	mov	sp, r7
 8040fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fcc:	4770      	bx	lr
 8040fce:	bf00      	nop
 8040fd0:	e000ed90 	.word	0xe000ed90
 8040fd4:	e000ed00 	.word	0xe000ed00

08040fd8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8040fd8:	b480      	push	{r7}
 8040fda:	b083      	sub	sp, #12
 8040fdc:	af00      	add	r7, sp, #0
 8040fde:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8040fe0:	687b      	ldr	r3, [r7, #4]
 8040fe2:	785a      	ldrb	r2, [r3, #1]
 8040fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8041054 <HAL_MPU_ConfigRegion+0x7c>)
 8040fe6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8040fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8041054 <HAL_MPU_ConfigRegion+0x7c>)
 8040fea:	691b      	ldr	r3, [r3, #16]
 8040fec:	4a19      	ldr	r2, [pc, #100]	@ (8041054 <HAL_MPU_ConfigRegion+0x7c>)
 8040fee:	f023 0301 	bic.w	r3, r3, #1
 8040ff2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8040ff4:	4a17      	ldr	r2, [pc, #92]	@ (8041054 <HAL_MPU_ConfigRegion+0x7c>)
 8040ff6:	687b      	ldr	r3, [r7, #4]
 8040ff8:	685b      	ldr	r3, [r3, #4]
 8040ffa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8040ffc:	687b      	ldr	r3, [r7, #4]
 8040ffe:	7b1b      	ldrb	r3, [r3, #12]
 8041000:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8041002:	687b      	ldr	r3, [r7, #4]
 8041004:	7adb      	ldrb	r3, [r3, #11]
 8041006:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8041008:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 804100a:	687b      	ldr	r3, [r7, #4]
 804100c:	7a9b      	ldrb	r3, [r3, #10]
 804100e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8041010:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8041012:	687b      	ldr	r3, [r7, #4]
 8041014:	7b5b      	ldrb	r3, [r3, #13]
 8041016:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8041018:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 804101a:	687b      	ldr	r3, [r7, #4]
 804101c:	7b9b      	ldrb	r3, [r3, #14]
 804101e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8041020:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8041022:	687b      	ldr	r3, [r7, #4]
 8041024:	7bdb      	ldrb	r3, [r3, #15]
 8041026:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8041028:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 804102a:	687b      	ldr	r3, [r7, #4]
 804102c:	7a5b      	ldrb	r3, [r3, #9]
 804102e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8041030:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8041032:	687b      	ldr	r3, [r7, #4]
 8041034:	7a1b      	ldrb	r3, [r3, #8]
 8041036:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8041038:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 804103a:	687a      	ldr	r2, [r7, #4]
 804103c:	7812      	ldrb	r2, [r2, #0]
 804103e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8041040:	4a04      	ldr	r2, [pc, #16]	@ (8041054 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8041042:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8041044:	6113      	str	r3, [r2, #16]
}
 8041046:	bf00      	nop
 8041048:	370c      	adds	r7, #12
 804104a:	46bd      	mov	sp, r7
 804104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041050:	4770      	bx	lr
 8041052:	bf00      	nop
 8041054:	e000ed90 	.word	0xe000ed90

08041058 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8041058:	b480      	push	{r7}
 804105a:	b089      	sub	sp, #36	@ 0x24
 804105c:	af00      	add	r7, sp, #0
 804105e:	6078      	str	r0, [r7, #4]
 8041060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8041062:	2300      	movs	r3, #0
 8041064:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8041066:	4b89      	ldr	r3, [pc, #548]	@ (804128c <HAL_GPIO_Init+0x234>)
 8041068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 804106a:	e194      	b.n	8041396 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 804106c:	683b      	ldr	r3, [r7, #0]
 804106e:	681a      	ldr	r2, [r3, #0]
 8041070:	2101      	movs	r1, #1
 8041072:	69fb      	ldr	r3, [r7, #28]
 8041074:	fa01 f303 	lsl.w	r3, r1, r3
 8041078:	4013      	ands	r3, r2
 804107a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 804107c:	693b      	ldr	r3, [r7, #16]
 804107e:	2b00      	cmp	r3, #0
 8041080:	f000 8186 	beq.w	8041390 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8041084:	683b      	ldr	r3, [r7, #0]
 8041086:	685b      	ldr	r3, [r3, #4]
 8041088:	f003 0303 	and.w	r3, r3, #3
 804108c:	2b01      	cmp	r3, #1
 804108e:	d005      	beq.n	804109c <HAL_GPIO_Init+0x44>
 8041090:	683b      	ldr	r3, [r7, #0]
 8041092:	685b      	ldr	r3, [r3, #4]
 8041094:	f003 0303 	and.w	r3, r3, #3
 8041098:	2b02      	cmp	r3, #2
 804109a:	d130      	bne.n	80410fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 804109c:	687b      	ldr	r3, [r7, #4]
 804109e:	689b      	ldr	r3, [r3, #8]
 80410a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80410a2:	69fb      	ldr	r3, [r7, #28]
 80410a4:	005b      	lsls	r3, r3, #1
 80410a6:	2203      	movs	r2, #3
 80410a8:	fa02 f303 	lsl.w	r3, r2, r3
 80410ac:	43db      	mvns	r3, r3
 80410ae:	69ba      	ldr	r2, [r7, #24]
 80410b0:	4013      	ands	r3, r2
 80410b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80410b4:	683b      	ldr	r3, [r7, #0]
 80410b6:	68da      	ldr	r2, [r3, #12]
 80410b8:	69fb      	ldr	r3, [r7, #28]
 80410ba:	005b      	lsls	r3, r3, #1
 80410bc:	fa02 f303 	lsl.w	r3, r2, r3
 80410c0:	69ba      	ldr	r2, [r7, #24]
 80410c2:	4313      	orrs	r3, r2
 80410c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80410c6:	687b      	ldr	r3, [r7, #4]
 80410c8:	69ba      	ldr	r2, [r7, #24]
 80410ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80410cc:	687b      	ldr	r3, [r7, #4]
 80410ce:	685b      	ldr	r3, [r3, #4]
 80410d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80410d2:	2201      	movs	r2, #1
 80410d4:	69fb      	ldr	r3, [r7, #28]
 80410d6:	fa02 f303 	lsl.w	r3, r2, r3
 80410da:	43db      	mvns	r3, r3
 80410dc:	69ba      	ldr	r2, [r7, #24]
 80410de:	4013      	ands	r3, r2
 80410e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80410e2:	683b      	ldr	r3, [r7, #0]
 80410e4:	685b      	ldr	r3, [r3, #4]
 80410e6:	091b      	lsrs	r3, r3, #4
 80410e8:	f003 0201 	and.w	r2, r3, #1
 80410ec:	69fb      	ldr	r3, [r7, #28]
 80410ee:	fa02 f303 	lsl.w	r3, r2, r3
 80410f2:	69ba      	ldr	r2, [r7, #24]
 80410f4:	4313      	orrs	r3, r2
 80410f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80410f8:	687b      	ldr	r3, [r7, #4]
 80410fa:	69ba      	ldr	r2, [r7, #24]
 80410fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80410fe:	683b      	ldr	r3, [r7, #0]
 8041100:	685b      	ldr	r3, [r3, #4]
 8041102:	f003 0303 	and.w	r3, r3, #3
 8041106:	2b03      	cmp	r3, #3
 8041108:	d017      	beq.n	804113a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 804110a:	687b      	ldr	r3, [r7, #4]
 804110c:	68db      	ldr	r3, [r3, #12]
 804110e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8041110:	69fb      	ldr	r3, [r7, #28]
 8041112:	005b      	lsls	r3, r3, #1
 8041114:	2203      	movs	r2, #3
 8041116:	fa02 f303 	lsl.w	r3, r2, r3
 804111a:	43db      	mvns	r3, r3
 804111c:	69ba      	ldr	r2, [r7, #24]
 804111e:	4013      	ands	r3, r2
 8041120:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8041122:	683b      	ldr	r3, [r7, #0]
 8041124:	689a      	ldr	r2, [r3, #8]
 8041126:	69fb      	ldr	r3, [r7, #28]
 8041128:	005b      	lsls	r3, r3, #1
 804112a:	fa02 f303 	lsl.w	r3, r2, r3
 804112e:	69ba      	ldr	r2, [r7, #24]
 8041130:	4313      	orrs	r3, r2
 8041132:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8041134:	687b      	ldr	r3, [r7, #4]
 8041136:	69ba      	ldr	r2, [r7, #24]
 8041138:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 804113a:	683b      	ldr	r3, [r7, #0]
 804113c:	685b      	ldr	r3, [r3, #4]
 804113e:	f003 0303 	and.w	r3, r3, #3
 8041142:	2b02      	cmp	r3, #2
 8041144:	d123      	bne.n	804118e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8041146:	69fb      	ldr	r3, [r7, #28]
 8041148:	08da      	lsrs	r2, r3, #3
 804114a:	687b      	ldr	r3, [r7, #4]
 804114c:	3208      	adds	r2, #8
 804114e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8041152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8041154:	69fb      	ldr	r3, [r7, #28]
 8041156:	f003 0307 	and.w	r3, r3, #7
 804115a:	009b      	lsls	r3, r3, #2
 804115c:	220f      	movs	r2, #15
 804115e:	fa02 f303 	lsl.w	r3, r2, r3
 8041162:	43db      	mvns	r3, r3
 8041164:	69ba      	ldr	r2, [r7, #24]
 8041166:	4013      	ands	r3, r2
 8041168:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 804116a:	683b      	ldr	r3, [r7, #0]
 804116c:	691a      	ldr	r2, [r3, #16]
 804116e:	69fb      	ldr	r3, [r7, #28]
 8041170:	f003 0307 	and.w	r3, r3, #7
 8041174:	009b      	lsls	r3, r3, #2
 8041176:	fa02 f303 	lsl.w	r3, r2, r3
 804117a:	69ba      	ldr	r2, [r7, #24]
 804117c:	4313      	orrs	r3, r2
 804117e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8041180:	69fb      	ldr	r3, [r7, #28]
 8041182:	08da      	lsrs	r2, r3, #3
 8041184:	687b      	ldr	r3, [r7, #4]
 8041186:	3208      	adds	r2, #8
 8041188:	69b9      	ldr	r1, [r7, #24]
 804118a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 804118e:	687b      	ldr	r3, [r7, #4]
 8041190:	681b      	ldr	r3, [r3, #0]
 8041192:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8041194:	69fb      	ldr	r3, [r7, #28]
 8041196:	005b      	lsls	r3, r3, #1
 8041198:	2203      	movs	r2, #3
 804119a:	fa02 f303 	lsl.w	r3, r2, r3
 804119e:	43db      	mvns	r3, r3
 80411a0:	69ba      	ldr	r2, [r7, #24]
 80411a2:	4013      	ands	r3, r2
 80411a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80411a6:	683b      	ldr	r3, [r7, #0]
 80411a8:	685b      	ldr	r3, [r3, #4]
 80411aa:	f003 0203 	and.w	r2, r3, #3
 80411ae:	69fb      	ldr	r3, [r7, #28]
 80411b0:	005b      	lsls	r3, r3, #1
 80411b2:	fa02 f303 	lsl.w	r3, r2, r3
 80411b6:	69ba      	ldr	r2, [r7, #24]
 80411b8:	4313      	orrs	r3, r2
 80411ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80411bc:	687b      	ldr	r3, [r7, #4]
 80411be:	69ba      	ldr	r2, [r7, #24]
 80411c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80411c2:	683b      	ldr	r3, [r7, #0]
 80411c4:	685b      	ldr	r3, [r3, #4]
 80411c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80411ca:	2b00      	cmp	r3, #0
 80411cc:	f000 80e0 	beq.w	8041390 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80411d0:	4b2f      	ldr	r3, [pc, #188]	@ (8041290 <HAL_GPIO_Init+0x238>)
 80411d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80411d6:	4a2e      	ldr	r2, [pc, #184]	@ (8041290 <HAL_GPIO_Init+0x238>)
 80411d8:	f043 0302 	orr.w	r3, r3, #2
 80411dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80411e0:	4b2b      	ldr	r3, [pc, #172]	@ (8041290 <HAL_GPIO_Init+0x238>)
 80411e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80411e6:	f003 0302 	and.w	r3, r3, #2
 80411ea:	60fb      	str	r3, [r7, #12]
 80411ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80411ee:	4a29      	ldr	r2, [pc, #164]	@ (8041294 <HAL_GPIO_Init+0x23c>)
 80411f0:	69fb      	ldr	r3, [r7, #28]
 80411f2:	089b      	lsrs	r3, r3, #2
 80411f4:	3302      	adds	r3, #2
 80411f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80411fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80411fc:	69fb      	ldr	r3, [r7, #28]
 80411fe:	f003 0303 	and.w	r3, r3, #3
 8041202:	009b      	lsls	r3, r3, #2
 8041204:	220f      	movs	r2, #15
 8041206:	fa02 f303 	lsl.w	r3, r2, r3
 804120a:	43db      	mvns	r3, r3
 804120c:	69ba      	ldr	r2, [r7, #24]
 804120e:	4013      	ands	r3, r2
 8041210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8041212:	687b      	ldr	r3, [r7, #4]
 8041214:	4a20      	ldr	r2, [pc, #128]	@ (8041298 <HAL_GPIO_Init+0x240>)
 8041216:	4293      	cmp	r3, r2
 8041218:	d052      	beq.n	80412c0 <HAL_GPIO_Init+0x268>
 804121a:	687b      	ldr	r3, [r7, #4]
 804121c:	4a1f      	ldr	r2, [pc, #124]	@ (804129c <HAL_GPIO_Init+0x244>)
 804121e:	4293      	cmp	r3, r2
 8041220:	d031      	beq.n	8041286 <HAL_GPIO_Init+0x22e>
 8041222:	687b      	ldr	r3, [r7, #4]
 8041224:	4a1e      	ldr	r2, [pc, #120]	@ (80412a0 <HAL_GPIO_Init+0x248>)
 8041226:	4293      	cmp	r3, r2
 8041228:	d02b      	beq.n	8041282 <HAL_GPIO_Init+0x22a>
 804122a:	687b      	ldr	r3, [r7, #4]
 804122c:	4a1d      	ldr	r2, [pc, #116]	@ (80412a4 <HAL_GPIO_Init+0x24c>)
 804122e:	4293      	cmp	r3, r2
 8041230:	d025      	beq.n	804127e <HAL_GPIO_Init+0x226>
 8041232:	687b      	ldr	r3, [r7, #4]
 8041234:	4a1c      	ldr	r2, [pc, #112]	@ (80412a8 <HAL_GPIO_Init+0x250>)
 8041236:	4293      	cmp	r3, r2
 8041238:	d01f      	beq.n	804127a <HAL_GPIO_Init+0x222>
 804123a:	687b      	ldr	r3, [r7, #4]
 804123c:	4a1b      	ldr	r2, [pc, #108]	@ (80412ac <HAL_GPIO_Init+0x254>)
 804123e:	4293      	cmp	r3, r2
 8041240:	d019      	beq.n	8041276 <HAL_GPIO_Init+0x21e>
 8041242:	687b      	ldr	r3, [r7, #4]
 8041244:	4a1a      	ldr	r2, [pc, #104]	@ (80412b0 <HAL_GPIO_Init+0x258>)
 8041246:	4293      	cmp	r3, r2
 8041248:	d013      	beq.n	8041272 <HAL_GPIO_Init+0x21a>
 804124a:	687b      	ldr	r3, [r7, #4]
 804124c:	4a19      	ldr	r2, [pc, #100]	@ (80412b4 <HAL_GPIO_Init+0x25c>)
 804124e:	4293      	cmp	r3, r2
 8041250:	d00d      	beq.n	804126e <HAL_GPIO_Init+0x216>
 8041252:	687b      	ldr	r3, [r7, #4]
 8041254:	4a18      	ldr	r2, [pc, #96]	@ (80412b8 <HAL_GPIO_Init+0x260>)
 8041256:	4293      	cmp	r3, r2
 8041258:	d007      	beq.n	804126a <HAL_GPIO_Init+0x212>
 804125a:	687b      	ldr	r3, [r7, #4]
 804125c:	4a17      	ldr	r2, [pc, #92]	@ (80412bc <HAL_GPIO_Init+0x264>)
 804125e:	4293      	cmp	r3, r2
 8041260:	d101      	bne.n	8041266 <HAL_GPIO_Init+0x20e>
 8041262:	2309      	movs	r3, #9
 8041264:	e02d      	b.n	80412c2 <HAL_GPIO_Init+0x26a>
 8041266:	230a      	movs	r3, #10
 8041268:	e02b      	b.n	80412c2 <HAL_GPIO_Init+0x26a>
 804126a:	2308      	movs	r3, #8
 804126c:	e029      	b.n	80412c2 <HAL_GPIO_Init+0x26a>
 804126e:	2307      	movs	r3, #7
 8041270:	e027      	b.n	80412c2 <HAL_GPIO_Init+0x26a>
 8041272:	2306      	movs	r3, #6
 8041274:	e025      	b.n	80412c2 <HAL_GPIO_Init+0x26a>
 8041276:	2305      	movs	r3, #5
 8041278:	e023      	b.n	80412c2 <HAL_GPIO_Init+0x26a>
 804127a:	2304      	movs	r3, #4
 804127c:	e021      	b.n	80412c2 <HAL_GPIO_Init+0x26a>
 804127e:	2303      	movs	r3, #3
 8041280:	e01f      	b.n	80412c2 <HAL_GPIO_Init+0x26a>
 8041282:	2302      	movs	r3, #2
 8041284:	e01d      	b.n	80412c2 <HAL_GPIO_Init+0x26a>
 8041286:	2301      	movs	r3, #1
 8041288:	e01b      	b.n	80412c2 <HAL_GPIO_Init+0x26a>
 804128a:	bf00      	nop
 804128c:	58000080 	.word	0x58000080
 8041290:	58024400 	.word	0x58024400
 8041294:	58000400 	.word	0x58000400
 8041298:	58020000 	.word	0x58020000
 804129c:	58020400 	.word	0x58020400
 80412a0:	58020800 	.word	0x58020800
 80412a4:	58020c00 	.word	0x58020c00
 80412a8:	58021000 	.word	0x58021000
 80412ac:	58021400 	.word	0x58021400
 80412b0:	58021800 	.word	0x58021800
 80412b4:	58021c00 	.word	0x58021c00
 80412b8:	58022000 	.word	0x58022000
 80412bc:	58022400 	.word	0x58022400
 80412c0:	2300      	movs	r3, #0
 80412c2:	69fa      	ldr	r2, [r7, #28]
 80412c4:	f002 0203 	and.w	r2, r2, #3
 80412c8:	0092      	lsls	r2, r2, #2
 80412ca:	4093      	lsls	r3, r2
 80412cc:	69ba      	ldr	r2, [r7, #24]
 80412ce:	4313      	orrs	r3, r2
 80412d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80412d2:	4938      	ldr	r1, [pc, #224]	@ (80413b4 <HAL_GPIO_Init+0x35c>)
 80412d4:	69fb      	ldr	r3, [r7, #28]
 80412d6:	089b      	lsrs	r3, r3, #2
 80412d8:	3302      	adds	r3, #2
 80412da:	69ba      	ldr	r2, [r7, #24]
 80412dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80412e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80412e4:	681b      	ldr	r3, [r3, #0]
 80412e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80412e8:	693b      	ldr	r3, [r7, #16]
 80412ea:	43db      	mvns	r3, r3
 80412ec:	69ba      	ldr	r2, [r7, #24]
 80412ee:	4013      	ands	r3, r2
 80412f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80412f2:	683b      	ldr	r3, [r7, #0]
 80412f4:	685b      	ldr	r3, [r3, #4]
 80412f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80412fa:	2b00      	cmp	r3, #0
 80412fc:	d003      	beq.n	8041306 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80412fe:	69ba      	ldr	r2, [r7, #24]
 8041300:	693b      	ldr	r3, [r7, #16]
 8041302:	4313      	orrs	r3, r2
 8041304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8041306:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 804130a:	69bb      	ldr	r3, [r7, #24]
 804130c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 804130e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8041312:	685b      	ldr	r3, [r3, #4]
 8041314:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041316:	693b      	ldr	r3, [r7, #16]
 8041318:	43db      	mvns	r3, r3
 804131a:	69ba      	ldr	r2, [r7, #24]
 804131c:	4013      	ands	r3, r2
 804131e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8041320:	683b      	ldr	r3, [r7, #0]
 8041322:	685b      	ldr	r3, [r3, #4]
 8041324:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8041328:	2b00      	cmp	r3, #0
 804132a:	d003      	beq.n	8041334 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 804132c:	69ba      	ldr	r2, [r7, #24]
 804132e:	693b      	ldr	r3, [r7, #16]
 8041330:	4313      	orrs	r3, r2
 8041332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8041334:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8041338:	69bb      	ldr	r3, [r7, #24]
 804133a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 804133c:	697b      	ldr	r3, [r7, #20]
 804133e:	685b      	ldr	r3, [r3, #4]
 8041340:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041342:	693b      	ldr	r3, [r7, #16]
 8041344:	43db      	mvns	r3, r3
 8041346:	69ba      	ldr	r2, [r7, #24]
 8041348:	4013      	ands	r3, r2
 804134a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 804134c:	683b      	ldr	r3, [r7, #0]
 804134e:	685b      	ldr	r3, [r3, #4]
 8041350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041354:	2b00      	cmp	r3, #0
 8041356:	d003      	beq.n	8041360 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8041358:	69ba      	ldr	r2, [r7, #24]
 804135a:	693b      	ldr	r3, [r7, #16]
 804135c:	4313      	orrs	r3, r2
 804135e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8041360:	697b      	ldr	r3, [r7, #20]
 8041362:	69ba      	ldr	r2, [r7, #24]
 8041364:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8041366:	697b      	ldr	r3, [r7, #20]
 8041368:	681b      	ldr	r3, [r3, #0]
 804136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 804136c:	693b      	ldr	r3, [r7, #16]
 804136e:	43db      	mvns	r3, r3
 8041370:	69ba      	ldr	r2, [r7, #24]
 8041372:	4013      	ands	r3, r2
 8041374:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8041376:	683b      	ldr	r3, [r7, #0]
 8041378:	685b      	ldr	r3, [r3, #4]
 804137a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 804137e:	2b00      	cmp	r3, #0
 8041380:	d003      	beq.n	804138a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8041382:	69ba      	ldr	r2, [r7, #24]
 8041384:	693b      	ldr	r3, [r7, #16]
 8041386:	4313      	orrs	r3, r2
 8041388:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 804138a:	697b      	ldr	r3, [r7, #20]
 804138c:	69ba      	ldr	r2, [r7, #24]
 804138e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8041390:	69fb      	ldr	r3, [r7, #28]
 8041392:	3301      	adds	r3, #1
 8041394:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8041396:	683b      	ldr	r3, [r7, #0]
 8041398:	681a      	ldr	r2, [r3, #0]
 804139a:	69fb      	ldr	r3, [r7, #28]
 804139c:	fa22 f303 	lsr.w	r3, r2, r3
 80413a0:	2b00      	cmp	r3, #0
 80413a2:	f47f ae63 	bne.w	804106c <HAL_GPIO_Init+0x14>
  }
}
 80413a6:	bf00      	nop
 80413a8:	bf00      	nop
 80413aa:	3724      	adds	r7, #36	@ 0x24
 80413ac:	46bd      	mov	sp, r7
 80413ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80413b2:	4770      	bx	lr
 80413b4:	58000400 	.word	0x58000400

080413b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80413b8:	b480      	push	{r7}
 80413ba:	b083      	sub	sp, #12
 80413bc:	af00      	add	r7, sp, #0
 80413be:	6078      	str	r0, [r7, #4]
 80413c0:	460b      	mov	r3, r1
 80413c2:	807b      	strh	r3, [r7, #2]
 80413c4:	4613      	mov	r3, r2
 80413c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80413c8:	787b      	ldrb	r3, [r7, #1]
 80413ca:	2b00      	cmp	r3, #0
 80413cc:	d003      	beq.n	80413d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80413ce:	887a      	ldrh	r2, [r7, #2]
 80413d0:	687b      	ldr	r3, [r7, #4]
 80413d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80413d4:	e003      	b.n	80413de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80413d6:	887b      	ldrh	r3, [r7, #2]
 80413d8:	041a      	lsls	r2, r3, #16
 80413da:	687b      	ldr	r3, [r7, #4]
 80413dc:	619a      	str	r2, [r3, #24]
}
 80413de:	bf00      	nop
 80413e0:	370c      	adds	r7, #12
 80413e2:	46bd      	mov	sp, r7
 80413e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80413e8:	4770      	bx	lr

080413ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80413ea:	b480      	push	{r7}
 80413ec:	b085      	sub	sp, #20
 80413ee:	af00      	add	r7, sp, #0
 80413f0:	6078      	str	r0, [r7, #4]
 80413f2:	460b      	mov	r3, r1
 80413f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80413f6:	687b      	ldr	r3, [r7, #4]
 80413f8:	695b      	ldr	r3, [r3, #20]
 80413fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80413fc:	887a      	ldrh	r2, [r7, #2]
 80413fe:	68fb      	ldr	r3, [r7, #12]
 8041400:	4013      	ands	r3, r2
 8041402:	041a      	lsls	r2, r3, #16
 8041404:	68fb      	ldr	r3, [r7, #12]
 8041406:	43d9      	mvns	r1, r3
 8041408:	887b      	ldrh	r3, [r7, #2]
 804140a:	400b      	ands	r3, r1
 804140c:	431a      	orrs	r2, r3
 804140e:	687b      	ldr	r3, [r7, #4]
 8041410:	619a      	str	r2, [r3, #24]
}
 8041412:	bf00      	nop
 8041414:	3714      	adds	r7, #20
 8041416:	46bd      	mov	sp, r7
 8041418:	f85d 7b04 	ldr.w	r7, [sp], #4
 804141c:	4770      	bx	lr
	...

08041420 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8041420:	b480      	push	{r7}
 8041422:	b083      	sub	sp, #12
 8041424:	af00      	add	r7, sp, #0
 8041426:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8041428:	4a08      	ldr	r2, [pc, #32]	@ (804144c <HAL_HSEM_FastTake+0x2c>)
 804142a:	687b      	ldr	r3, [r7, #4]
 804142c:	3320      	adds	r3, #32
 804142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041432:	4a07      	ldr	r2, [pc, #28]	@ (8041450 <HAL_HSEM_FastTake+0x30>)
 8041434:	4293      	cmp	r3, r2
 8041436:	d101      	bne.n	804143c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8041438:	2300      	movs	r3, #0
 804143a:	e000      	b.n	804143e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 804143c:	2301      	movs	r3, #1
}
 804143e:	4618      	mov	r0, r3
 8041440:	370c      	adds	r7, #12
 8041442:	46bd      	mov	sp, r7
 8041444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041448:	4770      	bx	lr
 804144a:	bf00      	nop
 804144c:	58026400 	.word	0x58026400
 8041450:	80000300 	.word	0x80000300

08041454 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 8041454:	b480      	push	{r7}
 8041456:	b083      	sub	sp, #12
 8041458:	af00      	add	r7, sp, #0
 804145a:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 804145c:	4a07      	ldr	r2, [pc, #28]	@ (804147c <HAL_HSEM_IsSemTaken+0x28>)
 804145e:	687b      	ldr	r3, [r7, #4]
 8041460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041464:	2b00      	cmp	r3, #0
 8041466:	da01      	bge.n	804146c <HAL_HSEM_IsSemTaken+0x18>
 8041468:	2301      	movs	r3, #1
 804146a:	e000      	b.n	804146e <HAL_HSEM_IsSemTaken+0x1a>
 804146c:	2300      	movs	r3, #0
}
 804146e:	4618      	mov	r0, r3
 8041470:	370c      	adds	r7, #12
 8041472:	46bd      	mov	sp, r7
 8041474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041478:	4770      	bx	lr
 804147a:	bf00      	nop
 804147c:	58026400 	.word	0x58026400

08041480 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8041480:	b480      	push	{r7}
 8041482:	b083      	sub	sp, #12
 8041484:	af00      	add	r7, sp, #0
 8041486:	6078      	str	r0, [r7, #4]
 8041488:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 804148a:	4906      	ldr	r1, [pc, #24]	@ (80414a4 <HAL_HSEM_Release+0x24>)
 804148c:	683b      	ldr	r3, [r7, #0]
 804148e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8041492:	687b      	ldr	r3, [r7, #4]
 8041494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8041498:	bf00      	nop
 804149a:	370c      	adds	r7, #12
 804149c:	46bd      	mov	sp, r7
 804149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80414a2:	4770      	bx	lr
 80414a4:	58026400 	.word	0x58026400

080414a8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80414a8:	b580      	push	{r7, lr}
 80414aa:	b084      	sub	sp, #16
 80414ac:	af00      	add	r7, sp, #0
 80414ae:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80414b0:	4b29      	ldr	r3, [pc, #164]	@ (8041558 <HAL_PWREx_ConfigSupply+0xb0>)
 80414b2:	68db      	ldr	r3, [r3, #12]
 80414b4:	f003 0307 	and.w	r3, r3, #7
 80414b8:	2b06      	cmp	r3, #6
 80414ba:	d00a      	beq.n	80414d2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80414bc:	4b26      	ldr	r3, [pc, #152]	@ (8041558 <HAL_PWREx_ConfigSupply+0xb0>)
 80414be:	68db      	ldr	r3, [r3, #12]
 80414c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80414c4:	687a      	ldr	r2, [r7, #4]
 80414c6:	429a      	cmp	r2, r3
 80414c8:	d001      	beq.n	80414ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80414ca:	2301      	movs	r3, #1
 80414cc:	e040      	b.n	8041550 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80414ce:	2300      	movs	r3, #0
 80414d0:	e03e      	b.n	8041550 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80414d2:	4b21      	ldr	r3, [pc, #132]	@ (8041558 <HAL_PWREx_ConfigSupply+0xb0>)
 80414d4:	68db      	ldr	r3, [r3, #12]
 80414d6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80414da:	491f      	ldr	r1, [pc, #124]	@ (8041558 <HAL_PWREx_ConfigSupply+0xb0>)
 80414dc:	687b      	ldr	r3, [r7, #4]
 80414de:	4313      	orrs	r3, r2
 80414e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80414e2:	f7ff fc45 	bl	8040d70 <HAL_GetTick>
 80414e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80414e8:	e009      	b.n	80414fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80414ea:	f7ff fc41 	bl	8040d70 <HAL_GetTick>
 80414ee:	4602      	mov	r2, r0
 80414f0:	68fb      	ldr	r3, [r7, #12]
 80414f2:	1ad3      	subs	r3, r2, r3
 80414f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80414f8:	d901      	bls.n	80414fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80414fa:	2301      	movs	r3, #1
 80414fc:	e028      	b.n	8041550 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80414fe:	4b16      	ldr	r3, [pc, #88]	@ (8041558 <HAL_PWREx_ConfigSupply+0xb0>)
 8041500:	685b      	ldr	r3, [r3, #4]
 8041502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8041506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 804150a:	d1ee      	bne.n	80414ea <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 804150c:	687b      	ldr	r3, [r7, #4]
 804150e:	2b1e      	cmp	r3, #30
 8041510:	d008      	beq.n	8041524 <HAL_PWREx_ConfigSupply+0x7c>
 8041512:	687b      	ldr	r3, [r7, #4]
 8041514:	2b2e      	cmp	r3, #46	@ 0x2e
 8041516:	d005      	beq.n	8041524 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8041518:	687b      	ldr	r3, [r7, #4]
 804151a:	2b1d      	cmp	r3, #29
 804151c:	d002      	beq.n	8041524 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 804151e:	687b      	ldr	r3, [r7, #4]
 8041520:	2b2d      	cmp	r3, #45	@ 0x2d
 8041522:	d114      	bne.n	804154e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8041524:	f7ff fc24 	bl	8040d70 <HAL_GetTick>
 8041528:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 804152a:	e009      	b.n	8041540 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 804152c:	f7ff fc20 	bl	8040d70 <HAL_GetTick>
 8041530:	4602      	mov	r2, r0
 8041532:	68fb      	ldr	r3, [r7, #12]
 8041534:	1ad3      	subs	r3, r2, r3
 8041536:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 804153a:	d901      	bls.n	8041540 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 804153c:	2301      	movs	r3, #1
 804153e:	e007      	b.n	8041550 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8041540:	4b05      	ldr	r3, [pc, #20]	@ (8041558 <HAL_PWREx_ConfigSupply+0xb0>)
 8041542:	68db      	ldr	r3, [r3, #12]
 8041544:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8041548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 804154c:	d1ee      	bne.n	804152c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 804154e:	2300      	movs	r3, #0
}
 8041550:	4618      	mov	r0, r3
 8041552:	3710      	adds	r7, #16
 8041554:	46bd      	mov	sp, r7
 8041556:	bd80      	pop	{r7, pc}
 8041558:	58024800 	.word	0x58024800

0804155c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 804155c:	b580      	push	{r7, lr}
 804155e:	b08c      	sub	sp, #48	@ 0x30
 8041560:	af00      	add	r7, sp, #0
 8041562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8041564:	687b      	ldr	r3, [r7, #4]
 8041566:	2b00      	cmp	r3, #0
 8041568:	d102      	bne.n	8041570 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 804156a:	2301      	movs	r3, #1
 804156c:	f000 bc48 	b.w	8041e00 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8041570:	687b      	ldr	r3, [r7, #4]
 8041572:	681b      	ldr	r3, [r3, #0]
 8041574:	f003 0301 	and.w	r3, r3, #1
 8041578:	2b00      	cmp	r3, #0
 804157a:	f000 8088 	beq.w	804168e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 804157e:	4b99      	ldr	r3, [pc, #612]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 8041580:	691b      	ldr	r3, [r3, #16]
 8041582:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8041586:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8041588:	4b96      	ldr	r3, [pc, #600]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 804158a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804158c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 804158e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8041590:	2b10      	cmp	r3, #16
 8041592:	d007      	beq.n	80415a4 <HAL_RCC_OscConfig+0x48>
 8041594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8041596:	2b18      	cmp	r3, #24
 8041598:	d111      	bne.n	80415be <HAL_RCC_OscConfig+0x62>
 804159a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804159c:	f003 0303 	and.w	r3, r3, #3
 80415a0:	2b02      	cmp	r3, #2
 80415a2:	d10c      	bne.n	80415be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80415a4:	4b8f      	ldr	r3, [pc, #572]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 80415a6:	681b      	ldr	r3, [r3, #0]
 80415a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80415ac:	2b00      	cmp	r3, #0
 80415ae:	d06d      	beq.n	804168c <HAL_RCC_OscConfig+0x130>
 80415b0:	687b      	ldr	r3, [r7, #4]
 80415b2:	685b      	ldr	r3, [r3, #4]
 80415b4:	2b00      	cmp	r3, #0
 80415b6:	d169      	bne.n	804168c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80415b8:	2301      	movs	r3, #1
 80415ba:	f000 bc21 	b.w	8041e00 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80415be:	687b      	ldr	r3, [r7, #4]
 80415c0:	685b      	ldr	r3, [r3, #4]
 80415c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80415c6:	d106      	bne.n	80415d6 <HAL_RCC_OscConfig+0x7a>
 80415c8:	4b86      	ldr	r3, [pc, #536]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 80415ca:	681b      	ldr	r3, [r3, #0]
 80415cc:	4a85      	ldr	r2, [pc, #532]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 80415ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80415d2:	6013      	str	r3, [r2, #0]
 80415d4:	e02e      	b.n	8041634 <HAL_RCC_OscConfig+0xd8>
 80415d6:	687b      	ldr	r3, [r7, #4]
 80415d8:	685b      	ldr	r3, [r3, #4]
 80415da:	2b00      	cmp	r3, #0
 80415dc:	d10c      	bne.n	80415f8 <HAL_RCC_OscConfig+0x9c>
 80415de:	4b81      	ldr	r3, [pc, #516]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 80415e0:	681b      	ldr	r3, [r3, #0]
 80415e2:	4a80      	ldr	r2, [pc, #512]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 80415e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80415e8:	6013      	str	r3, [r2, #0]
 80415ea:	4b7e      	ldr	r3, [pc, #504]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 80415ec:	681b      	ldr	r3, [r3, #0]
 80415ee:	4a7d      	ldr	r2, [pc, #500]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 80415f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80415f4:	6013      	str	r3, [r2, #0]
 80415f6:	e01d      	b.n	8041634 <HAL_RCC_OscConfig+0xd8>
 80415f8:	687b      	ldr	r3, [r7, #4]
 80415fa:	685b      	ldr	r3, [r3, #4]
 80415fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8041600:	d10c      	bne.n	804161c <HAL_RCC_OscConfig+0xc0>
 8041602:	4b78      	ldr	r3, [pc, #480]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 8041604:	681b      	ldr	r3, [r3, #0]
 8041606:	4a77      	ldr	r2, [pc, #476]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 8041608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 804160c:	6013      	str	r3, [r2, #0]
 804160e:	4b75      	ldr	r3, [pc, #468]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 8041610:	681b      	ldr	r3, [r3, #0]
 8041612:	4a74      	ldr	r2, [pc, #464]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 8041614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8041618:	6013      	str	r3, [r2, #0]
 804161a:	e00b      	b.n	8041634 <HAL_RCC_OscConfig+0xd8>
 804161c:	4b71      	ldr	r3, [pc, #452]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 804161e:	681b      	ldr	r3, [r3, #0]
 8041620:	4a70      	ldr	r2, [pc, #448]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 8041622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8041626:	6013      	str	r3, [r2, #0]
 8041628:	4b6e      	ldr	r3, [pc, #440]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 804162a:	681b      	ldr	r3, [r3, #0]
 804162c:	4a6d      	ldr	r2, [pc, #436]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 804162e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8041632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8041634:	687b      	ldr	r3, [r7, #4]
 8041636:	685b      	ldr	r3, [r3, #4]
 8041638:	2b00      	cmp	r3, #0
 804163a:	d013      	beq.n	8041664 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804163c:	f7ff fb98 	bl	8040d70 <HAL_GetTick>
 8041640:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8041642:	e008      	b.n	8041656 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041644:	f7ff fb94 	bl	8040d70 <HAL_GetTick>
 8041648:	4602      	mov	r2, r0
 804164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804164c:	1ad3      	subs	r3, r2, r3
 804164e:	2b64      	cmp	r3, #100	@ 0x64
 8041650:	d901      	bls.n	8041656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8041652:	2303      	movs	r3, #3
 8041654:	e3d4      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8041656:	4b63      	ldr	r3, [pc, #396]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 8041658:	681b      	ldr	r3, [r3, #0]
 804165a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804165e:	2b00      	cmp	r3, #0
 8041660:	d0f0      	beq.n	8041644 <HAL_RCC_OscConfig+0xe8>
 8041662:	e014      	b.n	804168e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041664:	f7ff fb84 	bl	8040d70 <HAL_GetTick>
 8041668:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 804166a:	e008      	b.n	804167e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 804166c:	f7ff fb80 	bl	8040d70 <HAL_GetTick>
 8041670:	4602      	mov	r2, r0
 8041672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041674:	1ad3      	subs	r3, r2, r3
 8041676:	2b64      	cmp	r3, #100	@ 0x64
 8041678:	d901      	bls.n	804167e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 804167a:	2303      	movs	r3, #3
 804167c:	e3c0      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 804167e:	4b59      	ldr	r3, [pc, #356]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 8041680:	681b      	ldr	r3, [r3, #0]
 8041682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041686:	2b00      	cmp	r3, #0
 8041688:	d1f0      	bne.n	804166c <HAL_RCC_OscConfig+0x110>
 804168a:	e000      	b.n	804168e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804168c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 804168e:	687b      	ldr	r3, [r7, #4]
 8041690:	681b      	ldr	r3, [r3, #0]
 8041692:	f003 0302 	and.w	r3, r3, #2
 8041696:	2b00      	cmp	r3, #0
 8041698:	f000 80ca 	beq.w	8041830 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 804169c:	4b51      	ldr	r3, [pc, #324]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 804169e:	691b      	ldr	r3, [r3, #16]
 80416a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80416a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80416a6:	4b4f      	ldr	r3, [pc, #316]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 80416a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80416aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80416ac:	6a3b      	ldr	r3, [r7, #32]
 80416ae:	2b00      	cmp	r3, #0
 80416b0:	d007      	beq.n	80416c2 <HAL_RCC_OscConfig+0x166>
 80416b2:	6a3b      	ldr	r3, [r7, #32]
 80416b4:	2b18      	cmp	r3, #24
 80416b6:	d156      	bne.n	8041766 <HAL_RCC_OscConfig+0x20a>
 80416b8:	69fb      	ldr	r3, [r7, #28]
 80416ba:	f003 0303 	and.w	r3, r3, #3
 80416be:	2b00      	cmp	r3, #0
 80416c0:	d151      	bne.n	8041766 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80416c2:	4b48      	ldr	r3, [pc, #288]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 80416c4:	681b      	ldr	r3, [r3, #0]
 80416c6:	f003 0304 	and.w	r3, r3, #4
 80416ca:	2b00      	cmp	r3, #0
 80416cc:	d005      	beq.n	80416da <HAL_RCC_OscConfig+0x17e>
 80416ce:	687b      	ldr	r3, [r7, #4]
 80416d0:	68db      	ldr	r3, [r3, #12]
 80416d2:	2b00      	cmp	r3, #0
 80416d4:	d101      	bne.n	80416da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80416d6:	2301      	movs	r3, #1
 80416d8:	e392      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80416da:	4b42      	ldr	r3, [pc, #264]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 80416dc:	681b      	ldr	r3, [r3, #0]
 80416de:	f023 0219 	bic.w	r2, r3, #25
 80416e2:	687b      	ldr	r3, [r7, #4]
 80416e4:	68db      	ldr	r3, [r3, #12]
 80416e6:	493f      	ldr	r1, [pc, #252]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 80416e8:	4313      	orrs	r3, r2
 80416ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80416ec:	f7ff fb40 	bl	8040d70 <HAL_GetTick>
 80416f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80416f2:	e008      	b.n	8041706 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80416f4:	f7ff fb3c 	bl	8040d70 <HAL_GetTick>
 80416f8:	4602      	mov	r2, r0
 80416fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80416fc:	1ad3      	subs	r3, r2, r3
 80416fe:	2b02      	cmp	r3, #2
 8041700:	d901      	bls.n	8041706 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8041702:	2303      	movs	r3, #3
 8041704:	e37c      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8041706:	4b37      	ldr	r3, [pc, #220]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 8041708:	681b      	ldr	r3, [r3, #0]
 804170a:	f003 0304 	and.w	r3, r3, #4
 804170e:	2b00      	cmp	r3, #0
 8041710:	d0f0      	beq.n	80416f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041712:	f7ff fb39 	bl	8040d88 <HAL_GetREVID>
 8041716:	4603      	mov	r3, r0
 8041718:	f241 0203 	movw	r2, #4099	@ 0x1003
 804171c:	4293      	cmp	r3, r2
 804171e:	d817      	bhi.n	8041750 <HAL_RCC_OscConfig+0x1f4>
 8041720:	687b      	ldr	r3, [r7, #4]
 8041722:	691b      	ldr	r3, [r3, #16]
 8041724:	2b40      	cmp	r3, #64	@ 0x40
 8041726:	d108      	bne.n	804173a <HAL_RCC_OscConfig+0x1de>
 8041728:	4b2e      	ldr	r3, [pc, #184]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 804172a:	685b      	ldr	r3, [r3, #4]
 804172c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8041730:	4a2c      	ldr	r2, [pc, #176]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 8041732:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8041736:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041738:	e07a      	b.n	8041830 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804173a:	4b2a      	ldr	r3, [pc, #168]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 804173c:	685b      	ldr	r3, [r3, #4]
 804173e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8041742:	687b      	ldr	r3, [r7, #4]
 8041744:	691b      	ldr	r3, [r3, #16]
 8041746:	031b      	lsls	r3, r3, #12
 8041748:	4926      	ldr	r1, [pc, #152]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 804174a:	4313      	orrs	r3, r2
 804174c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 804174e:	e06f      	b.n	8041830 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041750:	4b24      	ldr	r3, [pc, #144]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 8041752:	685b      	ldr	r3, [r3, #4]
 8041754:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8041758:	687b      	ldr	r3, [r7, #4]
 804175a:	691b      	ldr	r3, [r3, #16]
 804175c:	061b      	lsls	r3, r3, #24
 804175e:	4921      	ldr	r1, [pc, #132]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 8041760:	4313      	orrs	r3, r2
 8041762:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041764:	e064      	b.n	8041830 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8041766:	687b      	ldr	r3, [r7, #4]
 8041768:	68db      	ldr	r3, [r3, #12]
 804176a:	2b00      	cmp	r3, #0
 804176c:	d047      	beq.n	80417fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 804176e:	4b1d      	ldr	r3, [pc, #116]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 8041770:	681b      	ldr	r3, [r3, #0]
 8041772:	f023 0219 	bic.w	r2, r3, #25
 8041776:	687b      	ldr	r3, [r7, #4]
 8041778:	68db      	ldr	r3, [r3, #12]
 804177a:	491a      	ldr	r1, [pc, #104]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 804177c:	4313      	orrs	r3, r2
 804177e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041780:	f7ff faf6 	bl	8040d70 <HAL_GetTick>
 8041784:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8041786:	e008      	b.n	804179a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041788:	f7ff faf2 	bl	8040d70 <HAL_GetTick>
 804178c:	4602      	mov	r2, r0
 804178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041790:	1ad3      	subs	r3, r2, r3
 8041792:	2b02      	cmp	r3, #2
 8041794:	d901      	bls.n	804179a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8041796:	2303      	movs	r3, #3
 8041798:	e332      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 804179a:	4b12      	ldr	r3, [pc, #72]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 804179c:	681b      	ldr	r3, [r3, #0]
 804179e:	f003 0304 	and.w	r3, r3, #4
 80417a2:	2b00      	cmp	r3, #0
 80417a4:	d0f0      	beq.n	8041788 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80417a6:	f7ff faef 	bl	8040d88 <HAL_GetREVID>
 80417aa:	4603      	mov	r3, r0
 80417ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80417b0:	4293      	cmp	r3, r2
 80417b2:	d819      	bhi.n	80417e8 <HAL_RCC_OscConfig+0x28c>
 80417b4:	687b      	ldr	r3, [r7, #4]
 80417b6:	691b      	ldr	r3, [r3, #16]
 80417b8:	2b40      	cmp	r3, #64	@ 0x40
 80417ba:	d108      	bne.n	80417ce <HAL_RCC_OscConfig+0x272>
 80417bc:	4b09      	ldr	r3, [pc, #36]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 80417be:	685b      	ldr	r3, [r3, #4]
 80417c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80417c4:	4a07      	ldr	r2, [pc, #28]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 80417c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80417ca:	6053      	str	r3, [r2, #4]
 80417cc:	e030      	b.n	8041830 <HAL_RCC_OscConfig+0x2d4>
 80417ce:	4b05      	ldr	r3, [pc, #20]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 80417d0:	685b      	ldr	r3, [r3, #4]
 80417d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80417d6:	687b      	ldr	r3, [r7, #4]
 80417d8:	691b      	ldr	r3, [r3, #16]
 80417da:	031b      	lsls	r3, r3, #12
 80417dc:	4901      	ldr	r1, [pc, #4]	@ (80417e4 <HAL_RCC_OscConfig+0x288>)
 80417de:	4313      	orrs	r3, r2
 80417e0:	604b      	str	r3, [r1, #4]
 80417e2:	e025      	b.n	8041830 <HAL_RCC_OscConfig+0x2d4>
 80417e4:	58024400 	.word	0x58024400
 80417e8:	4b9a      	ldr	r3, [pc, #616]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 80417ea:	685b      	ldr	r3, [r3, #4]
 80417ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80417f0:	687b      	ldr	r3, [r7, #4]
 80417f2:	691b      	ldr	r3, [r3, #16]
 80417f4:	061b      	lsls	r3, r3, #24
 80417f6:	4997      	ldr	r1, [pc, #604]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 80417f8:	4313      	orrs	r3, r2
 80417fa:	604b      	str	r3, [r1, #4]
 80417fc:	e018      	b.n	8041830 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80417fe:	4b95      	ldr	r3, [pc, #596]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041800:	681b      	ldr	r3, [r3, #0]
 8041802:	4a94      	ldr	r2, [pc, #592]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041804:	f023 0301 	bic.w	r3, r3, #1
 8041808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804180a:	f7ff fab1 	bl	8040d70 <HAL_GetTick>
 804180e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8041810:	e008      	b.n	8041824 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041812:	f7ff faad 	bl	8040d70 <HAL_GetTick>
 8041816:	4602      	mov	r2, r0
 8041818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804181a:	1ad3      	subs	r3, r2, r3
 804181c:	2b02      	cmp	r3, #2
 804181e:	d901      	bls.n	8041824 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8041820:	2303      	movs	r3, #3
 8041822:	e2ed      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8041824:	4b8b      	ldr	r3, [pc, #556]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041826:	681b      	ldr	r3, [r3, #0]
 8041828:	f003 0304 	and.w	r3, r3, #4
 804182c:	2b00      	cmp	r3, #0
 804182e:	d1f0      	bne.n	8041812 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8041830:	687b      	ldr	r3, [r7, #4]
 8041832:	681b      	ldr	r3, [r3, #0]
 8041834:	f003 0310 	and.w	r3, r3, #16
 8041838:	2b00      	cmp	r3, #0
 804183a:	f000 80a9 	beq.w	8041990 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 804183e:	4b85      	ldr	r3, [pc, #532]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041840:	691b      	ldr	r3, [r3, #16]
 8041842:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8041846:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8041848:	4b82      	ldr	r3, [pc, #520]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 804184a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804184c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 804184e:	69bb      	ldr	r3, [r7, #24]
 8041850:	2b08      	cmp	r3, #8
 8041852:	d007      	beq.n	8041864 <HAL_RCC_OscConfig+0x308>
 8041854:	69bb      	ldr	r3, [r7, #24]
 8041856:	2b18      	cmp	r3, #24
 8041858:	d13a      	bne.n	80418d0 <HAL_RCC_OscConfig+0x374>
 804185a:	697b      	ldr	r3, [r7, #20]
 804185c:	f003 0303 	and.w	r3, r3, #3
 8041860:	2b01      	cmp	r3, #1
 8041862:	d135      	bne.n	80418d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8041864:	4b7b      	ldr	r3, [pc, #492]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041866:	681b      	ldr	r3, [r3, #0]
 8041868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804186c:	2b00      	cmp	r3, #0
 804186e:	d005      	beq.n	804187c <HAL_RCC_OscConfig+0x320>
 8041870:	687b      	ldr	r3, [r7, #4]
 8041872:	69db      	ldr	r3, [r3, #28]
 8041874:	2b80      	cmp	r3, #128	@ 0x80
 8041876:	d001      	beq.n	804187c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8041878:	2301      	movs	r3, #1
 804187a:	e2c1      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 804187c:	f7ff fa84 	bl	8040d88 <HAL_GetREVID>
 8041880:	4603      	mov	r3, r0
 8041882:	f241 0203 	movw	r2, #4099	@ 0x1003
 8041886:	4293      	cmp	r3, r2
 8041888:	d817      	bhi.n	80418ba <HAL_RCC_OscConfig+0x35e>
 804188a:	687b      	ldr	r3, [r7, #4]
 804188c:	6a1b      	ldr	r3, [r3, #32]
 804188e:	2b20      	cmp	r3, #32
 8041890:	d108      	bne.n	80418a4 <HAL_RCC_OscConfig+0x348>
 8041892:	4b70      	ldr	r3, [pc, #448]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041894:	685b      	ldr	r3, [r3, #4]
 8041896:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 804189a:	4a6e      	ldr	r2, [pc, #440]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 804189c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80418a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80418a2:	e075      	b.n	8041990 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80418a4:	4b6b      	ldr	r3, [pc, #428]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 80418a6:	685b      	ldr	r3, [r3, #4]
 80418a8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80418ac:	687b      	ldr	r3, [r7, #4]
 80418ae:	6a1b      	ldr	r3, [r3, #32]
 80418b0:	069b      	lsls	r3, r3, #26
 80418b2:	4968      	ldr	r1, [pc, #416]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 80418b4:	4313      	orrs	r3, r2
 80418b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80418b8:	e06a      	b.n	8041990 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80418ba:	4b66      	ldr	r3, [pc, #408]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 80418bc:	68db      	ldr	r3, [r3, #12]
 80418be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80418c2:	687b      	ldr	r3, [r7, #4]
 80418c4:	6a1b      	ldr	r3, [r3, #32]
 80418c6:	061b      	lsls	r3, r3, #24
 80418c8:	4962      	ldr	r1, [pc, #392]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 80418ca:	4313      	orrs	r3, r2
 80418cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80418ce:	e05f      	b.n	8041990 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80418d0:	687b      	ldr	r3, [r7, #4]
 80418d2:	69db      	ldr	r3, [r3, #28]
 80418d4:	2b00      	cmp	r3, #0
 80418d6:	d042      	beq.n	804195e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80418d8:	4b5e      	ldr	r3, [pc, #376]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 80418da:	681b      	ldr	r3, [r3, #0]
 80418dc:	4a5d      	ldr	r2, [pc, #372]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 80418de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80418e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80418e4:	f7ff fa44 	bl	8040d70 <HAL_GetTick>
 80418e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80418ea:	e008      	b.n	80418fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80418ec:	f7ff fa40 	bl	8040d70 <HAL_GetTick>
 80418f0:	4602      	mov	r2, r0
 80418f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80418f4:	1ad3      	subs	r3, r2, r3
 80418f6:	2b02      	cmp	r3, #2
 80418f8:	d901      	bls.n	80418fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80418fa:	2303      	movs	r3, #3
 80418fc:	e280      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80418fe:	4b55      	ldr	r3, [pc, #340]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041900:	681b      	ldr	r3, [r3, #0]
 8041902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8041906:	2b00      	cmp	r3, #0
 8041908:	d0f0      	beq.n	80418ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 804190a:	f7ff fa3d 	bl	8040d88 <HAL_GetREVID>
 804190e:	4603      	mov	r3, r0
 8041910:	f241 0203 	movw	r2, #4099	@ 0x1003
 8041914:	4293      	cmp	r3, r2
 8041916:	d817      	bhi.n	8041948 <HAL_RCC_OscConfig+0x3ec>
 8041918:	687b      	ldr	r3, [r7, #4]
 804191a:	6a1b      	ldr	r3, [r3, #32]
 804191c:	2b20      	cmp	r3, #32
 804191e:	d108      	bne.n	8041932 <HAL_RCC_OscConfig+0x3d6>
 8041920:	4b4c      	ldr	r3, [pc, #304]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041922:	685b      	ldr	r3, [r3, #4]
 8041924:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8041928:	4a4a      	ldr	r2, [pc, #296]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 804192a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 804192e:	6053      	str	r3, [r2, #4]
 8041930:	e02e      	b.n	8041990 <HAL_RCC_OscConfig+0x434>
 8041932:	4b48      	ldr	r3, [pc, #288]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041934:	685b      	ldr	r3, [r3, #4]
 8041936:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 804193a:	687b      	ldr	r3, [r7, #4]
 804193c:	6a1b      	ldr	r3, [r3, #32]
 804193e:	069b      	lsls	r3, r3, #26
 8041940:	4944      	ldr	r1, [pc, #272]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041942:	4313      	orrs	r3, r2
 8041944:	604b      	str	r3, [r1, #4]
 8041946:	e023      	b.n	8041990 <HAL_RCC_OscConfig+0x434>
 8041948:	4b42      	ldr	r3, [pc, #264]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 804194a:	68db      	ldr	r3, [r3, #12]
 804194c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8041950:	687b      	ldr	r3, [r7, #4]
 8041952:	6a1b      	ldr	r3, [r3, #32]
 8041954:	061b      	lsls	r3, r3, #24
 8041956:	493f      	ldr	r1, [pc, #252]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041958:	4313      	orrs	r3, r2
 804195a:	60cb      	str	r3, [r1, #12]
 804195c:	e018      	b.n	8041990 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 804195e:	4b3d      	ldr	r3, [pc, #244]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041960:	681b      	ldr	r3, [r3, #0]
 8041962:	4a3c      	ldr	r2, [pc, #240]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041964:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8041968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804196a:	f7ff fa01 	bl	8040d70 <HAL_GetTick>
 804196e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8041970:	e008      	b.n	8041984 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8041972:	f7ff f9fd 	bl	8040d70 <HAL_GetTick>
 8041976:	4602      	mov	r2, r0
 8041978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804197a:	1ad3      	subs	r3, r2, r3
 804197c:	2b02      	cmp	r3, #2
 804197e:	d901      	bls.n	8041984 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8041980:	2303      	movs	r3, #3
 8041982:	e23d      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8041984:	4b33      	ldr	r3, [pc, #204]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041986:	681b      	ldr	r3, [r3, #0]
 8041988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804198c:	2b00      	cmp	r3, #0
 804198e:	d1f0      	bne.n	8041972 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8041990:	687b      	ldr	r3, [r7, #4]
 8041992:	681b      	ldr	r3, [r3, #0]
 8041994:	f003 0308 	and.w	r3, r3, #8
 8041998:	2b00      	cmp	r3, #0
 804199a:	d036      	beq.n	8041a0a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 804199c:	687b      	ldr	r3, [r7, #4]
 804199e:	695b      	ldr	r3, [r3, #20]
 80419a0:	2b00      	cmp	r3, #0
 80419a2:	d019      	beq.n	80419d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80419a4:	4b2b      	ldr	r3, [pc, #172]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 80419a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80419a8:	4a2a      	ldr	r2, [pc, #168]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 80419aa:	f043 0301 	orr.w	r3, r3, #1
 80419ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80419b0:	f7ff f9de 	bl	8040d70 <HAL_GetTick>
 80419b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80419b6:	e008      	b.n	80419ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80419b8:	f7ff f9da 	bl	8040d70 <HAL_GetTick>
 80419bc:	4602      	mov	r2, r0
 80419be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80419c0:	1ad3      	subs	r3, r2, r3
 80419c2:	2b02      	cmp	r3, #2
 80419c4:	d901      	bls.n	80419ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80419c6:	2303      	movs	r3, #3
 80419c8:	e21a      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80419ca:	4b22      	ldr	r3, [pc, #136]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 80419cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80419ce:	f003 0302 	and.w	r3, r3, #2
 80419d2:	2b00      	cmp	r3, #0
 80419d4:	d0f0      	beq.n	80419b8 <HAL_RCC_OscConfig+0x45c>
 80419d6:	e018      	b.n	8041a0a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80419d8:	4b1e      	ldr	r3, [pc, #120]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 80419da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80419dc:	4a1d      	ldr	r2, [pc, #116]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 80419de:	f023 0301 	bic.w	r3, r3, #1
 80419e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80419e4:	f7ff f9c4 	bl	8040d70 <HAL_GetTick>
 80419e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80419ea:	e008      	b.n	80419fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80419ec:	f7ff f9c0 	bl	8040d70 <HAL_GetTick>
 80419f0:	4602      	mov	r2, r0
 80419f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80419f4:	1ad3      	subs	r3, r2, r3
 80419f6:	2b02      	cmp	r3, #2
 80419f8:	d901      	bls.n	80419fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80419fa:	2303      	movs	r3, #3
 80419fc:	e200      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80419fe:	4b15      	ldr	r3, [pc, #84]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8041a02:	f003 0302 	and.w	r3, r3, #2
 8041a06:	2b00      	cmp	r3, #0
 8041a08:	d1f0      	bne.n	80419ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8041a0a:	687b      	ldr	r3, [r7, #4]
 8041a0c:	681b      	ldr	r3, [r3, #0]
 8041a0e:	f003 0320 	and.w	r3, r3, #32
 8041a12:	2b00      	cmp	r3, #0
 8041a14:	d039      	beq.n	8041a8a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8041a16:	687b      	ldr	r3, [r7, #4]
 8041a18:	699b      	ldr	r3, [r3, #24]
 8041a1a:	2b00      	cmp	r3, #0
 8041a1c:	d01c      	beq.n	8041a58 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8041a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041a20:	681b      	ldr	r3, [r3, #0]
 8041a22:	4a0c      	ldr	r2, [pc, #48]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041a24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8041a28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8041a2a:	f7ff f9a1 	bl	8040d70 <HAL_GetTick>
 8041a2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8041a30:	e008      	b.n	8041a44 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8041a32:	f7ff f99d 	bl	8040d70 <HAL_GetTick>
 8041a36:	4602      	mov	r2, r0
 8041a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041a3a:	1ad3      	subs	r3, r2, r3
 8041a3c:	2b02      	cmp	r3, #2
 8041a3e:	d901      	bls.n	8041a44 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8041a40:	2303      	movs	r3, #3
 8041a42:	e1dd      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8041a44:	4b03      	ldr	r3, [pc, #12]	@ (8041a54 <HAL_RCC_OscConfig+0x4f8>)
 8041a46:	681b      	ldr	r3, [r3, #0]
 8041a48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8041a4c:	2b00      	cmp	r3, #0
 8041a4e:	d0f0      	beq.n	8041a32 <HAL_RCC_OscConfig+0x4d6>
 8041a50:	e01b      	b.n	8041a8a <HAL_RCC_OscConfig+0x52e>
 8041a52:	bf00      	nop
 8041a54:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8041a58:	4b9b      	ldr	r3, [pc, #620]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041a5a:	681b      	ldr	r3, [r3, #0]
 8041a5c:	4a9a      	ldr	r2, [pc, #616]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041a5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8041a62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8041a64:	f7ff f984 	bl	8040d70 <HAL_GetTick>
 8041a68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8041a6a:	e008      	b.n	8041a7e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8041a6c:	f7ff f980 	bl	8040d70 <HAL_GetTick>
 8041a70:	4602      	mov	r2, r0
 8041a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041a74:	1ad3      	subs	r3, r2, r3
 8041a76:	2b02      	cmp	r3, #2
 8041a78:	d901      	bls.n	8041a7e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8041a7a:	2303      	movs	r3, #3
 8041a7c:	e1c0      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8041a7e:	4b92      	ldr	r3, [pc, #584]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041a80:	681b      	ldr	r3, [r3, #0]
 8041a82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8041a86:	2b00      	cmp	r3, #0
 8041a88:	d1f0      	bne.n	8041a6c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041a8a:	687b      	ldr	r3, [r7, #4]
 8041a8c:	681b      	ldr	r3, [r3, #0]
 8041a8e:	f003 0304 	and.w	r3, r3, #4
 8041a92:	2b00      	cmp	r3, #0
 8041a94:	f000 8081 	beq.w	8041b9a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8041a98:	4b8c      	ldr	r3, [pc, #560]	@ (8041ccc <HAL_RCC_OscConfig+0x770>)
 8041a9a:	681b      	ldr	r3, [r3, #0]
 8041a9c:	4a8b      	ldr	r2, [pc, #556]	@ (8041ccc <HAL_RCC_OscConfig+0x770>)
 8041a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8041aa2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8041aa4:	f7ff f964 	bl	8040d70 <HAL_GetTick>
 8041aa8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8041aaa:	e008      	b.n	8041abe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041aac:	f7ff f960 	bl	8040d70 <HAL_GetTick>
 8041ab0:	4602      	mov	r2, r0
 8041ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041ab4:	1ad3      	subs	r3, r2, r3
 8041ab6:	2b64      	cmp	r3, #100	@ 0x64
 8041ab8:	d901      	bls.n	8041abe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8041aba:	2303      	movs	r3, #3
 8041abc:	e1a0      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8041abe:	4b83      	ldr	r3, [pc, #524]	@ (8041ccc <HAL_RCC_OscConfig+0x770>)
 8041ac0:	681b      	ldr	r3, [r3, #0]
 8041ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8041ac6:	2b00      	cmp	r3, #0
 8041ac8:	d0f0      	beq.n	8041aac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8041aca:	687b      	ldr	r3, [r7, #4]
 8041acc:	689b      	ldr	r3, [r3, #8]
 8041ace:	2b01      	cmp	r3, #1
 8041ad0:	d106      	bne.n	8041ae0 <HAL_RCC_OscConfig+0x584>
 8041ad2:	4b7d      	ldr	r3, [pc, #500]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041ad6:	4a7c      	ldr	r2, [pc, #496]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041ad8:	f043 0301 	orr.w	r3, r3, #1
 8041adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8041ade:	e02d      	b.n	8041b3c <HAL_RCC_OscConfig+0x5e0>
 8041ae0:	687b      	ldr	r3, [r7, #4]
 8041ae2:	689b      	ldr	r3, [r3, #8]
 8041ae4:	2b00      	cmp	r3, #0
 8041ae6:	d10c      	bne.n	8041b02 <HAL_RCC_OscConfig+0x5a6>
 8041ae8:	4b77      	ldr	r3, [pc, #476]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041aec:	4a76      	ldr	r2, [pc, #472]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041aee:	f023 0301 	bic.w	r3, r3, #1
 8041af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8041af4:	4b74      	ldr	r3, [pc, #464]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041af8:	4a73      	ldr	r2, [pc, #460]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041afa:	f023 0304 	bic.w	r3, r3, #4
 8041afe:	6713      	str	r3, [r2, #112]	@ 0x70
 8041b00:	e01c      	b.n	8041b3c <HAL_RCC_OscConfig+0x5e0>
 8041b02:	687b      	ldr	r3, [r7, #4]
 8041b04:	689b      	ldr	r3, [r3, #8]
 8041b06:	2b05      	cmp	r3, #5
 8041b08:	d10c      	bne.n	8041b24 <HAL_RCC_OscConfig+0x5c8>
 8041b0a:	4b6f      	ldr	r3, [pc, #444]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041b0e:	4a6e      	ldr	r2, [pc, #440]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041b10:	f043 0304 	orr.w	r3, r3, #4
 8041b14:	6713      	str	r3, [r2, #112]	@ 0x70
 8041b16:	4b6c      	ldr	r3, [pc, #432]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041b1a:	4a6b      	ldr	r2, [pc, #428]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041b1c:	f043 0301 	orr.w	r3, r3, #1
 8041b20:	6713      	str	r3, [r2, #112]	@ 0x70
 8041b22:	e00b      	b.n	8041b3c <HAL_RCC_OscConfig+0x5e0>
 8041b24:	4b68      	ldr	r3, [pc, #416]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041b28:	4a67      	ldr	r2, [pc, #412]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041b2a:	f023 0301 	bic.w	r3, r3, #1
 8041b2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8041b30:	4b65      	ldr	r3, [pc, #404]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041b34:	4a64      	ldr	r2, [pc, #400]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041b36:	f023 0304 	bic.w	r3, r3, #4
 8041b3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8041b3c:	687b      	ldr	r3, [r7, #4]
 8041b3e:	689b      	ldr	r3, [r3, #8]
 8041b40:	2b00      	cmp	r3, #0
 8041b42:	d015      	beq.n	8041b70 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041b44:	f7ff f914 	bl	8040d70 <HAL_GetTick>
 8041b48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8041b4a:	e00a      	b.n	8041b62 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041b4c:	f7ff f910 	bl	8040d70 <HAL_GetTick>
 8041b50:	4602      	mov	r2, r0
 8041b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041b54:	1ad3      	subs	r3, r2, r3
 8041b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8041b5a:	4293      	cmp	r3, r2
 8041b5c:	d901      	bls.n	8041b62 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8041b5e:	2303      	movs	r3, #3
 8041b60:	e14e      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8041b62:	4b59      	ldr	r3, [pc, #356]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041b66:	f003 0302 	and.w	r3, r3, #2
 8041b6a:	2b00      	cmp	r3, #0
 8041b6c:	d0ee      	beq.n	8041b4c <HAL_RCC_OscConfig+0x5f0>
 8041b6e:	e014      	b.n	8041b9a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041b70:	f7ff f8fe 	bl	8040d70 <HAL_GetTick>
 8041b74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8041b76:	e00a      	b.n	8041b8e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041b78:	f7ff f8fa 	bl	8040d70 <HAL_GetTick>
 8041b7c:	4602      	mov	r2, r0
 8041b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041b80:	1ad3      	subs	r3, r2, r3
 8041b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8041b86:	4293      	cmp	r3, r2
 8041b88:	d901      	bls.n	8041b8e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8041b8a:	2303      	movs	r3, #3
 8041b8c:	e138      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8041b8e:	4b4e      	ldr	r3, [pc, #312]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041b92:	f003 0302 	and.w	r3, r3, #2
 8041b96:	2b00      	cmp	r3, #0
 8041b98:	d1ee      	bne.n	8041b78 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8041b9a:	687b      	ldr	r3, [r7, #4]
 8041b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041b9e:	2b00      	cmp	r3, #0
 8041ba0:	f000 812d 	beq.w	8041dfe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8041ba4:	4b48      	ldr	r3, [pc, #288]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041ba6:	691b      	ldr	r3, [r3, #16]
 8041ba8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8041bac:	2b18      	cmp	r3, #24
 8041bae:	f000 80bd 	beq.w	8041d2c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8041bb2:	687b      	ldr	r3, [r7, #4]
 8041bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041bb6:	2b02      	cmp	r3, #2
 8041bb8:	f040 809e 	bne.w	8041cf8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041bbc:	4b42      	ldr	r3, [pc, #264]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041bbe:	681b      	ldr	r3, [r3, #0]
 8041bc0:	4a41      	ldr	r2, [pc, #260]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041bc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8041bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041bc8:	f7ff f8d2 	bl	8040d70 <HAL_GetTick>
 8041bcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8041bce:	e008      	b.n	8041be2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041bd0:	f7ff f8ce 	bl	8040d70 <HAL_GetTick>
 8041bd4:	4602      	mov	r2, r0
 8041bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041bd8:	1ad3      	subs	r3, r2, r3
 8041bda:	2b02      	cmp	r3, #2
 8041bdc:	d901      	bls.n	8041be2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8041bde:	2303      	movs	r3, #3
 8041be0:	e10e      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8041be2:	4b39      	ldr	r3, [pc, #228]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041be4:	681b      	ldr	r3, [r3, #0]
 8041be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8041bea:	2b00      	cmp	r3, #0
 8041bec:	d1f0      	bne.n	8041bd0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8041bee:	4b36      	ldr	r3, [pc, #216]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041bf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8041bf2:	4b37      	ldr	r3, [pc, #220]	@ (8041cd0 <HAL_RCC_OscConfig+0x774>)
 8041bf4:	4013      	ands	r3, r2
 8041bf6:	687a      	ldr	r2, [r7, #4]
 8041bf8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8041bfa:	687a      	ldr	r2, [r7, #4]
 8041bfc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8041bfe:	0112      	lsls	r2, r2, #4
 8041c00:	430a      	orrs	r2, r1
 8041c02:	4931      	ldr	r1, [pc, #196]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041c04:	4313      	orrs	r3, r2
 8041c06:	628b      	str	r3, [r1, #40]	@ 0x28
 8041c08:	687b      	ldr	r3, [r7, #4]
 8041c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041c0c:	3b01      	subs	r3, #1
 8041c0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8041c12:	687b      	ldr	r3, [r7, #4]
 8041c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8041c16:	3b01      	subs	r3, #1
 8041c18:	025b      	lsls	r3, r3, #9
 8041c1a:	b29b      	uxth	r3, r3
 8041c1c:	431a      	orrs	r2, r3
 8041c1e:	687b      	ldr	r3, [r7, #4]
 8041c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8041c22:	3b01      	subs	r3, #1
 8041c24:	041b      	lsls	r3, r3, #16
 8041c26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8041c2a:	431a      	orrs	r2, r3
 8041c2c:	687b      	ldr	r3, [r7, #4]
 8041c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8041c30:	3b01      	subs	r3, #1
 8041c32:	061b      	lsls	r3, r3, #24
 8041c34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8041c38:	4923      	ldr	r1, [pc, #140]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041c3a:	4313      	orrs	r3, r2
 8041c3c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8041c3e:	4b22      	ldr	r3, [pc, #136]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8041c42:	4a21      	ldr	r2, [pc, #132]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041c44:	f023 0301 	bic.w	r3, r3, #1
 8041c48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8041c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041c4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8041c4e:	4b21      	ldr	r3, [pc, #132]	@ (8041cd4 <HAL_RCC_OscConfig+0x778>)
 8041c50:	4013      	ands	r3, r2
 8041c52:	687a      	ldr	r2, [r7, #4]
 8041c54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8041c56:	00d2      	lsls	r2, r2, #3
 8041c58:	491b      	ldr	r1, [pc, #108]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041c5a:	4313      	orrs	r3, r2
 8041c5c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8041c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8041c62:	f023 020c 	bic.w	r2, r3, #12
 8041c66:	687b      	ldr	r3, [r7, #4]
 8041c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041c6a:	4917      	ldr	r1, [pc, #92]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041c6c:	4313      	orrs	r3, r2
 8041c6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8041c70:	4b15      	ldr	r3, [pc, #84]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8041c74:	f023 0202 	bic.w	r2, r3, #2
 8041c78:	687b      	ldr	r3, [r7, #4]
 8041c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8041c7c:	4912      	ldr	r1, [pc, #72]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041c7e:	4313      	orrs	r3, r2
 8041c80:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8041c82:	4b11      	ldr	r3, [pc, #68]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8041c86:	4a10      	ldr	r2, [pc, #64]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8041c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8041c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8041c92:	4a0d      	ldr	r2, [pc, #52]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8041c98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8041c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8041c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8041ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8041ca6:	4b08      	ldr	r3, [pc, #32]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8041caa:	4a07      	ldr	r2, [pc, #28]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041cac:	f043 0301 	orr.w	r3, r3, #1
 8041cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041cb2:	4b05      	ldr	r3, [pc, #20]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041cb4:	681b      	ldr	r3, [r3, #0]
 8041cb6:	4a04      	ldr	r2, [pc, #16]	@ (8041cc8 <HAL_RCC_OscConfig+0x76c>)
 8041cb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8041cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041cbe:	f7ff f857 	bl	8040d70 <HAL_GetTick>
 8041cc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8041cc4:	e011      	b.n	8041cea <HAL_RCC_OscConfig+0x78e>
 8041cc6:	bf00      	nop
 8041cc8:	58024400 	.word	0x58024400
 8041ccc:	58024800 	.word	0x58024800
 8041cd0:	fffffc0c 	.word	0xfffffc0c
 8041cd4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041cd8:	f7ff f84a 	bl	8040d70 <HAL_GetTick>
 8041cdc:	4602      	mov	r2, r0
 8041cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041ce0:	1ad3      	subs	r3, r2, r3
 8041ce2:	2b02      	cmp	r3, #2
 8041ce4:	d901      	bls.n	8041cea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8041ce6:	2303      	movs	r3, #3
 8041ce8:	e08a      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8041cea:	4b47      	ldr	r3, [pc, #284]	@ (8041e08 <HAL_RCC_OscConfig+0x8ac>)
 8041cec:	681b      	ldr	r3, [r3, #0]
 8041cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8041cf2:	2b00      	cmp	r3, #0
 8041cf4:	d0f0      	beq.n	8041cd8 <HAL_RCC_OscConfig+0x77c>
 8041cf6:	e082      	b.n	8041dfe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041cf8:	4b43      	ldr	r3, [pc, #268]	@ (8041e08 <HAL_RCC_OscConfig+0x8ac>)
 8041cfa:	681b      	ldr	r3, [r3, #0]
 8041cfc:	4a42      	ldr	r2, [pc, #264]	@ (8041e08 <HAL_RCC_OscConfig+0x8ac>)
 8041cfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8041d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041d04:	f7ff f834 	bl	8040d70 <HAL_GetTick>
 8041d08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8041d0a:	e008      	b.n	8041d1e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041d0c:	f7ff f830 	bl	8040d70 <HAL_GetTick>
 8041d10:	4602      	mov	r2, r0
 8041d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041d14:	1ad3      	subs	r3, r2, r3
 8041d16:	2b02      	cmp	r3, #2
 8041d18:	d901      	bls.n	8041d1e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8041d1a:	2303      	movs	r3, #3
 8041d1c:	e070      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8041d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8041e08 <HAL_RCC_OscConfig+0x8ac>)
 8041d20:	681b      	ldr	r3, [r3, #0]
 8041d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8041d26:	2b00      	cmp	r3, #0
 8041d28:	d1f0      	bne.n	8041d0c <HAL_RCC_OscConfig+0x7b0>
 8041d2a:	e068      	b.n	8041dfe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8041d2c:	4b36      	ldr	r3, [pc, #216]	@ (8041e08 <HAL_RCC_OscConfig+0x8ac>)
 8041d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8041d30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8041d32:	4b35      	ldr	r3, [pc, #212]	@ (8041e08 <HAL_RCC_OscConfig+0x8ac>)
 8041d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041d36:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041d38:	687b      	ldr	r3, [r7, #4]
 8041d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041d3c:	2b01      	cmp	r3, #1
 8041d3e:	d031      	beq.n	8041da4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041d40:	693b      	ldr	r3, [r7, #16]
 8041d42:	f003 0203 	and.w	r2, r3, #3
 8041d46:	687b      	ldr	r3, [r7, #4]
 8041d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041d4a:	429a      	cmp	r2, r3
 8041d4c:	d12a      	bne.n	8041da4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8041d4e:	693b      	ldr	r3, [r7, #16]
 8041d50:	091b      	lsrs	r3, r3, #4
 8041d52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8041d56:	687b      	ldr	r3, [r7, #4]
 8041d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041d5a:	429a      	cmp	r2, r3
 8041d5c:	d122      	bne.n	8041da4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8041d5e:	68fb      	ldr	r3, [r7, #12]
 8041d60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8041d64:	687b      	ldr	r3, [r7, #4]
 8041d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041d68:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8041d6a:	429a      	cmp	r2, r3
 8041d6c:	d11a      	bne.n	8041da4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8041d6e:	68fb      	ldr	r3, [r7, #12]
 8041d70:	0a5b      	lsrs	r3, r3, #9
 8041d72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8041d76:	687b      	ldr	r3, [r7, #4]
 8041d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8041d7a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8041d7c:	429a      	cmp	r2, r3
 8041d7e:	d111      	bne.n	8041da4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8041d80:	68fb      	ldr	r3, [r7, #12]
 8041d82:	0c1b      	lsrs	r3, r3, #16
 8041d84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8041d88:	687b      	ldr	r3, [r7, #4]
 8041d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8041d8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8041d8e:	429a      	cmp	r2, r3
 8041d90:	d108      	bne.n	8041da4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8041d92:	68fb      	ldr	r3, [r7, #12]
 8041d94:	0e1b      	lsrs	r3, r3, #24
 8041d96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8041d9a:	687b      	ldr	r3, [r7, #4]
 8041d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8041d9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8041da0:	429a      	cmp	r2, r3
 8041da2:	d001      	beq.n	8041da8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8041da4:	2301      	movs	r3, #1
 8041da6:	e02b      	b.n	8041e00 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8041da8:	4b17      	ldr	r3, [pc, #92]	@ (8041e08 <HAL_RCC_OscConfig+0x8ac>)
 8041daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8041dac:	08db      	lsrs	r3, r3, #3
 8041dae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8041db2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8041db4:	687b      	ldr	r3, [r7, #4]
 8041db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8041db8:	693a      	ldr	r2, [r7, #16]
 8041dba:	429a      	cmp	r2, r3
 8041dbc:	d01f      	beq.n	8041dfe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8041dbe:	4b12      	ldr	r3, [pc, #72]	@ (8041e08 <HAL_RCC_OscConfig+0x8ac>)
 8041dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8041dc2:	4a11      	ldr	r2, [pc, #68]	@ (8041e08 <HAL_RCC_OscConfig+0x8ac>)
 8041dc4:	f023 0301 	bic.w	r3, r3, #1
 8041dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8041dca:	f7fe ffd1 	bl	8040d70 <HAL_GetTick>
 8041dce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8041dd0:	bf00      	nop
 8041dd2:	f7fe ffcd 	bl	8040d70 <HAL_GetTick>
 8041dd6:	4602      	mov	r2, r0
 8041dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041dda:	4293      	cmp	r3, r2
 8041ddc:	d0f9      	beq.n	8041dd2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8041dde:	4b0a      	ldr	r3, [pc, #40]	@ (8041e08 <HAL_RCC_OscConfig+0x8ac>)
 8041de0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8041de2:	4b0a      	ldr	r3, [pc, #40]	@ (8041e0c <HAL_RCC_OscConfig+0x8b0>)
 8041de4:	4013      	ands	r3, r2
 8041de6:	687a      	ldr	r2, [r7, #4]
 8041de8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8041dea:	00d2      	lsls	r2, r2, #3
 8041dec:	4906      	ldr	r1, [pc, #24]	@ (8041e08 <HAL_RCC_OscConfig+0x8ac>)
 8041dee:	4313      	orrs	r3, r2
 8041df0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8041df2:	4b05      	ldr	r3, [pc, #20]	@ (8041e08 <HAL_RCC_OscConfig+0x8ac>)
 8041df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8041df6:	4a04      	ldr	r2, [pc, #16]	@ (8041e08 <HAL_RCC_OscConfig+0x8ac>)
 8041df8:	f043 0301 	orr.w	r3, r3, #1
 8041dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8041dfe:	2300      	movs	r3, #0
}
 8041e00:	4618      	mov	r0, r3
 8041e02:	3730      	adds	r7, #48	@ 0x30
 8041e04:	46bd      	mov	sp, r7
 8041e06:	bd80      	pop	{r7, pc}
 8041e08:	58024400 	.word	0x58024400
 8041e0c:	ffff0007 	.word	0xffff0007

08041e10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8041e10:	b580      	push	{r7, lr}
 8041e12:	b086      	sub	sp, #24
 8041e14:	af00      	add	r7, sp, #0
 8041e16:	6078      	str	r0, [r7, #4]
 8041e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8041e1a:	687b      	ldr	r3, [r7, #4]
 8041e1c:	2b00      	cmp	r3, #0
 8041e1e:	d101      	bne.n	8041e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8041e20:	2301      	movs	r3, #1
 8041e22:	e19c      	b.n	804215e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8041e24:	4b8a      	ldr	r3, [pc, #552]	@ (8042050 <HAL_RCC_ClockConfig+0x240>)
 8041e26:	681b      	ldr	r3, [r3, #0]
 8041e28:	f003 030f 	and.w	r3, r3, #15
 8041e2c:	683a      	ldr	r2, [r7, #0]
 8041e2e:	429a      	cmp	r2, r3
 8041e30:	d910      	bls.n	8041e54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041e32:	4b87      	ldr	r3, [pc, #540]	@ (8042050 <HAL_RCC_ClockConfig+0x240>)
 8041e34:	681b      	ldr	r3, [r3, #0]
 8041e36:	f023 020f 	bic.w	r2, r3, #15
 8041e3a:	4985      	ldr	r1, [pc, #532]	@ (8042050 <HAL_RCC_ClockConfig+0x240>)
 8041e3c:	683b      	ldr	r3, [r7, #0]
 8041e3e:	4313      	orrs	r3, r2
 8041e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041e42:	4b83      	ldr	r3, [pc, #524]	@ (8042050 <HAL_RCC_ClockConfig+0x240>)
 8041e44:	681b      	ldr	r3, [r3, #0]
 8041e46:	f003 030f 	and.w	r3, r3, #15
 8041e4a:	683a      	ldr	r2, [r7, #0]
 8041e4c:	429a      	cmp	r2, r3
 8041e4e:	d001      	beq.n	8041e54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8041e50:	2301      	movs	r3, #1
 8041e52:	e184      	b.n	804215e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8041e54:	687b      	ldr	r3, [r7, #4]
 8041e56:	681b      	ldr	r3, [r3, #0]
 8041e58:	f003 0304 	and.w	r3, r3, #4
 8041e5c:	2b00      	cmp	r3, #0
 8041e5e:	d010      	beq.n	8041e82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8041e60:	687b      	ldr	r3, [r7, #4]
 8041e62:	691a      	ldr	r2, [r3, #16]
 8041e64:	4b7b      	ldr	r3, [pc, #492]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041e66:	699b      	ldr	r3, [r3, #24]
 8041e68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8041e6c:	429a      	cmp	r2, r3
 8041e6e:	d908      	bls.n	8041e82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8041e70:	4b78      	ldr	r3, [pc, #480]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041e72:	699b      	ldr	r3, [r3, #24]
 8041e74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8041e78:	687b      	ldr	r3, [r7, #4]
 8041e7a:	691b      	ldr	r3, [r3, #16]
 8041e7c:	4975      	ldr	r1, [pc, #468]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041e7e:	4313      	orrs	r3, r2
 8041e80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041e82:	687b      	ldr	r3, [r7, #4]
 8041e84:	681b      	ldr	r3, [r3, #0]
 8041e86:	f003 0308 	and.w	r3, r3, #8
 8041e8a:	2b00      	cmp	r3, #0
 8041e8c:	d010      	beq.n	8041eb0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8041e8e:	687b      	ldr	r3, [r7, #4]
 8041e90:	695a      	ldr	r2, [r3, #20]
 8041e92:	4b70      	ldr	r3, [pc, #448]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041e94:	69db      	ldr	r3, [r3, #28]
 8041e96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8041e9a:	429a      	cmp	r2, r3
 8041e9c:	d908      	bls.n	8041eb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8041e9e:	4b6d      	ldr	r3, [pc, #436]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041ea0:	69db      	ldr	r3, [r3, #28]
 8041ea2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8041ea6:	687b      	ldr	r3, [r7, #4]
 8041ea8:	695b      	ldr	r3, [r3, #20]
 8041eaa:	496a      	ldr	r1, [pc, #424]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041eac:	4313      	orrs	r3, r2
 8041eae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041eb0:	687b      	ldr	r3, [r7, #4]
 8041eb2:	681b      	ldr	r3, [r3, #0]
 8041eb4:	f003 0310 	and.w	r3, r3, #16
 8041eb8:	2b00      	cmp	r3, #0
 8041eba:	d010      	beq.n	8041ede <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8041ebc:	687b      	ldr	r3, [r7, #4]
 8041ebe:	699a      	ldr	r2, [r3, #24]
 8041ec0:	4b64      	ldr	r3, [pc, #400]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041ec2:	69db      	ldr	r3, [r3, #28]
 8041ec4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8041ec8:	429a      	cmp	r2, r3
 8041eca:	d908      	bls.n	8041ede <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8041ecc:	4b61      	ldr	r3, [pc, #388]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041ece:	69db      	ldr	r3, [r3, #28]
 8041ed0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8041ed4:	687b      	ldr	r3, [r7, #4]
 8041ed6:	699b      	ldr	r3, [r3, #24]
 8041ed8:	495e      	ldr	r1, [pc, #376]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041eda:	4313      	orrs	r3, r2
 8041edc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8041ede:	687b      	ldr	r3, [r7, #4]
 8041ee0:	681b      	ldr	r3, [r3, #0]
 8041ee2:	f003 0320 	and.w	r3, r3, #32
 8041ee6:	2b00      	cmp	r3, #0
 8041ee8:	d010      	beq.n	8041f0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8041eea:	687b      	ldr	r3, [r7, #4]
 8041eec:	69da      	ldr	r2, [r3, #28]
 8041eee:	4b59      	ldr	r3, [pc, #356]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041ef0:	6a1b      	ldr	r3, [r3, #32]
 8041ef2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8041ef6:	429a      	cmp	r2, r3
 8041ef8:	d908      	bls.n	8041f0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8041efa:	4b56      	ldr	r3, [pc, #344]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041efc:	6a1b      	ldr	r3, [r3, #32]
 8041efe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8041f02:	687b      	ldr	r3, [r7, #4]
 8041f04:	69db      	ldr	r3, [r3, #28]
 8041f06:	4953      	ldr	r1, [pc, #332]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041f08:	4313      	orrs	r3, r2
 8041f0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041f0c:	687b      	ldr	r3, [r7, #4]
 8041f0e:	681b      	ldr	r3, [r3, #0]
 8041f10:	f003 0302 	and.w	r3, r3, #2
 8041f14:	2b00      	cmp	r3, #0
 8041f16:	d010      	beq.n	8041f3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8041f18:	687b      	ldr	r3, [r7, #4]
 8041f1a:	68da      	ldr	r2, [r3, #12]
 8041f1c:	4b4d      	ldr	r3, [pc, #308]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041f1e:	699b      	ldr	r3, [r3, #24]
 8041f20:	f003 030f 	and.w	r3, r3, #15
 8041f24:	429a      	cmp	r2, r3
 8041f26:	d908      	bls.n	8041f3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041f28:	4b4a      	ldr	r3, [pc, #296]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041f2a:	699b      	ldr	r3, [r3, #24]
 8041f2c:	f023 020f 	bic.w	r2, r3, #15
 8041f30:	687b      	ldr	r3, [r7, #4]
 8041f32:	68db      	ldr	r3, [r3, #12]
 8041f34:	4947      	ldr	r1, [pc, #284]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041f36:	4313      	orrs	r3, r2
 8041f38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8041f3a:	687b      	ldr	r3, [r7, #4]
 8041f3c:	681b      	ldr	r3, [r3, #0]
 8041f3e:	f003 0301 	and.w	r3, r3, #1
 8041f42:	2b00      	cmp	r3, #0
 8041f44:	d055      	beq.n	8041ff2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8041f46:	4b43      	ldr	r3, [pc, #268]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041f48:	699b      	ldr	r3, [r3, #24]
 8041f4a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8041f4e:	687b      	ldr	r3, [r7, #4]
 8041f50:	689b      	ldr	r3, [r3, #8]
 8041f52:	4940      	ldr	r1, [pc, #256]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041f54:	4313      	orrs	r3, r2
 8041f56:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8041f58:	687b      	ldr	r3, [r7, #4]
 8041f5a:	685b      	ldr	r3, [r3, #4]
 8041f5c:	2b02      	cmp	r3, #2
 8041f5e:	d107      	bne.n	8041f70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8041f60:	4b3c      	ldr	r3, [pc, #240]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041f62:	681b      	ldr	r3, [r3, #0]
 8041f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041f68:	2b00      	cmp	r3, #0
 8041f6a:	d121      	bne.n	8041fb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8041f6c:	2301      	movs	r3, #1
 8041f6e:	e0f6      	b.n	804215e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8041f70:	687b      	ldr	r3, [r7, #4]
 8041f72:	685b      	ldr	r3, [r3, #4]
 8041f74:	2b03      	cmp	r3, #3
 8041f76:	d107      	bne.n	8041f88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8041f78:	4b36      	ldr	r3, [pc, #216]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041f7a:	681b      	ldr	r3, [r3, #0]
 8041f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8041f80:	2b00      	cmp	r3, #0
 8041f82:	d115      	bne.n	8041fb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8041f84:	2301      	movs	r3, #1
 8041f86:	e0ea      	b.n	804215e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8041f88:	687b      	ldr	r3, [r7, #4]
 8041f8a:	685b      	ldr	r3, [r3, #4]
 8041f8c:	2b01      	cmp	r3, #1
 8041f8e:	d107      	bne.n	8041fa0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8041f90:	4b30      	ldr	r3, [pc, #192]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041f92:	681b      	ldr	r3, [r3, #0]
 8041f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8041f98:	2b00      	cmp	r3, #0
 8041f9a:	d109      	bne.n	8041fb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8041f9c:	2301      	movs	r3, #1
 8041f9e:	e0de      	b.n	804215e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8041fa0:	4b2c      	ldr	r3, [pc, #176]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041fa2:	681b      	ldr	r3, [r3, #0]
 8041fa4:	f003 0304 	and.w	r3, r3, #4
 8041fa8:	2b00      	cmp	r3, #0
 8041faa:	d101      	bne.n	8041fb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8041fac:	2301      	movs	r3, #1
 8041fae:	e0d6      	b.n	804215e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8041fb0:	4b28      	ldr	r3, [pc, #160]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041fb2:	691b      	ldr	r3, [r3, #16]
 8041fb4:	f023 0207 	bic.w	r2, r3, #7
 8041fb8:	687b      	ldr	r3, [r7, #4]
 8041fba:	685b      	ldr	r3, [r3, #4]
 8041fbc:	4925      	ldr	r1, [pc, #148]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041fbe:	4313      	orrs	r3, r2
 8041fc0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041fc2:	f7fe fed5 	bl	8040d70 <HAL_GetTick>
 8041fc6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041fc8:	e00a      	b.n	8041fe0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8041fca:	f7fe fed1 	bl	8040d70 <HAL_GetTick>
 8041fce:	4602      	mov	r2, r0
 8041fd0:	697b      	ldr	r3, [r7, #20]
 8041fd2:	1ad3      	subs	r3, r2, r3
 8041fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8041fd8:	4293      	cmp	r3, r2
 8041fda:	d901      	bls.n	8041fe0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8041fdc:	2303      	movs	r3, #3
 8041fde:	e0be      	b.n	804215e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8041fe2:	691b      	ldr	r3, [r3, #16]
 8041fe4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8041fe8:	687b      	ldr	r3, [r7, #4]
 8041fea:	685b      	ldr	r3, [r3, #4]
 8041fec:	00db      	lsls	r3, r3, #3
 8041fee:	429a      	cmp	r2, r3
 8041ff0:	d1eb      	bne.n	8041fca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041ff2:	687b      	ldr	r3, [r7, #4]
 8041ff4:	681b      	ldr	r3, [r3, #0]
 8041ff6:	f003 0302 	and.w	r3, r3, #2
 8041ffa:	2b00      	cmp	r3, #0
 8041ffc:	d010      	beq.n	8042020 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8041ffe:	687b      	ldr	r3, [r7, #4]
 8042000:	68da      	ldr	r2, [r3, #12]
 8042002:	4b14      	ldr	r3, [pc, #80]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8042004:	699b      	ldr	r3, [r3, #24]
 8042006:	f003 030f 	and.w	r3, r3, #15
 804200a:	429a      	cmp	r2, r3
 804200c:	d208      	bcs.n	8042020 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804200e:	4b11      	ldr	r3, [pc, #68]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 8042010:	699b      	ldr	r3, [r3, #24]
 8042012:	f023 020f 	bic.w	r2, r3, #15
 8042016:	687b      	ldr	r3, [r7, #4]
 8042018:	68db      	ldr	r3, [r3, #12]
 804201a:	490e      	ldr	r1, [pc, #56]	@ (8042054 <HAL_RCC_ClockConfig+0x244>)
 804201c:	4313      	orrs	r3, r2
 804201e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8042020:	4b0b      	ldr	r3, [pc, #44]	@ (8042050 <HAL_RCC_ClockConfig+0x240>)
 8042022:	681b      	ldr	r3, [r3, #0]
 8042024:	f003 030f 	and.w	r3, r3, #15
 8042028:	683a      	ldr	r2, [r7, #0]
 804202a:	429a      	cmp	r2, r3
 804202c:	d214      	bcs.n	8042058 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 804202e:	4b08      	ldr	r3, [pc, #32]	@ (8042050 <HAL_RCC_ClockConfig+0x240>)
 8042030:	681b      	ldr	r3, [r3, #0]
 8042032:	f023 020f 	bic.w	r2, r3, #15
 8042036:	4906      	ldr	r1, [pc, #24]	@ (8042050 <HAL_RCC_ClockConfig+0x240>)
 8042038:	683b      	ldr	r3, [r7, #0]
 804203a:	4313      	orrs	r3, r2
 804203c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 804203e:	4b04      	ldr	r3, [pc, #16]	@ (8042050 <HAL_RCC_ClockConfig+0x240>)
 8042040:	681b      	ldr	r3, [r3, #0]
 8042042:	f003 030f 	and.w	r3, r3, #15
 8042046:	683a      	ldr	r2, [r7, #0]
 8042048:	429a      	cmp	r2, r3
 804204a:	d005      	beq.n	8042058 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 804204c:	2301      	movs	r3, #1
 804204e:	e086      	b.n	804215e <HAL_RCC_ClockConfig+0x34e>
 8042050:	52002000 	.word	0x52002000
 8042054:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8042058:	687b      	ldr	r3, [r7, #4]
 804205a:	681b      	ldr	r3, [r3, #0]
 804205c:	f003 0304 	and.w	r3, r3, #4
 8042060:	2b00      	cmp	r3, #0
 8042062:	d010      	beq.n	8042086 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8042064:	687b      	ldr	r3, [r7, #4]
 8042066:	691a      	ldr	r2, [r3, #16]
 8042068:	4b3f      	ldr	r3, [pc, #252]	@ (8042168 <HAL_RCC_ClockConfig+0x358>)
 804206a:	699b      	ldr	r3, [r3, #24]
 804206c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8042070:	429a      	cmp	r2, r3
 8042072:	d208      	bcs.n	8042086 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8042074:	4b3c      	ldr	r3, [pc, #240]	@ (8042168 <HAL_RCC_ClockConfig+0x358>)
 8042076:	699b      	ldr	r3, [r3, #24]
 8042078:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 804207c:	687b      	ldr	r3, [r7, #4]
 804207e:	691b      	ldr	r3, [r3, #16]
 8042080:	4939      	ldr	r1, [pc, #228]	@ (8042168 <HAL_RCC_ClockConfig+0x358>)
 8042082:	4313      	orrs	r3, r2
 8042084:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8042086:	687b      	ldr	r3, [r7, #4]
 8042088:	681b      	ldr	r3, [r3, #0]
 804208a:	f003 0308 	and.w	r3, r3, #8
 804208e:	2b00      	cmp	r3, #0
 8042090:	d010      	beq.n	80420b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8042092:	687b      	ldr	r3, [r7, #4]
 8042094:	695a      	ldr	r2, [r3, #20]
 8042096:	4b34      	ldr	r3, [pc, #208]	@ (8042168 <HAL_RCC_ClockConfig+0x358>)
 8042098:	69db      	ldr	r3, [r3, #28]
 804209a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 804209e:	429a      	cmp	r2, r3
 80420a0:	d208      	bcs.n	80420b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80420a2:	4b31      	ldr	r3, [pc, #196]	@ (8042168 <HAL_RCC_ClockConfig+0x358>)
 80420a4:	69db      	ldr	r3, [r3, #28]
 80420a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80420aa:	687b      	ldr	r3, [r7, #4]
 80420ac:	695b      	ldr	r3, [r3, #20]
 80420ae:	492e      	ldr	r1, [pc, #184]	@ (8042168 <HAL_RCC_ClockConfig+0x358>)
 80420b0:	4313      	orrs	r3, r2
 80420b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80420b4:	687b      	ldr	r3, [r7, #4]
 80420b6:	681b      	ldr	r3, [r3, #0]
 80420b8:	f003 0310 	and.w	r3, r3, #16
 80420bc:	2b00      	cmp	r3, #0
 80420be:	d010      	beq.n	80420e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80420c0:	687b      	ldr	r3, [r7, #4]
 80420c2:	699a      	ldr	r2, [r3, #24]
 80420c4:	4b28      	ldr	r3, [pc, #160]	@ (8042168 <HAL_RCC_ClockConfig+0x358>)
 80420c6:	69db      	ldr	r3, [r3, #28]
 80420c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80420cc:	429a      	cmp	r2, r3
 80420ce:	d208      	bcs.n	80420e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80420d0:	4b25      	ldr	r3, [pc, #148]	@ (8042168 <HAL_RCC_ClockConfig+0x358>)
 80420d2:	69db      	ldr	r3, [r3, #28]
 80420d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80420d8:	687b      	ldr	r3, [r7, #4]
 80420da:	699b      	ldr	r3, [r3, #24]
 80420dc:	4922      	ldr	r1, [pc, #136]	@ (8042168 <HAL_RCC_ClockConfig+0x358>)
 80420de:	4313      	orrs	r3, r2
 80420e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80420e2:	687b      	ldr	r3, [r7, #4]
 80420e4:	681b      	ldr	r3, [r3, #0]
 80420e6:	f003 0320 	and.w	r3, r3, #32
 80420ea:	2b00      	cmp	r3, #0
 80420ec:	d010      	beq.n	8042110 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80420ee:	687b      	ldr	r3, [r7, #4]
 80420f0:	69da      	ldr	r2, [r3, #28]
 80420f2:	4b1d      	ldr	r3, [pc, #116]	@ (8042168 <HAL_RCC_ClockConfig+0x358>)
 80420f4:	6a1b      	ldr	r3, [r3, #32]
 80420f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80420fa:	429a      	cmp	r2, r3
 80420fc:	d208      	bcs.n	8042110 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80420fe:	4b1a      	ldr	r3, [pc, #104]	@ (8042168 <HAL_RCC_ClockConfig+0x358>)
 8042100:	6a1b      	ldr	r3, [r3, #32]
 8042102:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8042106:	687b      	ldr	r3, [r7, #4]
 8042108:	69db      	ldr	r3, [r3, #28]
 804210a:	4917      	ldr	r1, [pc, #92]	@ (8042168 <HAL_RCC_ClockConfig+0x358>)
 804210c:	4313      	orrs	r3, r2
 804210e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8042110:	f000 f834 	bl	804217c <HAL_RCC_GetSysClockFreq>
 8042114:	4602      	mov	r2, r0
 8042116:	4b14      	ldr	r3, [pc, #80]	@ (8042168 <HAL_RCC_ClockConfig+0x358>)
 8042118:	699b      	ldr	r3, [r3, #24]
 804211a:	0a1b      	lsrs	r3, r3, #8
 804211c:	f003 030f 	and.w	r3, r3, #15
 8042120:	4912      	ldr	r1, [pc, #72]	@ (804216c <HAL_RCC_ClockConfig+0x35c>)
 8042122:	5ccb      	ldrb	r3, [r1, r3]
 8042124:	f003 031f 	and.w	r3, r3, #31
 8042128:	fa22 f303 	lsr.w	r3, r2, r3
 804212c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 804212e:	4b0e      	ldr	r3, [pc, #56]	@ (8042168 <HAL_RCC_ClockConfig+0x358>)
 8042130:	699b      	ldr	r3, [r3, #24]
 8042132:	f003 030f 	and.w	r3, r3, #15
 8042136:	4a0d      	ldr	r2, [pc, #52]	@ (804216c <HAL_RCC_ClockConfig+0x35c>)
 8042138:	5cd3      	ldrb	r3, [r2, r3]
 804213a:	f003 031f 	and.w	r3, r3, #31
 804213e:	693a      	ldr	r2, [r7, #16]
 8042140:	fa22 f303 	lsr.w	r3, r2, r3
 8042144:	4a0a      	ldr	r2, [pc, #40]	@ (8042170 <HAL_RCC_ClockConfig+0x360>)
 8042146:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8042148:	4a0a      	ldr	r2, [pc, #40]	@ (8042174 <HAL_RCC_ClockConfig+0x364>)
 804214a:	693b      	ldr	r3, [r7, #16]
 804214c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 804214e:	4b0a      	ldr	r3, [pc, #40]	@ (8042178 <HAL_RCC_ClockConfig+0x368>)
 8042150:	681b      	ldr	r3, [r3, #0]
 8042152:	4618      	mov	r0, r3
 8042154:	f7fe fdc2 	bl	8040cdc <HAL_InitTick>
 8042158:	4603      	mov	r3, r0
 804215a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 804215c:	7bfb      	ldrb	r3, [r7, #15]
}
 804215e:	4618      	mov	r0, r3
 8042160:	3718      	adds	r7, #24
 8042162:	46bd      	mov	sp, r7
 8042164:	bd80      	pop	{r7, pc}
 8042166:	bf00      	nop
 8042168:	58024400 	.word	0x58024400
 804216c:	08045d74 	.word	0x08045d74
 8042170:	24000004 	.word	0x24000004
 8042174:	24000000 	.word	0x24000000
 8042178:	24000034 	.word	0x24000034

0804217c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 804217c:	b480      	push	{r7}
 804217e:	b089      	sub	sp, #36	@ 0x24
 8042180:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8042182:	4bb3      	ldr	r3, [pc, #716]	@ (8042450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042184:	691b      	ldr	r3, [r3, #16]
 8042186:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 804218a:	2b18      	cmp	r3, #24
 804218c:	f200 8155 	bhi.w	804243a <HAL_RCC_GetSysClockFreq+0x2be>
 8042190:	a201      	add	r2, pc, #4	@ (adr r2, 8042198 <HAL_RCC_GetSysClockFreq+0x1c>)
 8042192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042196:	bf00      	nop
 8042198:	080421fd 	.word	0x080421fd
 804219c:	0804243b 	.word	0x0804243b
 80421a0:	0804243b 	.word	0x0804243b
 80421a4:	0804243b 	.word	0x0804243b
 80421a8:	0804243b 	.word	0x0804243b
 80421ac:	0804243b 	.word	0x0804243b
 80421b0:	0804243b 	.word	0x0804243b
 80421b4:	0804243b 	.word	0x0804243b
 80421b8:	08042223 	.word	0x08042223
 80421bc:	0804243b 	.word	0x0804243b
 80421c0:	0804243b 	.word	0x0804243b
 80421c4:	0804243b 	.word	0x0804243b
 80421c8:	0804243b 	.word	0x0804243b
 80421cc:	0804243b 	.word	0x0804243b
 80421d0:	0804243b 	.word	0x0804243b
 80421d4:	0804243b 	.word	0x0804243b
 80421d8:	08042229 	.word	0x08042229
 80421dc:	0804243b 	.word	0x0804243b
 80421e0:	0804243b 	.word	0x0804243b
 80421e4:	0804243b 	.word	0x0804243b
 80421e8:	0804243b 	.word	0x0804243b
 80421ec:	0804243b 	.word	0x0804243b
 80421f0:	0804243b 	.word	0x0804243b
 80421f4:	0804243b 	.word	0x0804243b
 80421f8:	0804222f 	.word	0x0804222f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80421fc:	4b94      	ldr	r3, [pc, #592]	@ (8042450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80421fe:	681b      	ldr	r3, [r3, #0]
 8042200:	f003 0320 	and.w	r3, r3, #32
 8042204:	2b00      	cmp	r3, #0
 8042206:	d009      	beq.n	804221c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8042208:	4b91      	ldr	r3, [pc, #580]	@ (8042450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 804220a:	681b      	ldr	r3, [r3, #0]
 804220c:	08db      	lsrs	r3, r3, #3
 804220e:	f003 0303 	and.w	r3, r3, #3
 8042212:	4a90      	ldr	r2, [pc, #576]	@ (8042454 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8042214:	fa22 f303 	lsr.w	r3, r2, r3
 8042218:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 804221a:	e111      	b.n	8042440 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 804221c:	4b8d      	ldr	r3, [pc, #564]	@ (8042454 <HAL_RCC_GetSysClockFreq+0x2d8>)
 804221e:	61bb      	str	r3, [r7, #24]
      break;
 8042220:	e10e      	b.n	8042440 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8042222:	4b8d      	ldr	r3, [pc, #564]	@ (8042458 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8042224:	61bb      	str	r3, [r7, #24]
      break;
 8042226:	e10b      	b.n	8042440 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8042228:	4b8c      	ldr	r3, [pc, #560]	@ (804245c <HAL_RCC_GetSysClockFreq+0x2e0>)
 804222a:	61bb      	str	r3, [r7, #24]
      break;
 804222c:	e108      	b.n	8042440 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 804222e:	4b88      	ldr	r3, [pc, #544]	@ (8042450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8042232:	f003 0303 	and.w	r3, r3, #3
 8042236:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8042238:	4b85      	ldr	r3, [pc, #532]	@ (8042450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 804223a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804223c:	091b      	lsrs	r3, r3, #4
 804223e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8042242:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8042244:	4b82      	ldr	r3, [pc, #520]	@ (8042450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8042248:	f003 0301 	and.w	r3, r3, #1
 804224c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 804224e:	4b80      	ldr	r3, [pc, #512]	@ (8042450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8042252:	08db      	lsrs	r3, r3, #3
 8042254:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8042258:	68fa      	ldr	r2, [r7, #12]
 804225a:	fb02 f303 	mul.w	r3, r2, r3
 804225e:	ee07 3a90 	vmov	s15, r3
 8042262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042266:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 804226a:	693b      	ldr	r3, [r7, #16]
 804226c:	2b00      	cmp	r3, #0
 804226e:	f000 80e1 	beq.w	8042434 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8042272:	697b      	ldr	r3, [r7, #20]
 8042274:	2b02      	cmp	r3, #2
 8042276:	f000 8083 	beq.w	8042380 <HAL_RCC_GetSysClockFreq+0x204>
 804227a:	697b      	ldr	r3, [r7, #20]
 804227c:	2b02      	cmp	r3, #2
 804227e:	f200 80a1 	bhi.w	80423c4 <HAL_RCC_GetSysClockFreq+0x248>
 8042282:	697b      	ldr	r3, [r7, #20]
 8042284:	2b00      	cmp	r3, #0
 8042286:	d003      	beq.n	8042290 <HAL_RCC_GetSysClockFreq+0x114>
 8042288:	697b      	ldr	r3, [r7, #20]
 804228a:	2b01      	cmp	r3, #1
 804228c:	d056      	beq.n	804233c <HAL_RCC_GetSysClockFreq+0x1c0>
 804228e:	e099      	b.n	80423c4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8042290:	4b6f      	ldr	r3, [pc, #444]	@ (8042450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042292:	681b      	ldr	r3, [r3, #0]
 8042294:	f003 0320 	and.w	r3, r3, #32
 8042298:	2b00      	cmp	r3, #0
 804229a:	d02d      	beq.n	80422f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 804229c:	4b6c      	ldr	r3, [pc, #432]	@ (8042450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 804229e:	681b      	ldr	r3, [r3, #0]
 80422a0:	08db      	lsrs	r3, r3, #3
 80422a2:	f003 0303 	and.w	r3, r3, #3
 80422a6:	4a6b      	ldr	r2, [pc, #428]	@ (8042454 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80422a8:	fa22 f303 	lsr.w	r3, r2, r3
 80422ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80422ae:	687b      	ldr	r3, [r7, #4]
 80422b0:	ee07 3a90 	vmov	s15, r3
 80422b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80422b8:	693b      	ldr	r3, [r7, #16]
 80422ba:	ee07 3a90 	vmov	s15, r3
 80422be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80422c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80422c6:	4b62      	ldr	r3, [pc, #392]	@ (8042450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80422c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80422ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80422ce:	ee07 3a90 	vmov	s15, r3
 80422d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80422d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80422da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8042460 <HAL_RCC_GetSysClockFreq+0x2e4>
 80422de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80422e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80422e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80422ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80422ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80422f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80422f6:	e087      	b.n	8042408 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80422f8:	693b      	ldr	r3, [r7, #16]
 80422fa:	ee07 3a90 	vmov	s15, r3
 80422fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042302:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8042464 <HAL_RCC_GetSysClockFreq+0x2e8>
 8042306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804230a:	4b51      	ldr	r3, [pc, #324]	@ (8042450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 804230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804230e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8042312:	ee07 3a90 	vmov	s15, r3
 8042316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804231a:	ed97 6a02 	vldr	s12, [r7, #8]
 804231e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8042460 <HAL_RCC_GetSysClockFreq+0x2e4>
 8042322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8042326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804232a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 804232e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8042332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8042336:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 804233a:	e065      	b.n	8042408 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 804233c:	693b      	ldr	r3, [r7, #16]
 804233e:	ee07 3a90 	vmov	s15, r3
 8042342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042346:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8042468 <HAL_RCC_GetSysClockFreq+0x2ec>
 804234a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804234e:	4b40      	ldr	r3, [pc, #256]	@ (8042450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8042356:	ee07 3a90 	vmov	s15, r3
 804235a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804235e:	ed97 6a02 	vldr	s12, [r7, #8]
 8042362:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8042460 <HAL_RCC_GetSysClockFreq+0x2e4>
 8042366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804236a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804236e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8042372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8042376:	ee67 7a27 	vmul.f32	s15, s14, s15
 804237a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 804237e:	e043      	b.n	8042408 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8042380:	693b      	ldr	r3, [r7, #16]
 8042382:	ee07 3a90 	vmov	s15, r3
 8042386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804238a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 804246c <HAL_RCC_GetSysClockFreq+0x2f0>
 804238e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8042392:	4b2f      	ldr	r3, [pc, #188]	@ (8042450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804239a:	ee07 3a90 	vmov	s15, r3
 804239e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80423a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80423a6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8042460 <HAL_RCC_GetSysClockFreq+0x2e4>
 80423aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80423ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80423b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80423b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80423ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80423be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80423c2:	e021      	b.n	8042408 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80423c4:	693b      	ldr	r3, [r7, #16]
 80423c6:	ee07 3a90 	vmov	s15, r3
 80423ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80423ce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8042468 <HAL_RCC_GetSysClockFreq+0x2ec>
 80423d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80423d6:	4b1e      	ldr	r3, [pc, #120]	@ (8042450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80423d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80423da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80423de:	ee07 3a90 	vmov	s15, r3
 80423e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80423e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80423ea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8042460 <HAL_RCC_GetSysClockFreq+0x2e4>
 80423ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80423f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80423f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80423fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80423fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8042402:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8042406:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8042408:	4b11      	ldr	r3, [pc, #68]	@ (8042450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 804240a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804240c:	0a5b      	lsrs	r3, r3, #9
 804240e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8042412:	3301      	adds	r3, #1
 8042414:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8042416:	683b      	ldr	r3, [r7, #0]
 8042418:	ee07 3a90 	vmov	s15, r3
 804241c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8042420:	edd7 6a07 	vldr	s13, [r7, #28]
 8042424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8042428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 804242c:	ee17 3a90 	vmov	r3, s15
 8042430:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8042432:	e005      	b.n	8042440 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8042434:	2300      	movs	r3, #0
 8042436:	61bb      	str	r3, [r7, #24]
      break;
 8042438:	e002      	b.n	8042440 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 804243a:	4b07      	ldr	r3, [pc, #28]	@ (8042458 <HAL_RCC_GetSysClockFreq+0x2dc>)
 804243c:	61bb      	str	r3, [r7, #24]
      break;
 804243e:	bf00      	nop
  }

  return sysclockfreq;
 8042440:	69bb      	ldr	r3, [r7, #24]
}
 8042442:	4618      	mov	r0, r3
 8042444:	3724      	adds	r7, #36	@ 0x24
 8042446:	46bd      	mov	sp, r7
 8042448:	f85d 7b04 	ldr.w	r7, [sp], #4
 804244c:	4770      	bx	lr
 804244e:	bf00      	nop
 8042450:	58024400 	.word	0x58024400
 8042454:	03d09000 	.word	0x03d09000
 8042458:	003d0900 	.word	0x003d0900
 804245c:	017d7840 	.word	0x017d7840
 8042460:	46000000 	.word	0x46000000
 8042464:	4c742400 	.word	0x4c742400
 8042468:	4a742400 	.word	0x4a742400
 804246c:	4bbebc20 	.word	0x4bbebc20

08042470 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8042470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8042474:	b0ca      	sub	sp, #296	@ 0x128
 8042476:	af00      	add	r7, sp, #0
 8042478:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 804247c:	2300      	movs	r3, #0
 804247e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8042482:	2300      	movs	r3, #0
 8042484:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8042488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042490:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8042494:	2500      	movs	r5, #0
 8042496:	ea54 0305 	orrs.w	r3, r4, r5
 804249a:	d049      	beq.n	8042530 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 804249c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80424a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80424a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80424a6:	d02f      	beq.n	8042508 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80424a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80424ac:	d828      	bhi.n	8042500 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80424ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80424b2:	d01a      	beq.n	80424ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80424b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80424b8:	d822      	bhi.n	8042500 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80424ba:	2b00      	cmp	r3, #0
 80424bc:	d003      	beq.n	80424c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80424be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80424c2:	d007      	beq.n	80424d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80424c4:	e01c      	b.n	8042500 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80424c6:	4bb8      	ldr	r3, [pc, #736]	@ (80427a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80424c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80424ca:	4ab7      	ldr	r2, [pc, #732]	@ (80427a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80424cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80424d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80424d2:	e01a      	b.n	804250a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80424d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80424d8:	3308      	adds	r3, #8
 80424da:	2102      	movs	r1, #2
 80424dc:	4618      	mov	r0, r3
 80424de:	f001 f9d1 	bl	8043884 <RCCEx_PLL2_Config>
 80424e2:	4603      	mov	r3, r0
 80424e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80424e8:	e00f      	b.n	804250a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80424ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80424ee:	3328      	adds	r3, #40	@ 0x28
 80424f0:	2102      	movs	r1, #2
 80424f2:	4618      	mov	r0, r3
 80424f4:	f001 fa78 	bl	80439e8 <RCCEx_PLL3_Config>
 80424f8:	4603      	mov	r3, r0
 80424fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80424fe:	e004      	b.n	804250a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042500:	2301      	movs	r3, #1
 8042502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8042506:	e000      	b.n	804250a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8042508:	bf00      	nop
    }

    if (ret == HAL_OK)
 804250a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 804250e:	2b00      	cmp	r3, #0
 8042510:	d10a      	bne.n	8042528 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8042512:	4ba5      	ldr	r3, [pc, #660]	@ (80427a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8042516:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 804251a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804251e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8042520:	4aa1      	ldr	r2, [pc, #644]	@ (80427a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042522:	430b      	orrs	r3, r1
 8042524:	6513      	str	r3, [r2, #80]	@ 0x50
 8042526:	e003      	b.n	8042530 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 804252c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8042530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042538:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 804253c:	f04f 0900 	mov.w	r9, #0
 8042540:	ea58 0309 	orrs.w	r3, r8, r9
 8042544:	d047      	beq.n	80425d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8042546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804254a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 804254c:	2b04      	cmp	r3, #4
 804254e:	d82a      	bhi.n	80425a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8042550:	a201      	add	r2, pc, #4	@ (adr r2, 8042558 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8042552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042556:	bf00      	nop
 8042558:	0804256d 	.word	0x0804256d
 804255c:	0804257b 	.word	0x0804257b
 8042560:	08042591 	.word	0x08042591
 8042564:	080425af 	.word	0x080425af
 8042568:	080425af 	.word	0x080425af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804256c:	4b8e      	ldr	r3, [pc, #568]	@ (80427a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804256e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8042570:	4a8d      	ldr	r2, [pc, #564]	@ (80427a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042572:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8042576:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8042578:	e01a      	b.n	80425b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804257a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804257e:	3308      	adds	r3, #8
 8042580:	2100      	movs	r1, #0
 8042582:	4618      	mov	r0, r3
 8042584:	f001 f97e 	bl	8043884 <RCCEx_PLL2_Config>
 8042588:	4603      	mov	r3, r0
 804258a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 804258e:	e00f      	b.n	80425b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8042590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042594:	3328      	adds	r3, #40	@ 0x28
 8042596:	2100      	movs	r1, #0
 8042598:	4618      	mov	r0, r3
 804259a:	f001 fa25 	bl	80439e8 <RCCEx_PLL3_Config>
 804259e:	4603      	mov	r3, r0
 80425a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80425a4:	e004      	b.n	80425b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80425a6:	2301      	movs	r3, #1
 80425a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80425ac:	e000      	b.n	80425b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80425ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80425b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80425b4:	2b00      	cmp	r3, #0
 80425b6:	d10a      	bne.n	80425ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80425b8:	4b7b      	ldr	r3, [pc, #492]	@ (80427a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80425ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80425bc:	f023 0107 	bic.w	r1, r3, #7
 80425c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80425c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80425c6:	4a78      	ldr	r2, [pc, #480]	@ (80427a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80425c8:	430b      	orrs	r3, r1
 80425ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80425cc:	e003      	b.n	80425d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80425ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80425d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80425d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80425da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80425de:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80425e2:	f04f 0b00 	mov.w	fp, #0
 80425e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80425ea:	d04c      	beq.n	8042686 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80425ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80425f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80425f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80425f6:	d030      	beq.n	804265a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80425f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80425fc:	d829      	bhi.n	8042652 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80425fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8042600:	d02d      	beq.n	804265e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8042602:	2bc0      	cmp	r3, #192	@ 0xc0
 8042604:	d825      	bhi.n	8042652 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8042606:	2b80      	cmp	r3, #128	@ 0x80
 8042608:	d018      	beq.n	804263c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 804260a:	2b80      	cmp	r3, #128	@ 0x80
 804260c:	d821      	bhi.n	8042652 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 804260e:	2b00      	cmp	r3, #0
 8042610:	d002      	beq.n	8042618 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8042612:	2b40      	cmp	r3, #64	@ 0x40
 8042614:	d007      	beq.n	8042626 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8042616:	e01c      	b.n	8042652 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042618:	4b63      	ldr	r3, [pc, #396]	@ (80427a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804261a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804261c:	4a62      	ldr	r2, [pc, #392]	@ (80427a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804261e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8042622:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8042624:	e01c      	b.n	8042660 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8042626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804262a:	3308      	adds	r3, #8
 804262c:	2100      	movs	r1, #0
 804262e:	4618      	mov	r0, r3
 8042630:	f001 f928 	bl	8043884 <RCCEx_PLL2_Config>
 8042634:	4603      	mov	r3, r0
 8042636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 804263a:	e011      	b.n	8042660 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 804263c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042640:	3328      	adds	r3, #40	@ 0x28
 8042642:	2100      	movs	r1, #0
 8042644:	4618      	mov	r0, r3
 8042646:	f001 f9cf 	bl	80439e8 <RCCEx_PLL3_Config>
 804264a:	4603      	mov	r3, r0
 804264c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8042650:	e006      	b.n	8042660 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042652:	2301      	movs	r3, #1
 8042654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8042658:	e002      	b.n	8042660 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 804265a:	bf00      	nop
 804265c:	e000      	b.n	8042660 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 804265e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042664:	2b00      	cmp	r3, #0
 8042666:	d10a      	bne.n	804267e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8042668:	4b4f      	ldr	r3, [pc, #316]	@ (80427a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804266a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804266c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8042670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8042676:	4a4c      	ldr	r2, [pc, #304]	@ (80427a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042678:	430b      	orrs	r3, r1
 804267a:	6513      	str	r3, [r2, #80]	@ 0x50
 804267c:	e003      	b.n	8042686 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804267e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042682:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8042686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804268e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8042692:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8042696:	2300      	movs	r3, #0
 8042698:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 804269c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80426a0:	460b      	mov	r3, r1
 80426a2:	4313      	orrs	r3, r2
 80426a4:	d053      	beq.n	804274e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80426a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80426aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80426ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80426b2:	d035      	beq.n	8042720 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80426b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80426b8:	d82e      	bhi.n	8042718 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80426ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80426be:	d031      	beq.n	8042724 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80426c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80426c4:	d828      	bhi.n	8042718 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80426c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80426ca:	d01a      	beq.n	8042702 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80426cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80426d0:	d822      	bhi.n	8042718 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80426d2:	2b00      	cmp	r3, #0
 80426d4:	d003      	beq.n	80426de <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80426d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80426da:	d007      	beq.n	80426ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80426dc:	e01c      	b.n	8042718 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80426de:	4b32      	ldr	r3, [pc, #200]	@ (80427a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80426e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80426e2:	4a31      	ldr	r2, [pc, #196]	@ (80427a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80426e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80426e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80426ea:	e01c      	b.n	8042726 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80426ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80426f0:	3308      	adds	r3, #8
 80426f2:	2100      	movs	r1, #0
 80426f4:	4618      	mov	r0, r3
 80426f6:	f001 f8c5 	bl	8043884 <RCCEx_PLL2_Config>
 80426fa:	4603      	mov	r3, r0
 80426fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8042700:	e011      	b.n	8042726 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8042702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042706:	3328      	adds	r3, #40	@ 0x28
 8042708:	2100      	movs	r1, #0
 804270a:	4618      	mov	r0, r3
 804270c:	f001 f96c 	bl	80439e8 <RCCEx_PLL3_Config>
 8042710:	4603      	mov	r3, r0
 8042712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8042716:	e006      	b.n	8042726 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8042718:	2301      	movs	r3, #1
 804271a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 804271e:	e002      	b.n	8042726 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8042720:	bf00      	nop
 8042722:	e000      	b.n	8042726 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8042724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 804272a:	2b00      	cmp	r3, #0
 804272c:	d10b      	bne.n	8042746 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 804272e:	4b1e      	ldr	r3, [pc, #120]	@ (80427a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8042732:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8042736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804273a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 804273e:	4a1a      	ldr	r2, [pc, #104]	@ (80427a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042740:	430b      	orrs	r3, r1
 8042742:	6593      	str	r3, [r2, #88]	@ 0x58
 8042744:	e003      	b.n	804274e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 804274a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 804274e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042756:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 804275a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 804275e:	2300      	movs	r3, #0
 8042760:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8042764:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8042768:	460b      	mov	r3, r1
 804276a:	4313      	orrs	r3, r2
 804276c:	d056      	beq.n	804281c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 804276e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042772:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8042776:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 804277a:	d038      	beq.n	80427ee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 804277c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8042780:	d831      	bhi.n	80427e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8042782:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8042786:	d034      	beq.n	80427f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8042788:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 804278c:	d82b      	bhi.n	80427e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 804278e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8042792:	d01d      	beq.n	80427d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8042794:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8042798:	d825      	bhi.n	80427e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 804279a:	2b00      	cmp	r3, #0
 804279c:	d006      	beq.n	80427ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 804279e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80427a2:	d00a      	beq.n	80427ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80427a4:	e01f      	b.n	80427e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80427a6:	bf00      	nop
 80427a8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80427ac:	4ba2      	ldr	r3, [pc, #648]	@ (8042a38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80427ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80427b0:	4aa1      	ldr	r2, [pc, #644]	@ (8042a38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80427b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80427b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80427b8:	e01c      	b.n	80427f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80427ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80427be:	3308      	adds	r3, #8
 80427c0:	2100      	movs	r1, #0
 80427c2:	4618      	mov	r0, r3
 80427c4:	f001 f85e 	bl	8043884 <RCCEx_PLL2_Config>
 80427c8:	4603      	mov	r3, r0
 80427ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80427ce:	e011      	b.n	80427f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80427d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80427d4:	3328      	adds	r3, #40	@ 0x28
 80427d6:	2100      	movs	r1, #0
 80427d8:	4618      	mov	r0, r3
 80427da:	f001 f905 	bl	80439e8 <RCCEx_PLL3_Config>
 80427de:	4603      	mov	r3, r0
 80427e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80427e4:	e006      	b.n	80427f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80427e6:	2301      	movs	r3, #1
 80427e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80427ec:	e002      	b.n	80427f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80427ee:	bf00      	nop
 80427f0:	e000      	b.n	80427f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80427f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80427f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80427f8:	2b00      	cmp	r3, #0
 80427fa:	d10b      	bne.n	8042814 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80427fc:	4b8e      	ldr	r3, [pc, #568]	@ (8042a38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80427fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8042800:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8042804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042808:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 804280c:	4a8a      	ldr	r2, [pc, #552]	@ (8042a38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804280e:	430b      	orrs	r3, r1
 8042810:	6593      	str	r3, [r2, #88]	@ 0x58
 8042812:	e003      	b.n	804281c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042818:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 804281c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042824:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8042828:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 804282c:	2300      	movs	r3, #0
 804282e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8042832:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8042836:	460b      	mov	r3, r1
 8042838:	4313      	orrs	r3, r2
 804283a:	d03a      	beq.n	80428b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 804283c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8042842:	2b30      	cmp	r3, #48	@ 0x30
 8042844:	d01f      	beq.n	8042886 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8042846:	2b30      	cmp	r3, #48	@ 0x30
 8042848:	d819      	bhi.n	804287e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 804284a:	2b20      	cmp	r3, #32
 804284c:	d00c      	beq.n	8042868 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 804284e:	2b20      	cmp	r3, #32
 8042850:	d815      	bhi.n	804287e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8042852:	2b00      	cmp	r3, #0
 8042854:	d019      	beq.n	804288a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8042856:	2b10      	cmp	r3, #16
 8042858:	d111      	bne.n	804287e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804285a:	4b77      	ldr	r3, [pc, #476]	@ (8042a38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804285c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804285e:	4a76      	ldr	r2, [pc, #472]	@ (8042a38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8042864:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8042866:	e011      	b.n	804288c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8042868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804286c:	3308      	adds	r3, #8
 804286e:	2102      	movs	r1, #2
 8042870:	4618      	mov	r0, r3
 8042872:	f001 f807 	bl	8043884 <RCCEx_PLL2_Config>
 8042876:	4603      	mov	r3, r0
 8042878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 804287c:	e006      	b.n	804288c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 804287e:	2301      	movs	r3, #1
 8042880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8042884:	e002      	b.n	804288c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8042886:	bf00      	nop
 8042888:	e000      	b.n	804288c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 804288a:	bf00      	nop
    }

    if (ret == HAL_OK)
 804288c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042890:	2b00      	cmp	r3, #0
 8042892:	d10a      	bne.n	80428aa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8042894:	4b68      	ldr	r3, [pc, #416]	@ (8042a38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8042898:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 804289c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80428a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80428a2:	4a65      	ldr	r2, [pc, #404]	@ (8042a38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80428a4:	430b      	orrs	r3, r1
 80428a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80428a8:	e003      	b.n	80428b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80428aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80428ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80428b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80428b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80428ba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80428be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80428c2:	2300      	movs	r3, #0
 80428c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80428c8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80428cc:	460b      	mov	r3, r1
 80428ce:	4313      	orrs	r3, r2
 80428d0:	d051      	beq.n	8042976 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80428d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80428d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80428d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80428dc:	d035      	beq.n	804294a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80428de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80428e2:	d82e      	bhi.n	8042942 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80428e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80428e8:	d031      	beq.n	804294e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80428ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80428ee:	d828      	bhi.n	8042942 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80428f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80428f4:	d01a      	beq.n	804292c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80428f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80428fa:	d822      	bhi.n	8042942 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80428fc:	2b00      	cmp	r3, #0
 80428fe:	d003      	beq.n	8042908 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8042900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8042904:	d007      	beq.n	8042916 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8042906:	e01c      	b.n	8042942 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042908:	4b4b      	ldr	r3, [pc, #300]	@ (8042a38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804290a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804290c:	4a4a      	ldr	r2, [pc, #296]	@ (8042a38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804290e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8042912:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8042914:	e01c      	b.n	8042950 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8042916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804291a:	3308      	adds	r3, #8
 804291c:	2100      	movs	r1, #0
 804291e:	4618      	mov	r0, r3
 8042920:	f000 ffb0 	bl	8043884 <RCCEx_PLL2_Config>
 8042924:	4603      	mov	r3, r0
 8042926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 804292a:	e011      	b.n	8042950 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 804292c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042930:	3328      	adds	r3, #40	@ 0x28
 8042932:	2100      	movs	r1, #0
 8042934:	4618      	mov	r0, r3
 8042936:	f001 f857 	bl	80439e8 <RCCEx_PLL3_Config>
 804293a:	4603      	mov	r3, r0
 804293c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8042940:	e006      	b.n	8042950 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042942:	2301      	movs	r3, #1
 8042944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8042948:	e002      	b.n	8042950 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 804294a:	bf00      	nop
 804294c:	e000      	b.n	8042950 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 804294e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042954:	2b00      	cmp	r3, #0
 8042956:	d10a      	bne.n	804296e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8042958:	4b37      	ldr	r3, [pc, #220]	@ (8042a38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804295a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804295c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8042960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8042966:	4a34      	ldr	r2, [pc, #208]	@ (8042a38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042968:	430b      	orrs	r3, r1
 804296a:	6513      	str	r3, [r2, #80]	@ 0x50
 804296c:	e003      	b.n	8042976 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804296e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042972:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8042976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804297e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8042982:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8042986:	2300      	movs	r3, #0
 8042988:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 804298c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8042990:	460b      	mov	r3, r1
 8042992:	4313      	orrs	r3, r2
 8042994:	d056      	beq.n	8042a44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8042996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804299a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 804299c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80429a0:	d033      	beq.n	8042a0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80429a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80429a6:	d82c      	bhi.n	8042a02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80429a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80429ac:	d02f      	beq.n	8042a0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80429ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80429b2:	d826      	bhi.n	8042a02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80429b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80429b8:	d02b      	beq.n	8042a12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80429ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80429be:	d820      	bhi.n	8042a02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80429c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80429c4:	d012      	beq.n	80429ec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80429c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80429ca:	d81a      	bhi.n	8042a02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80429cc:	2b00      	cmp	r3, #0
 80429ce:	d022      	beq.n	8042a16 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80429d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80429d4:	d115      	bne.n	8042a02 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80429d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80429da:	3308      	adds	r3, #8
 80429dc:	2101      	movs	r1, #1
 80429de:	4618      	mov	r0, r3
 80429e0:	f000 ff50 	bl	8043884 <RCCEx_PLL2_Config>
 80429e4:	4603      	mov	r3, r0
 80429e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80429ea:	e015      	b.n	8042a18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80429ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80429f0:	3328      	adds	r3, #40	@ 0x28
 80429f2:	2101      	movs	r1, #1
 80429f4:	4618      	mov	r0, r3
 80429f6:	f000 fff7 	bl	80439e8 <RCCEx_PLL3_Config>
 80429fa:	4603      	mov	r3, r0
 80429fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8042a00:	e00a      	b.n	8042a18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042a02:	2301      	movs	r3, #1
 8042a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8042a08:	e006      	b.n	8042a18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8042a0a:	bf00      	nop
 8042a0c:	e004      	b.n	8042a18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8042a0e:	bf00      	nop
 8042a10:	e002      	b.n	8042a18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8042a12:	bf00      	nop
 8042a14:	e000      	b.n	8042a18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8042a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042a1c:	2b00      	cmp	r3, #0
 8042a1e:	d10d      	bne.n	8042a3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8042a20:	4b05      	ldr	r3, [pc, #20]	@ (8042a38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8042a24:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8042a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042a2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8042a2e:	4a02      	ldr	r2, [pc, #8]	@ (8042a38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042a30:	430b      	orrs	r3, r1
 8042a32:	6513      	str	r3, [r2, #80]	@ 0x50
 8042a34:	e006      	b.n	8042a44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8042a36:	bf00      	nop
 8042a38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042a40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8042a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042a4c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8042a50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8042a54:	2300      	movs	r3, #0
 8042a56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8042a5a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8042a5e:	460b      	mov	r3, r1
 8042a60:	4313      	orrs	r3, r2
 8042a62:	d055      	beq.n	8042b10 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8042a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042a68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8042a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8042a70:	d033      	beq.n	8042ada <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8042a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8042a76:	d82c      	bhi.n	8042ad2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8042a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8042a7c:	d02f      	beq.n	8042ade <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8042a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8042a82:	d826      	bhi.n	8042ad2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8042a84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8042a88:	d02b      	beq.n	8042ae2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8042a8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8042a8e:	d820      	bhi.n	8042ad2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8042a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8042a94:	d012      	beq.n	8042abc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8042a96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8042a9a:	d81a      	bhi.n	8042ad2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8042a9c:	2b00      	cmp	r3, #0
 8042a9e:	d022      	beq.n	8042ae6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8042aa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8042aa4:	d115      	bne.n	8042ad2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8042aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042aaa:	3308      	adds	r3, #8
 8042aac:	2101      	movs	r1, #1
 8042aae:	4618      	mov	r0, r3
 8042ab0:	f000 fee8 	bl	8043884 <RCCEx_PLL2_Config>
 8042ab4:	4603      	mov	r3, r0
 8042ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8042aba:	e015      	b.n	8042ae8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8042abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042ac0:	3328      	adds	r3, #40	@ 0x28
 8042ac2:	2101      	movs	r1, #1
 8042ac4:	4618      	mov	r0, r3
 8042ac6:	f000 ff8f 	bl	80439e8 <RCCEx_PLL3_Config>
 8042aca:	4603      	mov	r3, r0
 8042acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8042ad0:	e00a      	b.n	8042ae8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8042ad2:	2301      	movs	r3, #1
 8042ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8042ad8:	e006      	b.n	8042ae8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8042ada:	bf00      	nop
 8042adc:	e004      	b.n	8042ae8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8042ade:	bf00      	nop
 8042ae0:	e002      	b.n	8042ae8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8042ae2:	bf00      	nop
 8042ae4:	e000      	b.n	8042ae8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8042ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042aec:	2b00      	cmp	r3, #0
 8042aee:	d10b      	bne.n	8042b08 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8042af0:	4ba3      	ldr	r3, [pc, #652]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8042af4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8042af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042afc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8042b00:	4a9f      	ldr	r2, [pc, #636]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042b02:	430b      	orrs	r3, r1
 8042b04:	6593      	str	r3, [r2, #88]	@ 0x58
 8042b06:	e003      	b.n	8042b10 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042b0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8042b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042b18:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8042b1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8042b20:	2300      	movs	r3, #0
 8042b22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8042b26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8042b2a:	460b      	mov	r3, r1
 8042b2c:	4313      	orrs	r3, r2
 8042b2e:	d037      	beq.n	8042ba0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8042b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8042b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8042b3a:	d00e      	beq.n	8042b5a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8042b3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8042b40:	d816      	bhi.n	8042b70 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8042b42:	2b00      	cmp	r3, #0
 8042b44:	d018      	beq.n	8042b78 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8042b46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8042b4a:	d111      	bne.n	8042b70 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042b4c:	4b8c      	ldr	r3, [pc, #560]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8042b50:	4a8b      	ldr	r2, [pc, #556]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042b52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8042b56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8042b58:	e00f      	b.n	8042b7a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8042b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042b5e:	3308      	adds	r3, #8
 8042b60:	2101      	movs	r1, #1
 8042b62:	4618      	mov	r0, r3
 8042b64:	f000 fe8e 	bl	8043884 <RCCEx_PLL2_Config>
 8042b68:	4603      	mov	r3, r0
 8042b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8042b6e:	e004      	b.n	8042b7a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042b70:	2301      	movs	r3, #1
 8042b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8042b76:	e000      	b.n	8042b7a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8042b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042b7e:	2b00      	cmp	r3, #0
 8042b80:	d10a      	bne.n	8042b98 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8042b82:	4b7f      	ldr	r3, [pc, #508]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8042b86:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8042b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8042b90:	4a7b      	ldr	r2, [pc, #492]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042b92:	430b      	orrs	r3, r1
 8042b94:	6513      	str	r3, [r2, #80]	@ 0x50
 8042b96:	e003      	b.n	8042ba0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042b9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8042ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042ba8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8042bac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8042bb0:	2300      	movs	r3, #0
 8042bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8042bb6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8042bba:	460b      	mov	r3, r1
 8042bbc:	4313      	orrs	r3, r2
 8042bbe:	d039      	beq.n	8042c34 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8042bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8042bc6:	2b03      	cmp	r3, #3
 8042bc8:	d81c      	bhi.n	8042c04 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8042bca:	a201      	add	r2, pc, #4	@ (adr r2, 8042bd0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8042bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042bd0:	08042c0d 	.word	0x08042c0d
 8042bd4:	08042be1 	.word	0x08042be1
 8042bd8:	08042bef 	.word	0x08042bef
 8042bdc:	08042c0d 	.word	0x08042c0d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042be0:	4b67      	ldr	r3, [pc, #412]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8042be4:	4a66      	ldr	r2, [pc, #408]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8042bea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8042bec:	e00f      	b.n	8042c0e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8042bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042bf2:	3308      	adds	r3, #8
 8042bf4:	2102      	movs	r1, #2
 8042bf6:	4618      	mov	r0, r3
 8042bf8:	f000 fe44 	bl	8043884 <RCCEx_PLL2_Config>
 8042bfc:	4603      	mov	r3, r0
 8042bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8042c02:	e004      	b.n	8042c0e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8042c04:	2301      	movs	r3, #1
 8042c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8042c0a:	e000      	b.n	8042c0e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8042c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042c12:	2b00      	cmp	r3, #0
 8042c14:	d10a      	bne.n	8042c2c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8042c16:	4b5a      	ldr	r3, [pc, #360]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8042c1a:	f023 0103 	bic.w	r1, r3, #3
 8042c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042c22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8042c24:	4a56      	ldr	r2, [pc, #344]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042c26:	430b      	orrs	r3, r1
 8042c28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8042c2a:	e003      	b.n	8042c34 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042c30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8042c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042c3c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8042c40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8042c44:	2300      	movs	r3, #0
 8042c46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8042c4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8042c4e:	460b      	mov	r3, r1
 8042c50:	4313      	orrs	r3, r2
 8042c52:	f000 809f 	beq.w	8042d94 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8042c56:	4b4b      	ldr	r3, [pc, #300]	@ (8042d84 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8042c58:	681b      	ldr	r3, [r3, #0]
 8042c5a:	4a4a      	ldr	r2, [pc, #296]	@ (8042d84 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8042c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8042c60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8042c62:	f7fe f885 	bl	8040d70 <HAL_GetTick>
 8042c66:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8042c6a:	e00b      	b.n	8042c84 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8042c6c:	f7fe f880 	bl	8040d70 <HAL_GetTick>
 8042c70:	4602      	mov	r2, r0
 8042c72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8042c76:	1ad3      	subs	r3, r2, r3
 8042c78:	2b64      	cmp	r3, #100	@ 0x64
 8042c7a:	d903      	bls.n	8042c84 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8042c7c:	2303      	movs	r3, #3
 8042c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8042c82:	e005      	b.n	8042c90 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8042c84:	4b3f      	ldr	r3, [pc, #252]	@ (8042d84 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8042c86:	681b      	ldr	r3, [r3, #0]
 8042c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8042c8c:	2b00      	cmp	r3, #0
 8042c8e:	d0ed      	beq.n	8042c6c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8042c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042c94:	2b00      	cmp	r3, #0
 8042c96:	d179      	bne.n	8042d8c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8042c98:	4b39      	ldr	r3, [pc, #228]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042c9a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8042c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042ca0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8042ca4:	4053      	eors	r3, r2
 8042ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8042caa:	2b00      	cmp	r3, #0
 8042cac:	d015      	beq.n	8042cda <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8042cae:	4b34      	ldr	r3, [pc, #208]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8042cb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8042cb6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8042cba:	4b31      	ldr	r3, [pc, #196]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8042cbe:	4a30      	ldr	r2, [pc, #192]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8042cc4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8042cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8042cca:	4a2d      	ldr	r2, [pc, #180]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042ccc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8042cd0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8042cd2:	4a2b      	ldr	r2, [pc, #172]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042cd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8042cd8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8042cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042cde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8042ce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8042ce6:	d118      	bne.n	8042d1a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042ce8:	f7fe f842 	bl	8040d70 <HAL_GetTick>
 8042cec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8042cf0:	e00d      	b.n	8042d0e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8042cf2:	f7fe f83d 	bl	8040d70 <HAL_GetTick>
 8042cf6:	4602      	mov	r2, r0
 8042cf8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8042cfc:	1ad2      	subs	r2, r2, r3
 8042cfe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8042d02:	429a      	cmp	r2, r3
 8042d04:	d903      	bls.n	8042d0e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8042d06:	2303      	movs	r3, #3
 8042d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8042d0c:	e005      	b.n	8042d1a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8042d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8042d12:	f003 0302 	and.w	r3, r3, #2
 8042d16:	2b00      	cmp	r3, #0
 8042d18:	d0eb      	beq.n	8042cf2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8042d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042d1e:	2b00      	cmp	r3, #0
 8042d20:	d129      	bne.n	8042d76 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8042d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042d26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8042d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8042d2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8042d32:	d10e      	bne.n	8042d52 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8042d34:	4b12      	ldr	r3, [pc, #72]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042d36:	691b      	ldr	r3, [r3, #16]
 8042d38:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8042d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042d40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8042d44:	091a      	lsrs	r2, r3, #4
 8042d46:	4b10      	ldr	r3, [pc, #64]	@ (8042d88 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8042d48:	4013      	ands	r3, r2
 8042d4a:	4a0d      	ldr	r2, [pc, #52]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042d4c:	430b      	orrs	r3, r1
 8042d4e:	6113      	str	r3, [r2, #16]
 8042d50:	e005      	b.n	8042d5e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8042d52:	4b0b      	ldr	r3, [pc, #44]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042d54:	691b      	ldr	r3, [r3, #16]
 8042d56:	4a0a      	ldr	r2, [pc, #40]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042d58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8042d5c:	6113      	str	r3, [r2, #16]
 8042d5e:	4b08      	ldr	r3, [pc, #32]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042d60:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8042d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042d66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8042d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8042d6e:	4a04      	ldr	r2, [pc, #16]	@ (8042d80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8042d70:	430b      	orrs	r3, r1
 8042d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8042d74:	e00e      	b.n	8042d94 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8042d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042d7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8042d7e:	e009      	b.n	8042d94 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8042d80:	58024400 	.word	0x58024400
 8042d84:	58024800 	.word	0x58024800
 8042d88:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042d90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8042d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042d9c:	f002 0301 	and.w	r3, r2, #1
 8042da0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8042da4:	2300      	movs	r3, #0
 8042da6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8042daa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8042dae:	460b      	mov	r3, r1
 8042db0:	4313      	orrs	r3, r2
 8042db2:	f000 8089 	beq.w	8042ec8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8042db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042dba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8042dbc:	2b28      	cmp	r3, #40	@ 0x28
 8042dbe:	d86b      	bhi.n	8042e98 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8042dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8042dc8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8042dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042dc6:	bf00      	nop
 8042dc8:	08042ea1 	.word	0x08042ea1
 8042dcc:	08042e99 	.word	0x08042e99
 8042dd0:	08042e99 	.word	0x08042e99
 8042dd4:	08042e99 	.word	0x08042e99
 8042dd8:	08042e99 	.word	0x08042e99
 8042ddc:	08042e99 	.word	0x08042e99
 8042de0:	08042e99 	.word	0x08042e99
 8042de4:	08042e99 	.word	0x08042e99
 8042de8:	08042e6d 	.word	0x08042e6d
 8042dec:	08042e99 	.word	0x08042e99
 8042df0:	08042e99 	.word	0x08042e99
 8042df4:	08042e99 	.word	0x08042e99
 8042df8:	08042e99 	.word	0x08042e99
 8042dfc:	08042e99 	.word	0x08042e99
 8042e00:	08042e99 	.word	0x08042e99
 8042e04:	08042e99 	.word	0x08042e99
 8042e08:	08042e83 	.word	0x08042e83
 8042e0c:	08042e99 	.word	0x08042e99
 8042e10:	08042e99 	.word	0x08042e99
 8042e14:	08042e99 	.word	0x08042e99
 8042e18:	08042e99 	.word	0x08042e99
 8042e1c:	08042e99 	.word	0x08042e99
 8042e20:	08042e99 	.word	0x08042e99
 8042e24:	08042e99 	.word	0x08042e99
 8042e28:	08042ea1 	.word	0x08042ea1
 8042e2c:	08042e99 	.word	0x08042e99
 8042e30:	08042e99 	.word	0x08042e99
 8042e34:	08042e99 	.word	0x08042e99
 8042e38:	08042e99 	.word	0x08042e99
 8042e3c:	08042e99 	.word	0x08042e99
 8042e40:	08042e99 	.word	0x08042e99
 8042e44:	08042e99 	.word	0x08042e99
 8042e48:	08042ea1 	.word	0x08042ea1
 8042e4c:	08042e99 	.word	0x08042e99
 8042e50:	08042e99 	.word	0x08042e99
 8042e54:	08042e99 	.word	0x08042e99
 8042e58:	08042e99 	.word	0x08042e99
 8042e5c:	08042e99 	.word	0x08042e99
 8042e60:	08042e99 	.word	0x08042e99
 8042e64:	08042e99 	.word	0x08042e99
 8042e68:	08042ea1 	.word	0x08042ea1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8042e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042e70:	3308      	adds	r3, #8
 8042e72:	2101      	movs	r1, #1
 8042e74:	4618      	mov	r0, r3
 8042e76:	f000 fd05 	bl	8043884 <RCCEx_PLL2_Config>
 8042e7a:	4603      	mov	r3, r0
 8042e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8042e80:	e00f      	b.n	8042ea2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8042e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042e86:	3328      	adds	r3, #40	@ 0x28
 8042e88:	2101      	movs	r1, #1
 8042e8a:	4618      	mov	r0, r3
 8042e8c:	f000 fdac 	bl	80439e8 <RCCEx_PLL3_Config>
 8042e90:	4603      	mov	r3, r0
 8042e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8042e96:	e004      	b.n	8042ea2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042e98:	2301      	movs	r3, #1
 8042e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8042e9e:	e000      	b.n	8042ea2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8042ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042ea6:	2b00      	cmp	r3, #0
 8042ea8:	d10a      	bne.n	8042ec0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8042eaa:	4bbf      	ldr	r3, [pc, #764]	@ (80431a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8042eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8042eae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8042eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042eb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8042eb8:	4abb      	ldr	r2, [pc, #748]	@ (80431a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8042eba:	430b      	orrs	r3, r1
 8042ebc:	6553      	str	r3, [r2, #84]	@ 0x54
 8042ebe:	e003      	b.n	8042ec8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042ec4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8042ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042ed0:	f002 0302 	and.w	r3, r2, #2
 8042ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8042ed8:	2300      	movs	r3, #0
 8042eda:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8042ede:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8042ee2:	460b      	mov	r3, r1
 8042ee4:	4313      	orrs	r3, r2
 8042ee6:	d041      	beq.n	8042f6c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8042ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042eec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8042eee:	2b05      	cmp	r3, #5
 8042ef0:	d824      	bhi.n	8042f3c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8042ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8042ef8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8042ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042ef8:	08042f45 	.word	0x08042f45
 8042efc:	08042f11 	.word	0x08042f11
 8042f00:	08042f27 	.word	0x08042f27
 8042f04:	08042f45 	.word	0x08042f45
 8042f08:	08042f45 	.word	0x08042f45
 8042f0c:	08042f45 	.word	0x08042f45
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8042f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042f14:	3308      	adds	r3, #8
 8042f16:	2101      	movs	r1, #1
 8042f18:	4618      	mov	r0, r3
 8042f1a:	f000 fcb3 	bl	8043884 <RCCEx_PLL2_Config>
 8042f1e:	4603      	mov	r3, r0
 8042f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8042f24:	e00f      	b.n	8042f46 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8042f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042f2a:	3328      	adds	r3, #40	@ 0x28
 8042f2c:	2101      	movs	r1, #1
 8042f2e:	4618      	mov	r0, r3
 8042f30:	f000 fd5a 	bl	80439e8 <RCCEx_PLL3_Config>
 8042f34:	4603      	mov	r3, r0
 8042f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8042f3a:	e004      	b.n	8042f46 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042f3c:	2301      	movs	r3, #1
 8042f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8042f42:	e000      	b.n	8042f46 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8042f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042f4a:	2b00      	cmp	r3, #0
 8042f4c:	d10a      	bne.n	8042f64 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8042f4e:	4b96      	ldr	r3, [pc, #600]	@ (80431a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8042f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8042f52:	f023 0107 	bic.w	r1, r3, #7
 8042f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042f5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8042f5c:	4a92      	ldr	r2, [pc, #584]	@ (80431a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8042f5e:	430b      	orrs	r3, r1
 8042f60:	6553      	str	r3, [r2, #84]	@ 0x54
 8042f62:	e003      	b.n	8042f6c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042f68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8042f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042f74:	f002 0304 	and.w	r3, r2, #4
 8042f78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8042f7c:	2300      	movs	r3, #0
 8042f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8042f82:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8042f86:	460b      	mov	r3, r1
 8042f88:	4313      	orrs	r3, r2
 8042f8a:	d044      	beq.n	8043016 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8042f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8042f94:	2b05      	cmp	r3, #5
 8042f96:	d825      	bhi.n	8042fe4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8042f98:	a201      	add	r2, pc, #4	@ (adr r2, 8042fa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8042f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042f9e:	bf00      	nop
 8042fa0:	08042fed 	.word	0x08042fed
 8042fa4:	08042fb9 	.word	0x08042fb9
 8042fa8:	08042fcf 	.word	0x08042fcf
 8042fac:	08042fed 	.word	0x08042fed
 8042fb0:	08042fed 	.word	0x08042fed
 8042fb4:	08042fed 	.word	0x08042fed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8042fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042fbc:	3308      	adds	r3, #8
 8042fbe:	2101      	movs	r1, #1
 8042fc0:	4618      	mov	r0, r3
 8042fc2:	f000 fc5f 	bl	8043884 <RCCEx_PLL2_Config>
 8042fc6:	4603      	mov	r3, r0
 8042fc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8042fcc:	e00f      	b.n	8042fee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8042fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8042fd2:	3328      	adds	r3, #40	@ 0x28
 8042fd4:	2101      	movs	r1, #1
 8042fd6:	4618      	mov	r0, r3
 8042fd8:	f000 fd06 	bl	80439e8 <RCCEx_PLL3_Config>
 8042fdc:	4603      	mov	r3, r0
 8042fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8042fe2:	e004      	b.n	8042fee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042fe4:	2301      	movs	r3, #1
 8042fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8042fea:	e000      	b.n	8042fee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8042fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8042ff2:	2b00      	cmp	r3, #0
 8042ff4:	d10b      	bne.n	804300e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8042ff6:	4b6c      	ldr	r3, [pc, #432]	@ (80431a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8042ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8042ffa:	f023 0107 	bic.w	r1, r3, #7
 8042ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8043006:	4a68      	ldr	r2, [pc, #416]	@ (80431a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8043008:	430b      	orrs	r3, r1
 804300a:	6593      	str	r3, [r2, #88]	@ 0x58
 804300c:	e003      	b.n	8043016 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804300e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8043012:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8043016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804301e:	f002 0320 	and.w	r3, r2, #32
 8043022:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8043026:	2300      	movs	r3, #0
 8043028:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 804302c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8043030:	460b      	mov	r3, r1
 8043032:	4313      	orrs	r3, r2
 8043034:	d055      	beq.n	80430e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8043036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 804303e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8043042:	d033      	beq.n	80430ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8043044:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8043048:	d82c      	bhi.n	80430a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 804304a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 804304e:	d02f      	beq.n	80430b0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8043050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8043054:	d826      	bhi.n	80430a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8043056:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 804305a:	d02b      	beq.n	80430b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 804305c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8043060:	d820      	bhi.n	80430a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8043062:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8043066:	d012      	beq.n	804308e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8043068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 804306c:	d81a      	bhi.n	80430a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 804306e:	2b00      	cmp	r3, #0
 8043070:	d022      	beq.n	80430b8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8043072:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8043076:	d115      	bne.n	80430a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8043078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804307c:	3308      	adds	r3, #8
 804307e:	2100      	movs	r1, #0
 8043080:	4618      	mov	r0, r3
 8043082:	f000 fbff 	bl	8043884 <RCCEx_PLL2_Config>
 8043086:	4603      	mov	r3, r0
 8043088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 804308c:	e015      	b.n	80430ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 804308e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043092:	3328      	adds	r3, #40	@ 0x28
 8043094:	2102      	movs	r1, #2
 8043096:	4618      	mov	r0, r3
 8043098:	f000 fca6 	bl	80439e8 <RCCEx_PLL3_Config>
 804309c:	4603      	mov	r3, r0
 804309e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80430a2:	e00a      	b.n	80430ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80430a4:	2301      	movs	r3, #1
 80430a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80430aa:	e006      	b.n	80430ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80430ac:	bf00      	nop
 80430ae:	e004      	b.n	80430ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80430b0:	bf00      	nop
 80430b2:	e002      	b.n	80430ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80430b4:	bf00      	nop
 80430b6:	e000      	b.n	80430ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80430b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80430ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80430be:	2b00      	cmp	r3, #0
 80430c0:	d10b      	bne.n	80430da <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80430c2:	4b39      	ldr	r3, [pc, #228]	@ (80431a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80430c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80430c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80430ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80430ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80430d2:	4a35      	ldr	r2, [pc, #212]	@ (80431a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80430d4:	430b      	orrs	r3, r1
 80430d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80430d8:	e003      	b.n	80430e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80430da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80430de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80430e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80430e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80430ea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80430ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80430f2:	2300      	movs	r3, #0
 80430f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80430f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80430fc:	460b      	mov	r3, r1
 80430fe:	4313      	orrs	r3, r2
 8043100:	d058      	beq.n	80431b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8043102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043106:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 804310a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 804310e:	d033      	beq.n	8043178 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8043110:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8043114:	d82c      	bhi.n	8043170 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8043116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 804311a:	d02f      	beq.n	804317c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 804311c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8043120:	d826      	bhi.n	8043170 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8043122:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8043126:	d02b      	beq.n	8043180 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8043128:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 804312c:	d820      	bhi.n	8043170 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 804312e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8043132:	d012      	beq.n	804315a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8043134:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8043138:	d81a      	bhi.n	8043170 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 804313a:	2b00      	cmp	r3, #0
 804313c:	d022      	beq.n	8043184 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 804313e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8043142:	d115      	bne.n	8043170 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8043144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043148:	3308      	adds	r3, #8
 804314a:	2100      	movs	r1, #0
 804314c:	4618      	mov	r0, r3
 804314e:	f000 fb99 	bl	8043884 <RCCEx_PLL2_Config>
 8043152:	4603      	mov	r3, r0
 8043154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8043158:	e015      	b.n	8043186 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 804315a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804315e:	3328      	adds	r3, #40	@ 0x28
 8043160:	2102      	movs	r1, #2
 8043162:	4618      	mov	r0, r3
 8043164:	f000 fc40 	bl	80439e8 <RCCEx_PLL3_Config>
 8043168:	4603      	mov	r3, r0
 804316a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 804316e:	e00a      	b.n	8043186 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043170:	2301      	movs	r3, #1
 8043172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8043176:	e006      	b.n	8043186 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8043178:	bf00      	nop
 804317a:	e004      	b.n	8043186 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 804317c:	bf00      	nop
 804317e:	e002      	b.n	8043186 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8043180:	bf00      	nop
 8043182:	e000      	b.n	8043186 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8043184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 804318a:	2b00      	cmp	r3, #0
 804318c:	d10e      	bne.n	80431ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 804318e:	4b06      	ldr	r3, [pc, #24]	@ (80431a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8043190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8043192:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8043196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804319a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 804319e:	4a02      	ldr	r2, [pc, #8]	@ (80431a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80431a0:	430b      	orrs	r3, r1
 80431a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80431a4:	e006      	b.n	80431b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80431a6:	bf00      	nop
 80431a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80431ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80431b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80431b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80431b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80431bc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80431c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80431c4:	2300      	movs	r3, #0
 80431c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80431ca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80431ce:	460b      	mov	r3, r1
 80431d0:	4313      	orrs	r3, r2
 80431d2:	d055      	beq.n	8043280 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80431d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80431d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80431dc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80431e0:	d033      	beq.n	804324a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80431e2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80431e6:	d82c      	bhi.n	8043242 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80431e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80431ec:	d02f      	beq.n	804324e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80431ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80431f2:	d826      	bhi.n	8043242 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80431f4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80431f8:	d02b      	beq.n	8043252 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80431fa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80431fe:	d820      	bhi.n	8043242 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8043200:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8043204:	d012      	beq.n	804322c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8043206:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 804320a:	d81a      	bhi.n	8043242 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 804320c:	2b00      	cmp	r3, #0
 804320e:	d022      	beq.n	8043256 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8043210:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8043214:	d115      	bne.n	8043242 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8043216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804321a:	3308      	adds	r3, #8
 804321c:	2100      	movs	r1, #0
 804321e:	4618      	mov	r0, r3
 8043220:	f000 fb30 	bl	8043884 <RCCEx_PLL2_Config>
 8043224:	4603      	mov	r3, r0
 8043226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 804322a:	e015      	b.n	8043258 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 804322c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043230:	3328      	adds	r3, #40	@ 0x28
 8043232:	2102      	movs	r1, #2
 8043234:	4618      	mov	r0, r3
 8043236:	f000 fbd7 	bl	80439e8 <RCCEx_PLL3_Config>
 804323a:	4603      	mov	r3, r0
 804323c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8043240:	e00a      	b.n	8043258 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043242:	2301      	movs	r3, #1
 8043244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8043248:	e006      	b.n	8043258 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 804324a:	bf00      	nop
 804324c:	e004      	b.n	8043258 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 804324e:	bf00      	nop
 8043250:	e002      	b.n	8043258 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8043252:	bf00      	nop
 8043254:	e000      	b.n	8043258 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8043256:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 804325c:	2b00      	cmp	r3, #0
 804325e:	d10b      	bne.n	8043278 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8043260:	4ba1      	ldr	r3, [pc, #644]	@ (80434e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8043262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8043264:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8043268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804326c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8043270:	4a9d      	ldr	r2, [pc, #628]	@ (80434e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8043272:	430b      	orrs	r3, r1
 8043274:	6593      	str	r3, [r2, #88]	@ 0x58
 8043276:	e003      	b.n	8043280 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 804327c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8043280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043288:	f002 0308 	and.w	r3, r2, #8
 804328c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8043290:	2300      	movs	r3, #0
 8043292:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8043296:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 804329a:	460b      	mov	r3, r1
 804329c:	4313      	orrs	r3, r2
 804329e:	d01e      	beq.n	80432de <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80432a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80432a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80432a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80432ac:	d10c      	bne.n	80432c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80432ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80432b2:	3328      	adds	r3, #40	@ 0x28
 80432b4:	2102      	movs	r1, #2
 80432b6:	4618      	mov	r0, r3
 80432b8:	f000 fb96 	bl	80439e8 <RCCEx_PLL3_Config>
 80432bc:	4603      	mov	r3, r0
 80432be:	2b00      	cmp	r3, #0
 80432c0:	d002      	beq.n	80432c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80432c2:	2301      	movs	r3, #1
 80432c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80432c8:	4b87      	ldr	r3, [pc, #540]	@ (80434e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80432ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80432cc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80432d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80432d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80432d8:	4a83      	ldr	r2, [pc, #524]	@ (80434e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80432da:	430b      	orrs	r3, r1
 80432dc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80432de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80432e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80432e6:	f002 0310 	and.w	r3, r2, #16
 80432ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80432ee:	2300      	movs	r3, #0
 80432f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80432f4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80432f8:	460b      	mov	r3, r1
 80432fa:	4313      	orrs	r3, r2
 80432fc:	d01e      	beq.n	804333c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80432fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043302:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8043306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 804330a:	d10c      	bne.n	8043326 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 804330c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043310:	3328      	adds	r3, #40	@ 0x28
 8043312:	2102      	movs	r1, #2
 8043314:	4618      	mov	r0, r3
 8043316:	f000 fb67 	bl	80439e8 <RCCEx_PLL3_Config>
 804331a:	4603      	mov	r3, r0
 804331c:	2b00      	cmp	r3, #0
 804331e:	d002      	beq.n	8043326 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8043320:	2301      	movs	r3, #1
 8043322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8043326:	4b70      	ldr	r3, [pc, #448]	@ (80434e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8043328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 804332a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 804332e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043332:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8043336:	4a6c      	ldr	r2, [pc, #432]	@ (80434e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8043338:	430b      	orrs	r3, r1
 804333a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 804333c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043344:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8043348:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 804334c:	2300      	movs	r3, #0
 804334e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8043352:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8043356:	460b      	mov	r3, r1
 8043358:	4313      	orrs	r3, r2
 804335a:	d03e      	beq.n	80433da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 804335c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043360:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8043364:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8043368:	d022      	beq.n	80433b0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 804336a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 804336e:	d81b      	bhi.n	80433a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8043370:	2b00      	cmp	r3, #0
 8043372:	d003      	beq.n	804337c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8043374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8043378:	d00b      	beq.n	8043392 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 804337a:	e015      	b.n	80433a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804337c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043380:	3308      	adds	r3, #8
 8043382:	2100      	movs	r1, #0
 8043384:	4618      	mov	r0, r3
 8043386:	f000 fa7d 	bl	8043884 <RCCEx_PLL2_Config>
 804338a:	4603      	mov	r3, r0
 804338c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8043390:	e00f      	b.n	80433b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8043392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043396:	3328      	adds	r3, #40	@ 0x28
 8043398:	2102      	movs	r1, #2
 804339a:	4618      	mov	r0, r3
 804339c:	f000 fb24 	bl	80439e8 <RCCEx_PLL3_Config>
 80433a0:	4603      	mov	r3, r0
 80433a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80433a6:	e004      	b.n	80433b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80433a8:	2301      	movs	r3, #1
 80433aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80433ae:	e000      	b.n	80433b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80433b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80433b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80433b6:	2b00      	cmp	r3, #0
 80433b8:	d10b      	bne.n	80433d2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80433ba:	4b4b      	ldr	r3, [pc, #300]	@ (80434e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80433bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80433be:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80433c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80433c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80433ca:	4a47      	ldr	r2, [pc, #284]	@ (80434e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80433cc:	430b      	orrs	r3, r1
 80433ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80433d0:	e003      	b.n	80433da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80433d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80433d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80433da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80433de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80433e2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80433e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80433e8:	2300      	movs	r3, #0
 80433ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80433ec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80433f0:	460b      	mov	r3, r1
 80433f2:	4313      	orrs	r3, r2
 80433f4:	d03b      	beq.n	804346e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80433f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80433fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80433fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8043402:	d01f      	beq.n	8043444 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8043404:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8043408:	d818      	bhi.n	804343c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 804340a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 804340e:	d003      	beq.n	8043418 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8043410:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8043414:	d007      	beq.n	8043426 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8043416:	e011      	b.n	804343c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8043418:	4b33      	ldr	r3, [pc, #204]	@ (80434e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 804341a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804341c:	4a32      	ldr	r2, [pc, #200]	@ (80434e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 804341e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8043422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8043424:	e00f      	b.n	8043446 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8043426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804342a:	3328      	adds	r3, #40	@ 0x28
 804342c:	2101      	movs	r1, #1
 804342e:	4618      	mov	r0, r3
 8043430:	f000 fada 	bl	80439e8 <RCCEx_PLL3_Config>
 8043434:	4603      	mov	r3, r0
 8043436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 804343a:	e004      	b.n	8043446 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804343c:	2301      	movs	r3, #1
 804343e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8043442:	e000      	b.n	8043446 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8043444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 804344a:	2b00      	cmp	r3, #0
 804344c:	d10b      	bne.n	8043466 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 804344e:	4b26      	ldr	r3, [pc, #152]	@ (80434e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8043450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8043452:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8043456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 804345e:	4a22      	ldr	r2, [pc, #136]	@ (80434e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8043460:	430b      	orrs	r3, r1
 8043462:	6553      	str	r3, [r2, #84]	@ 0x54
 8043464:	e003      	b.n	804346e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 804346a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 804346e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043476:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 804347a:	673b      	str	r3, [r7, #112]	@ 0x70
 804347c:	2300      	movs	r3, #0
 804347e:	677b      	str	r3, [r7, #116]	@ 0x74
 8043480:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8043484:	460b      	mov	r3, r1
 8043486:	4313      	orrs	r3, r2
 8043488:	d034      	beq.n	80434f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 804348a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804348e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8043490:	2b00      	cmp	r3, #0
 8043492:	d003      	beq.n	804349c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8043494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8043498:	d007      	beq.n	80434aa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 804349a:	e011      	b.n	80434c0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804349c:	4b12      	ldr	r3, [pc, #72]	@ (80434e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 804349e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80434a0:	4a11      	ldr	r2, [pc, #68]	@ (80434e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80434a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80434a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80434a8:	e00e      	b.n	80434c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80434aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80434ae:	3308      	adds	r3, #8
 80434b0:	2102      	movs	r1, #2
 80434b2:	4618      	mov	r0, r3
 80434b4:	f000 f9e6 	bl	8043884 <RCCEx_PLL2_Config>
 80434b8:	4603      	mov	r3, r0
 80434ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80434be:	e003      	b.n	80434c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80434c0:	2301      	movs	r3, #1
 80434c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80434c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80434c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80434cc:	2b00      	cmp	r3, #0
 80434ce:	d10d      	bne.n	80434ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80434d0:	4b05      	ldr	r3, [pc, #20]	@ (80434e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80434d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80434d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80434d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80434dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80434de:	4a02      	ldr	r2, [pc, #8]	@ (80434e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80434e0:	430b      	orrs	r3, r1
 80434e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80434e4:	e006      	b.n	80434f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80434e6:	bf00      	nop
 80434e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80434ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80434f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80434f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80434f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80434fc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8043500:	66bb      	str	r3, [r7, #104]	@ 0x68
 8043502:	2300      	movs	r3, #0
 8043504:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8043506:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 804350a:	460b      	mov	r3, r1
 804350c:	4313      	orrs	r3, r2
 804350e:	d00c      	beq.n	804352a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8043510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043514:	3328      	adds	r3, #40	@ 0x28
 8043516:	2102      	movs	r1, #2
 8043518:	4618      	mov	r0, r3
 804351a:	f000 fa65 	bl	80439e8 <RCCEx_PLL3_Config>
 804351e:	4603      	mov	r3, r0
 8043520:	2b00      	cmp	r3, #0
 8043522:	d002      	beq.n	804352a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8043524:	2301      	movs	r3, #1
 8043526:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 804352a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043532:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8043536:	663b      	str	r3, [r7, #96]	@ 0x60
 8043538:	2300      	movs	r3, #0
 804353a:	667b      	str	r3, [r7, #100]	@ 0x64
 804353c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8043540:	460b      	mov	r3, r1
 8043542:	4313      	orrs	r3, r2
 8043544:	d038      	beq.n	80435b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8043546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804354a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 804354e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8043552:	d018      	beq.n	8043586 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8043554:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8043558:	d811      	bhi.n	804357e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 804355a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 804355e:	d014      	beq.n	804358a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8043560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8043564:	d80b      	bhi.n	804357e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8043566:	2b00      	cmp	r3, #0
 8043568:	d011      	beq.n	804358e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 804356a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 804356e:	d106      	bne.n	804357e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8043570:	4bc3      	ldr	r3, [pc, #780]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8043572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043574:	4ac2      	ldr	r2, [pc, #776]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8043576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 804357a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 804357c:	e008      	b.n	8043590 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804357e:	2301      	movs	r3, #1
 8043580:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8043584:	e004      	b.n	8043590 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8043586:	bf00      	nop
 8043588:	e002      	b.n	8043590 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 804358a:	bf00      	nop
 804358c:	e000      	b.n	8043590 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 804358e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8043594:	2b00      	cmp	r3, #0
 8043596:	d10b      	bne.n	80435b0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8043598:	4bb9      	ldr	r3, [pc, #740]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 804359a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804359c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80435a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80435a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80435a8:	4ab5      	ldr	r2, [pc, #724]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80435aa:	430b      	orrs	r3, r1
 80435ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80435ae:	e003      	b.n	80435b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80435b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80435b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80435b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80435bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80435c0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80435c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80435c6:	2300      	movs	r3, #0
 80435c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80435ca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80435ce:	460b      	mov	r3, r1
 80435d0:	4313      	orrs	r3, r2
 80435d2:	d009      	beq.n	80435e8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80435d4:	4baa      	ldr	r3, [pc, #680]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80435d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80435d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80435dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80435e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80435e2:	4aa7      	ldr	r2, [pc, #668]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80435e4:	430b      	orrs	r3, r1
 80435e6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80435e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80435ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80435f0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80435f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80435f6:	2300      	movs	r3, #0
 80435f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80435fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80435fe:	460b      	mov	r3, r1
 8043600:	4313      	orrs	r3, r2
 8043602:	d00a      	beq.n	804361a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8043604:	4b9e      	ldr	r3, [pc, #632]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8043606:	691b      	ldr	r3, [r3, #16]
 8043608:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 804360c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043610:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8043614:	4a9a      	ldr	r2, [pc, #616]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8043616:	430b      	orrs	r3, r1
 8043618:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 804361a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043622:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8043626:	64bb      	str	r3, [r7, #72]	@ 0x48
 8043628:	2300      	movs	r3, #0
 804362a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 804362c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8043630:	460b      	mov	r3, r1
 8043632:	4313      	orrs	r3, r2
 8043634:	d009      	beq.n	804364a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8043636:	4b92      	ldr	r3, [pc, #584]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8043638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804363a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 804363e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8043644:	4a8e      	ldr	r2, [pc, #568]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8043646:	430b      	orrs	r3, r1
 8043648:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 804364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043652:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8043656:	643b      	str	r3, [r7, #64]	@ 0x40
 8043658:	2300      	movs	r3, #0
 804365a:	647b      	str	r3, [r7, #68]	@ 0x44
 804365c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8043660:	460b      	mov	r3, r1
 8043662:	4313      	orrs	r3, r2
 8043664:	d00e      	beq.n	8043684 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8043666:	4b86      	ldr	r3, [pc, #536]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8043668:	691b      	ldr	r3, [r3, #16]
 804366a:	4a85      	ldr	r2, [pc, #532]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 804366c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8043670:	6113      	str	r3, [r2, #16]
 8043672:	4b83      	ldr	r3, [pc, #524]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8043674:	6919      	ldr	r1, [r3, #16]
 8043676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804367a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 804367e:	4a80      	ldr	r2, [pc, #512]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8043680:	430b      	orrs	r3, r1
 8043682:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8043684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043688:	e9d3 2300 	ldrd	r2, r3, [r3]
 804368c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8043690:	63bb      	str	r3, [r7, #56]	@ 0x38
 8043692:	2300      	movs	r3, #0
 8043694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8043696:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 804369a:	460b      	mov	r3, r1
 804369c:	4313      	orrs	r3, r2
 804369e:	d009      	beq.n	80436b4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80436a0:	4b77      	ldr	r3, [pc, #476]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80436a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80436a4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80436a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80436ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80436ae:	4a74      	ldr	r2, [pc, #464]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80436b0:	430b      	orrs	r3, r1
 80436b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80436b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80436b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80436bc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80436c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80436c2:	2300      	movs	r3, #0
 80436c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80436c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80436ca:	460b      	mov	r3, r1
 80436cc:	4313      	orrs	r3, r2
 80436ce:	d00a      	beq.n	80436e6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80436d0:	4b6b      	ldr	r3, [pc, #428]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80436d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80436d4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80436d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80436dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80436e0:	4a67      	ldr	r2, [pc, #412]	@ (8043880 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80436e2:	430b      	orrs	r3, r1
 80436e4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80436e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80436ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80436ee:	2100      	movs	r1, #0
 80436f0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80436f2:	f003 0301 	and.w	r3, r3, #1
 80436f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80436f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80436fc:	460b      	mov	r3, r1
 80436fe:	4313      	orrs	r3, r2
 8043700:	d011      	beq.n	8043726 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8043702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043706:	3308      	adds	r3, #8
 8043708:	2100      	movs	r1, #0
 804370a:	4618      	mov	r0, r3
 804370c:	f000 f8ba 	bl	8043884 <RCCEx_PLL2_Config>
 8043710:	4603      	mov	r3, r0
 8043712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8043716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 804371a:	2b00      	cmp	r3, #0
 804371c:	d003      	beq.n	8043726 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804371e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8043722:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8043726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804372a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804372e:	2100      	movs	r1, #0
 8043730:	6239      	str	r1, [r7, #32]
 8043732:	f003 0302 	and.w	r3, r3, #2
 8043736:	627b      	str	r3, [r7, #36]	@ 0x24
 8043738:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 804373c:	460b      	mov	r3, r1
 804373e:	4313      	orrs	r3, r2
 8043740:	d011      	beq.n	8043766 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8043742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043746:	3308      	adds	r3, #8
 8043748:	2101      	movs	r1, #1
 804374a:	4618      	mov	r0, r3
 804374c:	f000 f89a 	bl	8043884 <RCCEx_PLL2_Config>
 8043750:	4603      	mov	r3, r0
 8043752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8043756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 804375a:	2b00      	cmp	r3, #0
 804375c:	d003      	beq.n	8043766 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804375e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8043762:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8043766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804376e:	2100      	movs	r1, #0
 8043770:	61b9      	str	r1, [r7, #24]
 8043772:	f003 0304 	and.w	r3, r3, #4
 8043776:	61fb      	str	r3, [r7, #28]
 8043778:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 804377c:	460b      	mov	r3, r1
 804377e:	4313      	orrs	r3, r2
 8043780:	d011      	beq.n	80437a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8043782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043786:	3308      	adds	r3, #8
 8043788:	2102      	movs	r1, #2
 804378a:	4618      	mov	r0, r3
 804378c:	f000 f87a 	bl	8043884 <RCCEx_PLL2_Config>
 8043790:	4603      	mov	r3, r0
 8043792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8043796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 804379a:	2b00      	cmp	r3, #0
 804379c:	d003      	beq.n	80437a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804379e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80437a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80437a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80437aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80437ae:	2100      	movs	r1, #0
 80437b0:	6139      	str	r1, [r7, #16]
 80437b2:	f003 0308 	and.w	r3, r3, #8
 80437b6:	617b      	str	r3, [r7, #20]
 80437b8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80437bc:	460b      	mov	r3, r1
 80437be:	4313      	orrs	r3, r2
 80437c0:	d011      	beq.n	80437e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80437c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80437c6:	3328      	adds	r3, #40	@ 0x28
 80437c8:	2100      	movs	r1, #0
 80437ca:	4618      	mov	r0, r3
 80437cc:	f000 f90c 	bl	80439e8 <RCCEx_PLL3_Config>
 80437d0:	4603      	mov	r3, r0
 80437d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80437d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80437da:	2b00      	cmp	r3, #0
 80437dc:	d003      	beq.n	80437e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80437de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80437e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80437e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80437ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80437ee:	2100      	movs	r1, #0
 80437f0:	60b9      	str	r1, [r7, #8]
 80437f2:	f003 0310 	and.w	r3, r3, #16
 80437f6:	60fb      	str	r3, [r7, #12]
 80437f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80437fc:	460b      	mov	r3, r1
 80437fe:	4313      	orrs	r3, r2
 8043800:	d011      	beq.n	8043826 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8043802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043806:	3328      	adds	r3, #40	@ 0x28
 8043808:	2101      	movs	r1, #1
 804380a:	4618      	mov	r0, r3
 804380c:	f000 f8ec 	bl	80439e8 <RCCEx_PLL3_Config>
 8043810:	4603      	mov	r3, r0
 8043812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8043816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 804381a:	2b00      	cmp	r3, #0
 804381c:	d003      	beq.n	8043826 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804381e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8043822:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8043826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804382e:	2100      	movs	r1, #0
 8043830:	6039      	str	r1, [r7, #0]
 8043832:	f003 0320 	and.w	r3, r3, #32
 8043836:	607b      	str	r3, [r7, #4]
 8043838:	e9d7 1200 	ldrd	r1, r2, [r7]
 804383c:	460b      	mov	r3, r1
 804383e:	4313      	orrs	r3, r2
 8043840:	d011      	beq.n	8043866 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8043842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8043846:	3328      	adds	r3, #40	@ 0x28
 8043848:	2102      	movs	r1, #2
 804384a:	4618      	mov	r0, r3
 804384c:	f000 f8cc 	bl	80439e8 <RCCEx_PLL3_Config>
 8043850:	4603      	mov	r3, r0
 8043852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8043856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 804385a:	2b00      	cmp	r3, #0
 804385c:	d003      	beq.n	8043866 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804385e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8043862:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8043866:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 804386a:	2b00      	cmp	r3, #0
 804386c:	d101      	bne.n	8043872 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 804386e:	2300      	movs	r3, #0
 8043870:	e000      	b.n	8043874 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8043872:	2301      	movs	r3, #1
}
 8043874:	4618      	mov	r0, r3
 8043876:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 804387a:	46bd      	mov	sp, r7
 804387c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8043880:	58024400 	.word	0x58024400

08043884 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8043884:	b580      	push	{r7, lr}
 8043886:	b084      	sub	sp, #16
 8043888:	af00      	add	r7, sp, #0
 804388a:	6078      	str	r0, [r7, #4]
 804388c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 804388e:	2300      	movs	r3, #0
 8043890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8043892:	4b53      	ldr	r3, [pc, #332]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 8043894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043896:	f003 0303 	and.w	r3, r3, #3
 804389a:	2b03      	cmp	r3, #3
 804389c:	d101      	bne.n	80438a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 804389e:	2301      	movs	r3, #1
 80438a0:	e099      	b.n	80439d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80438a2:	4b4f      	ldr	r3, [pc, #316]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 80438a4:	681b      	ldr	r3, [r3, #0]
 80438a6:	4a4e      	ldr	r2, [pc, #312]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 80438a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80438ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80438ae:	f7fd fa5f 	bl	8040d70 <HAL_GetTick>
 80438b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80438b4:	e008      	b.n	80438c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80438b6:	f7fd fa5b 	bl	8040d70 <HAL_GetTick>
 80438ba:	4602      	mov	r2, r0
 80438bc:	68bb      	ldr	r3, [r7, #8]
 80438be:	1ad3      	subs	r3, r2, r3
 80438c0:	2b02      	cmp	r3, #2
 80438c2:	d901      	bls.n	80438c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80438c4:	2303      	movs	r3, #3
 80438c6:	e086      	b.n	80439d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80438c8:	4b45      	ldr	r3, [pc, #276]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 80438ca:	681b      	ldr	r3, [r3, #0]
 80438cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80438d0:	2b00      	cmp	r3, #0
 80438d2:	d1f0      	bne.n	80438b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80438d4:	4b42      	ldr	r3, [pc, #264]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 80438d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80438d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80438dc:	687b      	ldr	r3, [r7, #4]
 80438de:	681b      	ldr	r3, [r3, #0]
 80438e0:	031b      	lsls	r3, r3, #12
 80438e2:	493f      	ldr	r1, [pc, #252]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 80438e4:	4313      	orrs	r3, r2
 80438e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80438e8:	687b      	ldr	r3, [r7, #4]
 80438ea:	685b      	ldr	r3, [r3, #4]
 80438ec:	3b01      	subs	r3, #1
 80438ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80438f2:	687b      	ldr	r3, [r7, #4]
 80438f4:	689b      	ldr	r3, [r3, #8]
 80438f6:	3b01      	subs	r3, #1
 80438f8:	025b      	lsls	r3, r3, #9
 80438fa:	b29b      	uxth	r3, r3
 80438fc:	431a      	orrs	r2, r3
 80438fe:	687b      	ldr	r3, [r7, #4]
 8043900:	68db      	ldr	r3, [r3, #12]
 8043902:	3b01      	subs	r3, #1
 8043904:	041b      	lsls	r3, r3, #16
 8043906:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 804390a:	431a      	orrs	r2, r3
 804390c:	687b      	ldr	r3, [r7, #4]
 804390e:	691b      	ldr	r3, [r3, #16]
 8043910:	3b01      	subs	r3, #1
 8043912:	061b      	lsls	r3, r3, #24
 8043914:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8043918:	4931      	ldr	r1, [pc, #196]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 804391a:	4313      	orrs	r3, r2
 804391c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 804391e:	4b30      	ldr	r3, [pc, #192]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 8043920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043922:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8043926:	687b      	ldr	r3, [r7, #4]
 8043928:	695b      	ldr	r3, [r3, #20]
 804392a:	492d      	ldr	r1, [pc, #180]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 804392c:	4313      	orrs	r3, r2
 804392e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8043930:	4b2b      	ldr	r3, [pc, #172]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 8043932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043934:	f023 0220 	bic.w	r2, r3, #32
 8043938:	687b      	ldr	r3, [r7, #4]
 804393a:	699b      	ldr	r3, [r3, #24]
 804393c:	4928      	ldr	r1, [pc, #160]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 804393e:	4313      	orrs	r3, r2
 8043940:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8043942:	4b27      	ldr	r3, [pc, #156]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 8043944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043946:	4a26      	ldr	r2, [pc, #152]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 8043948:	f023 0310 	bic.w	r3, r3, #16
 804394c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 804394e:	4b24      	ldr	r3, [pc, #144]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 8043950:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8043952:	4b24      	ldr	r3, [pc, #144]	@ (80439e4 <RCCEx_PLL2_Config+0x160>)
 8043954:	4013      	ands	r3, r2
 8043956:	687a      	ldr	r2, [r7, #4]
 8043958:	69d2      	ldr	r2, [r2, #28]
 804395a:	00d2      	lsls	r2, r2, #3
 804395c:	4920      	ldr	r1, [pc, #128]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 804395e:	4313      	orrs	r3, r2
 8043960:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8043962:	4b1f      	ldr	r3, [pc, #124]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 8043964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043966:	4a1e      	ldr	r2, [pc, #120]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 8043968:	f043 0310 	orr.w	r3, r3, #16
 804396c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 804396e:	683b      	ldr	r3, [r7, #0]
 8043970:	2b00      	cmp	r3, #0
 8043972:	d106      	bne.n	8043982 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8043974:	4b1a      	ldr	r3, [pc, #104]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 8043976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043978:	4a19      	ldr	r2, [pc, #100]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 804397a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 804397e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8043980:	e00f      	b.n	80439a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8043982:	683b      	ldr	r3, [r7, #0]
 8043984:	2b01      	cmp	r3, #1
 8043986:	d106      	bne.n	8043996 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8043988:	4b15      	ldr	r3, [pc, #84]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 804398a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804398c:	4a14      	ldr	r2, [pc, #80]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 804398e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8043992:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8043994:	e005      	b.n	80439a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8043996:	4b12      	ldr	r3, [pc, #72]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 8043998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804399a:	4a11      	ldr	r2, [pc, #68]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 804399c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80439a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80439a2:	4b0f      	ldr	r3, [pc, #60]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 80439a4:	681b      	ldr	r3, [r3, #0]
 80439a6:	4a0e      	ldr	r2, [pc, #56]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 80439a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80439ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80439ae:	f7fd f9df 	bl	8040d70 <HAL_GetTick>
 80439b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80439b4:	e008      	b.n	80439c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80439b6:	f7fd f9db 	bl	8040d70 <HAL_GetTick>
 80439ba:	4602      	mov	r2, r0
 80439bc:	68bb      	ldr	r3, [r7, #8]
 80439be:	1ad3      	subs	r3, r2, r3
 80439c0:	2b02      	cmp	r3, #2
 80439c2:	d901      	bls.n	80439c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80439c4:	2303      	movs	r3, #3
 80439c6:	e006      	b.n	80439d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80439c8:	4b05      	ldr	r3, [pc, #20]	@ (80439e0 <RCCEx_PLL2_Config+0x15c>)
 80439ca:	681b      	ldr	r3, [r3, #0]
 80439cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80439d0:	2b00      	cmp	r3, #0
 80439d2:	d0f0      	beq.n	80439b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80439d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80439d6:	4618      	mov	r0, r3
 80439d8:	3710      	adds	r7, #16
 80439da:	46bd      	mov	sp, r7
 80439dc:	bd80      	pop	{r7, pc}
 80439de:	bf00      	nop
 80439e0:	58024400 	.word	0x58024400
 80439e4:	ffff0007 	.word	0xffff0007

080439e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80439e8:	b580      	push	{r7, lr}
 80439ea:	b084      	sub	sp, #16
 80439ec:	af00      	add	r7, sp, #0
 80439ee:	6078      	str	r0, [r7, #4]
 80439f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80439f2:	2300      	movs	r3, #0
 80439f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80439f6:	4b53      	ldr	r3, [pc, #332]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 80439f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80439fa:	f003 0303 	and.w	r3, r3, #3
 80439fe:	2b03      	cmp	r3, #3
 8043a00:	d101      	bne.n	8043a06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8043a02:	2301      	movs	r3, #1
 8043a04:	e099      	b.n	8043b3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8043a06:	4b4f      	ldr	r3, [pc, #316]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043a08:	681b      	ldr	r3, [r3, #0]
 8043a0a:	4a4e      	ldr	r2, [pc, #312]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043a0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8043a10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8043a12:	f7fd f9ad 	bl	8040d70 <HAL_GetTick>
 8043a16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8043a18:	e008      	b.n	8043a2c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8043a1a:	f7fd f9a9 	bl	8040d70 <HAL_GetTick>
 8043a1e:	4602      	mov	r2, r0
 8043a20:	68bb      	ldr	r3, [r7, #8]
 8043a22:	1ad3      	subs	r3, r2, r3
 8043a24:	2b02      	cmp	r3, #2
 8043a26:	d901      	bls.n	8043a2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8043a28:	2303      	movs	r3, #3
 8043a2a:	e086      	b.n	8043b3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8043a2c:	4b45      	ldr	r3, [pc, #276]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043a2e:	681b      	ldr	r3, [r3, #0]
 8043a30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8043a34:	2b00      	cmp	r3, #0
 8043a36:	d1f0      	bne.n	8043a1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8043a38:	4b42      	ldr	r3, [pc, #264]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043a3c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8043a40:	687b      	ldr	r3, [r7, #4]
 8043a42:	681b      	ldr	r3, [r3, #0]
 8043a44:	051b      	lsls	r3, r3, #20
 8043a46:	493f      	ldr	r1, [pc, #252]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043a48:	4313      	orrs	r3, r2
 8043a4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8043a4c:	687b      	ldr	r3, [r7, #4]
 8043a4e:	685b      	ldr	r3, [r3, #4]
 8043a50:	3b01      	subs	r3, #1
 8043a52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8043a56:	687b      	ldr	r3, [r7, #4]
 8043a58:	689b      	ldr	r3, [r3, #8]
 8043a5a:	3b01      	subs	r3, #1
 8043a5c:	025b      	lsls	r3, r3, #9
 8043a5e:	b29b      	uxth	r3, r3
 8043a60:	431a      	orrs	r2, r3
 8043a62:	687b      	ldr	r3, [r7, #4]
 8043a64:	68db      	ldr	r3, [r3, #12]
 8043a66:	3b01      	subs	r3, #1
 8043a68:	041b      	lsls	r3, r3, #16
 8043a6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8043a6e:	431a      	orrs	r2, r3
 8043a70:	687b      	ldr	r3, [r7, #4]
 8043a72:	691b      	ldr	r3, [r3, #16]
 8043a74:	3b01      	subs	r3, #1
 8043a76:	061b      	lsls	r3, r3, #24
 8043a78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8043a7c:	4931      	ldr	r1, [pc, #196]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043a7e:	4313      	orrs	r3, r2
 8043a80:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8043a82:	4b30      	ldr	r3, [pc, #192]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043a86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8043a8a:	687b      	ldr	r3, [r7, #4]
 8043a8c:	695b      	ldr	r3, [r3, #20]
 8043a8e:	492d      	ldr	r1, [pc, #180]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043a90:	4313      	orrs	r3, r2
 8043a92:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8043a94:	4b2b      	ldr	r3, [pc, #172]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043a98:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8043a9c:	687b      	ldr	r3, [r7, #4]
 8043a9e:	699b      	ldr	r3, [r3, #24]
 8043aa0:	4928      	ldr	r1, [pc, #160]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043aa2:	4313      	orrs	r3, r2
 8043aa4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8043aa6:	4b27      	ldr	r3, [pc, #156]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043aaa:	4a26      	ldr	r2, [pc, #152]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8043ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8043ab2:	4b24      	ldr	r3, [pc, #144]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8043ab6:	4b24      	ldr	r3, [pc, #144]	@ (8043b48 <RCCEx_PLL3_Config+0x160>)
 8043ab8:	4013      	ands	r3, r2
 8043aba:	687a      	ldr	r2, [r7, #4]
 8043abc:	69d2      	ldr	r2, [r2, #28]
 8043abe:	00d2      	lsls	r2, r2, #3
 8043ac0:	4920      	ldr	r1, [pc, #128]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043ac2:	4313      	orrs	r3, r2
 8043ac4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8043ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043aca:	4a1e      	ldr	r2, [pc, #120]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8043ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8043ad2:	683b      	ldr	r3, [r7, #0]
 8043ad4:	2b00      	cmp	r3, #0
 8043ad6:	d106      	bne.n	8043ae6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8043ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043adc:	4a19      	ldr	r2, [pc, #100]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043ade:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8043ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8043ae4:	e00f      	b.n	8043b06 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8043ae6:	683b      	ldr	r3, [r7, #0]
 8043ae8:	2b01      	cmp	r3, #1
 8043aea:	d106      	bne.n	8043afa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8043aec:	4b15      	ldr	r3, [pc, #84]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043af0:	4a14      	ldr	r2, [pc, #80]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043af2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8043af6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8043af8:	e005      	b.n	8043b06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8043afa:	4b12      	ldr	r3, [pc, #72]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043afe:	4a11      	ldr	r2, [pc, #68]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043b00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8043b04:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8043b06:	4b0f      	ldr	r3, [pc, #60]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043b08:	681b      	ldr	r3, [r3, #0]
 8043b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8043b10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8043b12:	f7fd f92d 	bl	8040d70 <HAL_GetTick>
 8043b16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8043b18:	e008      	b.n	8043b2c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8043b1a:	f7fd f929 	bl	8040d70 <HAL_GetTick>
 8043b1e:	4602      	mov	r2, r0
 8043b20:	68bb      	ldr	r3, [r7, #8]
 8043b22:	1ad3      	subs	r3, r2, r3
 8043b24:	2b02      	cmp	r3, #2
 8043b26:	d901      	bls.n	8043b2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8043b28:	2303      	movs	r3, #3
 8043b2a:	e006      	b.n	8043b3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8043b2c:	4b05      	ldr	r3, [pc, #20]	@ (8043b44 <RCCEx_PLL3_Config+0x15c>)
 8043b2e:	681b      	ldr	r3, [r3, #0]
 8043b30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8043b34:	2b00      	cmp	r3, #0
 8043b36:	d0f0      	beq.n	8043b1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8043b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8043b3a:	4618      	mov	r0, r3
 8043b3c:	3710      	adds	r7, #16
 8043b3e:	46bd      	mov	sp, r7
 8043b40:	bd80      	pop	{r7, pc}
 8043b42:	bf00      	nop
 8043b44:	58024400 	.word	0x58024400
 8043b48:	ffff0007 	.word	0xffff0007

08043b4c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8043b4c:	b480      	push	{r7}
 8043b4e:	b085      	sub	sp, #20
 8043b50:	af00      	add	r7, sp, #0
 8043b52:	60f8      	str	r0, [r7, #12]
 8043b54:	60b9      	str	r1, [r7, #8]
 8043b56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8043b58:	68fb      	ldr	r3, [r7, #12]
 8043b5a:	6819      	ldr	r1, [r3, #0]
 8043b5c:	68bb      	ldr	r3, [r7, #8]
 8043b5e:	fb03 f203 	mul.w	r2, r3, r3
 8043b62:	4613      	mov	r3, r2
 8043b64:	005b      	lsls	r3, r3, #1
 8043b66:	4413      	add	r3, r2
 8043b68:	43db      	mvns	r3, r3
 8043b6a:	ea01 0203 	and.w	r2, r1, r3
 8043b6e:	68bb      	ldr	r3, [r7, #8]
 8043b70:	fb03 f303 	mul.w	r3, r3, r3
 8043b74:	6879      	ldr	r1, [r7, #4]
 8043b76:	fb01 f303 	mul.w	r3, r1, r3
 8043b7a:	431a      	orrs	r2, r3
 8043b7c:	68fb      	ldr	r3, [r7, #12]
 8043b7e:	601a      	str	r2, [r3, #0]
}
 8043b80:	bf00      	nop
 8043b82:	3714      	adds	r7, #20
 8043b84:	46bd      	mov	sp, r7
 8043b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043b8a:	4770      	bx	lr

08043b8c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8043b8c:	b480      	push	{r7}
 8043b8e:	b085      	sub	sp, #20
 8043b90:	af00      	add	r7, sp, #0
 8043b92:	60f8      	str	r0, [r7, #12]
 8043b94:	60b9      	str	r1, [r7, #8]
 8043b96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8043b98:	68fb      	ldr	r3, [r7, #12]
 8043b9a:	685a      	ldr	r2, [r3, #4]
 8043b9c:	68bb      	ldr	r3, [r7, #8]
 8043b9e:	43db      	mvns	r3, r3
 8043ba0:	401a      	ands	r2, r3
 8043ba2:	68bb      	ldr	r3, [r7, #8]
 8043ba4:	6879      	ldr	r1, [r7, #4]
 8043ba6:	fb01 f303 	mul.w	r3, r1, r3
 8043baa:	431a      	orrs	r2, r3
 8043bac:	68fb      	ldr	r3, [r7, #12]
 8043bae:	605a      	str	r2, [r3, #4]
}
 8043bb0:	bf00      	nop
 8043bb2:	3714      	adds	r7, #20
 8043bb4:	46bd      	mov	sp, r7
 8043bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043bba:	4770      	bx	lr

08043bbc <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8043bbc:	b480      	push	{r7}
 8043bbe:	b085      	sub	sp, #20
 8043bc0:	af00      	add	r7, sp, #0
 8043bc2:	60f8      	str	r0, [r7, #12]
 8043bc4:	60b9      	str	r1, [r7, #8]
 8043bc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8043bc8:	68fb      	ldr	r3, [r7, #12]
 8043bca:	6899      	ldr	r1, [r3, #8]
 8043bcc:	68bb      	ldr	r3, [r7, #8]
 8043bce:	fb03 f203 	mul.w	r2, r3, r3
 8043bd2:	4613      	mov	r3, r2
 8043bd4:	005b      	lsls	r3, r3, #1
 8043bd6:	4413      	add	r3, r2
 8043bd8:	43db      	mvns	r3, r3
 8043bda:	ea01 0203 	and.w	r2, r1, r3
 8043bde:	68bb      	ldr	r3, [r7, #8]
 8043be0:	fb03 f303 	mul.w	r3, r3, r3
 8043be4:	6879      	ldr	r1, [r7, #4]
 8043be6:	fb01 f303 	mul.w	r3, r1, r3
 8043bea:	431a      	orrs	r2, r3
 8043bec:	68fb      	ldr	r3, [r7, #12]
 8043bee:	609a      	str	r2, [r3, #8]
}
 8043bf0:	bf00      	nop
 8043bf2:	3714      	adds	r7, #20
 8043bf4:	46bd      	mov	sp, r7
 8043bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043bfa:	4770      	bx	lr

08043bfc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8043bfc:	b480      	push	{r7}
 8043bfe:	b085      	sub	sp, #20
 8043c00:	af00      	add	r7, sp, #0
 8043c02:	60f8      	str	r0, [r7, #12]
 8043c04:	60b9      	str	r1, [r7, #8]
 8043c06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8043c08:	68fb      	ldr	r3, [r7, #12]
 8043c0a:	68d9      	ldr	r1, [r3, #12]
 8043c0c:	68bb      	ldr	r3, [r7, #8]
 8043c0e:	fb03 f203 	mul.w	r2, r3, r3
 8043c12:	4613      	mov	r3, r2
 8043c14:	005b      	lsls	r3, r3, #1
 8043c16:	4413      	add	r3, r2
 8043c18:	43db      	mvns	r3, r3
 8043c1a:	ea01 0203 	and.w	r2, r1, r3
 8043c1e:	68bb      	ldr	r3, [r7, #8]
 8043c20:	fb03 f303 	mul.w	r3, r3, r3
 8043c24:	6879      	ldr	r1, [r7, #4]
 8043c26:	fb01 f303 	mul.w	r3, r1, r3
 8043c2a:	431a      	orrs	r2, r3
 8043c2c:	68fb      	ldr	r3, [r7, #12]
 8043c2e:	60da      	str	r2, [r3, #12]
}
 8043c30:	bf00      	nop
 8043c32:	3714      	adds	r7, #20
 8043c34:	46bd      	mov	sp, r7
 8043c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043c3a:	4770      	bx	lr

08043c3c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8043c3c:	b480      	push	{r7}
 8043c3e:	b085      	sub	sp, #20
 8043c40:	af00      	add	r7, sp, #0
 8043c42:	60f8      	str	r0, [r7, #12]
 8043c44:	60b9      	str	r1, [r7, #8]
 8043c46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8043c48:	68fb      	ldr	r3, [r7, #12]
 8043c4a:	6a19      	ldr	r1, [r3, #32]
 8043c4c:	68bb      	ldr	r3, [r7, #8]
 8043c4e:	fb03 f303 	mul.w	r3, r3, r3
 8043c52:	68ba      	ldr	r2, [r7, #8]
 8043c54:	fb02 f303 	mul.w	r3, r2, r3
 8043c58:	68ba      	ldr	r2, [r7, #8]
 8043c5a:	fb03 f202 	mul.w	r2, r3, r2
 8043c5e:	4613      	mov	r3, r2
 8043c60:	011b      	lsls	r3, r3, #4
 8043c62:	1a9b      	subs	r3, r3, r2
 8043c64:	43db      	mvns	r3, r3
 8043c66:	ea01 0203 	and.w	r2, r1, r3
 8043c6a:	68bb      	ldr	r3, [r7, #8]
 8043c6c:	fb03 f303 	mul.w	r3, r3, r3
 8043c70:	68b9      	ldr	r1, [r7, #8]
 8043c72:	fb01 f303 	mul.w	r3, r1, r3
 8043c76:	68b9      	ldr	r1, [r7, #8]
 8043c78:	fb01 f303 	mul.w	r3, r1, r3
 8043c7c:	6879      	ldr	r1, [r7, #4]
 8043c7e:	fb01 f303 	mul.w	r3, r1, r3
 8043c82:	431a      	orrs	r2, r3
 8043c84:	68fb      	ldr	r3, [r7, #12]
 8043c86:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8043c88:	bf00      	nop
 8043c8a:	3714      	adds	r7, #20
 8043c8c:	46bd      	mov	sp, r7
 8043c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043c92:	4770      	bx	lr

08043c94 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8043c94:	b480      	push	{r7}
 8043c96:	b085      	sub	sp, #20
 8043c98:	af00      	add	r7, sp, #0
 8043c9a:	60f8      	str	r0, [r7, #12]
 8043c9c:	60b9      	str	r1, [r7, #8]
 8043c9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8043ca0:	68fb      	ldr	r3, [r7, #12]
 8043ca2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8043ca4:	68bb      	ldr	r3, [r7, #8]
 8043ca6:	0a1b      	lsrs	r3, r3, #8
 8043ca8:	68ba      	ldr	r2, [r7, #8]
 8043caa:	0a12      	lsrs	r2, r2, #8
 8043cac:	fb02 f303 	mul.w	r3, r2, r3
 8043cb0:	68ba      	ldr	r2, [r7, #8]
 8043cb2:	0a12      	lsrs	r2, r2, #8
 8043cb4:	fb02 f303 	mul.w	r3, r2, r3
 8043cb8:	68ba      	ldr	r2, [r7, #8]
 8043cba:	0a12      	lsrs	r2, r2, #8
 8043cbc:	fb03 f202 	mul.w	r2, r3, r2
 8043cc0:	4613      	mov	r3, r2
 8043cc2:	011b      	lsls	r3, r3, #4
 8043cc4:	1a9b      	subs	r3, r3, r2
 8043cc6:	43db      	mvns	r3, r3
 8043cc8:	ea01 0203 	and.w	r2, r1, r3
 8043ccc:	68bb      	ldr	r3, [r7, #8]
 8043cce:	0a1b      	lsrs	r3, r3, #8
 8043cd0:	68b9      	ldr	r1, [r7, #8]
 8043cd2:	0a09      	lsrs	r1, r1, #8
 8043cd4:	fb01 f303 	mul.w	r3, r1, r3
 8043cd8:	68b9      	ldr	r1, [r7, #8]
 8043cda:	0a09      	lsrs	r1, r1, #8
 8043cdc:	fb01 f303 	mul.w	r3, r1, r3
 8043ce0:	68b9      	ldr	r1, [r7, #8]
 8043ce2:	0a09      	lsrs	r1, r1, #8
 8043ce4:	fb01 f303 	mul.w	r3, r1, r3
 8043ce8:	6879      	ldr	r1, [r7, #4]
 8043cea:	fb01 f303 	mul.w	r3, r1, r3
 8043cee:	431a      	orrs	r2, r3
 8043cf0:	68fb      	ldr	r3, [r7, #12]
 8043cf2:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8043cf4:	bf00      	nop
 8043cf6:	3714      	adds	r7, #20
 8043cf8:	46bd      	mov	sp, r7
 8043cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043cfe:	4770      	bx	lr

08043d00 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8043d00:	b580      	push	{r7, lr}
 8043d02:	b088      	sub	sp, #32
 8043d04:	af00      	add	r7, sp, #0
 8043d06:	6078      	str	r0, [r7, #4]
 8043d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8043d0a:	683b      	ldr	r3, [r7, #0]
 8043d0c:	681b      	ldr	r3, [r3, #0]
 8043d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8043d10:	693b      	ldr	r3, [r7, #16]
 8043d12:	fa93 f3a3 	rbit	r3, r3
 8043d16:	60fb      	str	r3, [r7, #12]
  return result;
 8043d18:	68fb      	ldr	r3, [r7, #12]
 8043d1a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8043d1c:	697b      	ldr	r3, [r7, #20]
 8043d1e:	2b00      	cmp	r3, #0
 8043d20:	d101      	bne.n	8043d26 <LL_GPIO_Init+0x26>
    return 32U;
 8043d22:	2320      	movs	r3, #32
 8043d24:	e003      	b.n	8043d2e <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8043d26:	697b      	ldr	r3, [r7, #20]
 8043d28:	fab3 f383 	clz	r3, r3
 8043d2c:	b2db      	uxtb	r3, r3
 8043d2e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8043d30:	e048      	b.n	8043dc4 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8043d32:	683b      	ldr	r3, [r7, #0]
 8043d34:	681a      	ldr	r2, [r3, #0]
 8043d36:	2101      	movs	r1, #1
 8043d38:	69fb      	ldr	r3, [r7, #28]
 8043d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8043d3e:	4013      	ands	r3, r2
 8043d40:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 8043d42:	69bb      	ldr	r3, [r7, #24]
 8043d44:	2b00      	cmp	r3, #0
 8043d46:	d03a      	beq.n	8043dbe <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8043d48:	683b      	ldr	r3, [r7, #0]
 8043d4a:	685b      	ldr	r3, [r3, #4]
 8043d4c:	2b01      	cmp	r3, #1
 8043d4e:	d003      	beq.n	8043d58 <LL_GPIO_Init+0x58>
 8043d50:	683b      	ldr	r3, [r7, #0]
 8043d52:	685b      	ldr	r3, [r3, #4]
 8043d54:	2b02      	cmp	r3, #2
 8043d56:	d10e      	bne.n	8043d76 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8043d58:	683b      	ldr	r3, [r7, #0]
 8043d5a:	689b      	ldr	r3, [r3, #8]
 8043d5c:	461a      	mov	r2, r3
 8043d5e:	69b9      	ldr	r1, [r7, #24]
 8043d60:	6878      	ldr	r0, [r7, #4]
 8043d62:	f7ff ff2b 	bl	8043bbc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8043d66:	683b      	ldr	r3, [r7, #0]
 8043d68:	6819      	ldr	r1, [r3, #0]
 8043d6a:	683b      	ldr	r3, [r7, #0]
 8043d6c:	68db      	ldr	r3, [r3, #12]
 8043d6e:	461a      	mov	r2, r3
 8043d70:	6878      	ldr	r0, [r7, #4]
 8043d72:	f7ff ff0b 	bl	8043b8c <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8043d76:	683b      	ldr	r3, [r7, #0]
 8043d78:	691b      	ldr	r3, [r3, #16]
 8043d7a:	461a      	mov	r2, r3
 8043d7c:	69b9      	ldr	r1, [r7, #24]
 8043d7e:	6878      	ldr	r0, [r7, #4]
 8043d80:	f7ff ff3c 	bl	8043bfc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8043d84:	683b      	ldr	r3, [r7, #0]
 8043d86:	685b      	ldr	r3, [r3, #4]
 8043d88:	2b02      	cmp	r3, #2
 8043d8a:	d111      	bne.n	8043db0 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8043d8c:	69bb      	ldr	r3, [r7, #24]
 8043d8e:	2bff      	cmp	r3, #255	@ 0xff
 8043d90:	d807      	bhi.n	8043da2 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8043d92:	683b      	ldr	r3, [r7, #0]
 8043d94:	695b      	ldr	r3, [r3, #20]
 8043d96:	461a      	mov	r2, r3
 8043d98:	69b9      	ldr	r1, [r7, #24]
 8043d9a:	6878      	ldr	r0, [r7, #4]
 8043d9c:	f7ff ff4e 	bl	8043c3c <LL_GPIO_SetAFPin_0_7>
 8043da0:	e006      	b.n	8043db0 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8043da2:	683b      	ldr	r3, [r7, #0]
 8043da4:	695b      	ldr	r3, [r3, #20]
 8043da6:	461a      	mov	r2, r3
 8043da8:	69b9      	ldr	r1, [r7, #24]
 8043daa:	6878      	ldr	r0, [r7, #4]
 8043dac:	f7ff ff72 	bl	8043c94 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8043db0:	683b      	ldr	r3, [r7, #0]
 8043db2:	685b      	ldr	r3, [r3, #4]
 8043db4:	461a      	mov	r2, r3
 8043db6:	69b9      	ldr	r1, [r7, #24]
 8043db8:	6878      	ldr	r0, [r7, #4]
 8043dba:	f7ff fec7 	bl	8043b4c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8043dbe:	69fb      	ldr	r3, [r7, #28]
 8043dc0:	3301      	adds	r3, #1
 8043dc2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8043dc4:	683b      	ldr	r3, [r7, #0]
 8043dc6:	681a      	ldr	r2, [r3, #0]
 8043dc8:	69fb      	ldr	r3, [r7, #28]
 8043dca:	fa22 f303 	lsr.w	r3, r2, r3
 8043dce:	2b00      	cmp	r3, #0
 8043dd0:	d1af      	bne.n	8043d32 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8043dd2:	2300      	movs	r3, #0
}
 8043dd4:	4618      	mov	r0, r3
 8043dd6:	3720      	adds	r7, #32
 8043dd8:	46bd      	mov	sp, r7
 8043dda:	bd80      	pop	{r7, pc}

08043ddc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8043ddc:	b480      	push	{r7}
 8043dde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8043de0:	4b07      	ldr	r3, [pc, #28]	@ (8043e00 <LL_RCC_HSE_IsReady+0x24>)
 8043de2:	681b      	ldr	r3, [r3, #0]
 8043de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8043de8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8043dec:	d101      	bne.n	8043df2 <LL_RCC_HSE_IsReady+0x16>
 8043dee:	2301      	movs	r3, #1
 8043df0:	e000      	b.n	8043df4 <LL_RCC_HSE_IsReady+0x18>
 8043df2:	2300      	movs	r3, #0
}
 8043df4:	4618      	mov	r0, r3
 8043df6:	46bd      	mov	sp, r7
 8043df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043dfc:	4770      	bx	lr
 8043dfe:	bf00      	nop
 8043e00:	58024400 	.word	0x58024400

08043e04 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8043e04:	b480      	push	{r7}
 8043e06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8043e08:	4b06      	ldr	r3, [pc, #24]	@ (8043e24 <LL_RCC_HSI_IsReady+0x20>)
 8043e0a:	681b      	ldr	r3, [r3, #0]
 8043e0c:	f003 0304 	and.w	r3, r3, #4
 8043e10:	2b04      	cmp	r3, #4
 8043e12:	d101      	bne.n	8043e18 <LL_RCC_HSI_IsReady+0x14>
 8043e14:	2301      	movs	r3, #1
 8043e16:	e000      	b.n	8043e1a <LL_RCC_HSI_IsReady+0x16>
 8043e18:	2300      	movs	r3, #0
}
 8043e1a:	4618      	mov	r0, r3
 8043e1c:	46bd      	mov	sp, r7
 8043e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e22:	4770      	bx	lr
 8043e24:	58024400 	.word	0x58024400

08043e28 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 8043e28:	b480      	push	{r7}
 8043e2a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8043e2c:	4b04      	ldr	r3, [pc, #16]	@ (8043e40 <LL_RCC_HSI_GetDivider+0x18>)
 8043e2e:	681b      	ldr	r3, [r3, #0]
 8043e30:	f003 0318 	and.w	r3, r3, #24
}
 8043e34:	4618      	mov	r0, r3
 8043e36:	46bd      	mov	sp, r7
 8043e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e3c:	4770      	bx	lr
 8043e3e:	bf00      	nop
 8043e40:	58024400 	.word	0x58024400

08043e44 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 8043e44:	b480      	push	{r7}
 8043e46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 8043e48:	4b07      	ldr	r3, [pc, #28]	@ (8043e68 <LL_RCC_CSI_IsReady+0x24>)
 8043e4a:	681b      	ldr	r3, [r3, #0]
 8043e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8043e50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8043e54:	d101      	bne.n	8043e5a <LL_RCC_CSI_IsReady+0x16>
 8043e56:	2301      	movs	r3, #1
 8043e58:	e000      	b.n	8043e5c <LL_RCC_CSI_IsReady+0x18>
 8043e5a:	2300      	movs	r3, #0
}
 8043e5c:	4618      	mov	r0, r3
 8043e5e:	46bd      	mov	sp, r7
 8043e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e64:	4770      	bx	lr
 8043e66:	bf00      	nop
 8043e68:	58024400 	.word	0x58024400

08043e6c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8043e6c:	b480      	push	{r7}
 8043e6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8043e70:	4b06      	ldr	r3, [pc, #24]	@ (8043e8c <LL_RCC_LSE_IsReady+0x20>)
 8043e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043e74:	f003 0302 	and.w	r3, r3, #2
 8043e78:	2b02      	cmp	r3, #2
 8043e7a:	d101      	bne.n	8043e80 <LL_RCC_LSE_IsReady+0x14>
 8043e7c:	2301      	movs	r3, #1
 8043e7e:	e000      	b.n	8043e82 <LL_RCC_LSE_IsReady+0x16>
 8043e80:	2300      	movs	r3, #0
}
 8043e82:	4618      	mov	r0, r3
 8043e84:	46bd      	mov	sp, r7
 8043e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e8a:	4770      	bx	lr
 8043e8c:	58024400 	.word	0x58024400

08043e90 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8043e90:	b480      	push	{r7}
 8043e92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8043e94:	4b04      	ldr	r3, [pc, #16]	@ (8043ea8 <LL_RCC_GetSysClkSource+0x18>)
 8043e96:	691b      	ldr	r3, [r3, #16]
 8043e98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 8043e9c:	4618      	mov	r0, r3
 8043e9e:	46bd      	mov	sp, r7
 8043ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043ea4:	4770      	bx	lr
 8043ea6:	bf00      	nop
 8043ea8:	58024400 	.word	0x58024400

08043eac <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 8043eac:	b480      	push	{r7}
 8043eae:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 8043eb0:	4b04      	ldr	r3, [pc, #16]	@ (8043ec4 <LL_RCC_GetSysPrescaler+0x18>)
 8043eb2:	699b      	ldr	r3, [r3, #24]
 8043eb4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 8043eb8:	4618      	mov	r0, r3
 8043eba:	46bd      	mov	sp, r7
 8043ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043ec0:	4770      	bx	lr
 8043ec2:	bf00      	nop
 8043ec4:	58024400 	.word	0x58024400

08043ec8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8043ec8:	b480      	push	{r7}
 8043eca:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8043ecc:	4b04      	ldr	r3, [pc, #16]	@ (8043ee0 <LL_RCC_GetAHBPrescaler+0x18>)
 8043ece:	699b      	ldr	r3, [r3, #24]
 8043ed0:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 8043ed4:	4618      	mov	r0, r3
 8043ed6:	46bd      	mov	sp, r7
 8043ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043edc:	4770      	bx	lr
 8043ede:	bf00      	nop
 8043ee0:	58024400 	.word	0x58024400

08043ee4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8043ee4:	b480      	push	{r7}
 8043ee6:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 8043ee8:	4b04      	ldr	r3, [pc, #16]	@ (8043efc <LL_RCC_GetAPB1Prescaler+0x18>)
 8043eea:	69db      	ldr	r3, [r3, #28]
 8043eec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 8043ef0:	4618      	mov	r0, r3
 8043ef2:	46bd      	mov	sp, r7
 8043ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043ef8:	4770      	bx	lr
 8043efa:	bf00      	nop
 8043efc:	58024400 	.word	0x58024400

08043f00 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8043f00:	b480      	push	{r7}
 8043f02:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8043f04:	4b04      	ldr	r3, [pc, #16]	@ (8043f18 <LL_RCC_GetAPB2Prescaler+0x18>)
 8043f06:	69db      	ldr	r3, [r3, #28]
 8043f08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 8043f0c:	4618      	mov	r0, r3
 8043f0e:	46bd      	mov	sp, r7
 8043f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f14:	4770      	bx	lr
 8043f16:	bf00      	nop
 8043f18:	58024400 	.word	0x58024400

08043f1c <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 8043f1c:	b480      	push	{r7}
 8043f1e:	b085      	sub	sp, #20
 8043f20:	af00      	add	r7, sp, #0
 8043f22:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 8043f24:	687b      	ldr	r3, [r7, #4]
 8043f26:	b2da      	uxtb	r2, r3
 8043f28:	4b0e      	ldr	r3, [pc, #56]	@ (8043f64 <LL_RCC_GetClockSource+0x48>)
 8043f2a:	4413      	add	r3, r2
 8043f2c:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8043f2e:	68fb      	ldr	r3, [r7, #12]
 8043f30:	681a      	ldr	r2, [r3, #0]
 8043f32:	687b      	ldr	r3, [r7, #4]
 8043f34:	0e19      	lsrs	r1, r3, #24
 8043f36:	687b      	ldr	r3, [r7, #4]
 8043f38:	0a1b      	lsrs	r3, r3, #8
 8043f3a:	f003 031f 	and.w	r3, r3, #31
 8043f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8043f42:	401a      	ands	r2, r3
 8043f44:	687b      	ldr	r3, [r7, #4]
 8043f46:	0a1b      	lsrs	r3, r3, #8
 8043f48:	f003 031f 	and.w	r3, r3, #31
 8043f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8043f50:	041a      	lsls	r2, r3, #16
 8043f52:	687b      	ldr	r3, [r7, #4]
 8043f54:	4313      	orrs	r3, r2
}
 8043f56:	4618      	mov	r0, r3
 8043f58:	3714      	adds	r7, #20
 8043f5a:	46bd      	mov	sp, r7
 8043f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f60:	4770      	bx	lr
 8043f62:	bf00      	nop
 8043f64:	5802444c 	.word	0x5802444c

08043f68 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 8043f68:	b580      	push	{r7, lr}
 8043f6a:	b082      	sub	sp, #8
 8043f6c:	af00      	add	r7, sp, #0
 8043f6e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 8043f70:	6878      	ldr	r0, [r7, #4]
 8043f72:	f7ff ffd3 	bl	8043f1c <LL_RCC_GetClockSource>
 8043f76:	4603      	mov	r3, r0
}
 8043f78:	4618      	mov	r0, r3
 8043f7a:	3708      	adds	r7, #8
 8043f7c:	46bd      	mov	sp, r7
 8043f7e:	bd80      	pop	{r7, pc}

08043f80 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 8043f80:	b480      	push	{r7}
 8043f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8043f84:	4b04      	ldr	r3, [pc, #16]	@ (8043f98 <LL_RCC_PLL_GetSource+0x18>)
 8043f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043f88:	f003 0303 	and.w	r3, r3, #3
}
 8043f8c:	4618      	mov	r0, r3
 8043f8e:	46bd      	mov	sp, r7
 8043f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f94:	4770      	bx	lr
 8043f96:	bf00      	nop
 8043f98:	58024400 	.word	0x58024400

08043f9c <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 8043f9c:	b480      	push	{r7}
 8043f9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 8043fa0:	4b07      	ldr	r3, [pc, #28]	@ (8043fc0 <LL_RCC_PLL1P_IsEnabled+0x24>)
 8043fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8043fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8043fac:	d101      	bne.n	8043fb2 <LL_RCC_PLL1P_IsEnabled+0x16>
 8043fae:	2301      	movs	r3, #1
 8043fb0:	e000      	b.n	8043fb4 <LL_RCC_PLL1P_IsEnabled+0x18>
 8043fb2:	2300      	movs	r3, #0
}
 8043fb4:	4618      	mov	r0, r3
 8043fb6:	46bd      	mov	sp, r7
 8043fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043fbc:	4770      	bx	lr
 8043fbe:	bf00      	nop
 8043fc0:	58024400 	.word	0x58024400

08043fc4 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 8043fc4:	b480      	push	{r7}
 8043fc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 8043fc8:	4b07      	ldr	r3, [pc, #28]	@ (8043fe8 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 8043fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8043fd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8043fd4:	d101      	bne.n	8043fda <LL_RCC_PLL1Q_IsEnabled+0x16>
 8043fd6:	2301      	movs	r3, #1
 8043fd8:	e000      	b.n	8043fdc <LL_RCC_PLL1Q_IsEnabled+0x18>
 8043fda:	2300      	movs	r3, #0
}
 8043fdc:	4618      	mov	r0, r3
 8043fde:	46bd      	mov	sp, r7
 8043fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043fe4:	4770      	bx	lr
 8043fe6:	bf00      	nop
 8043fe8:	58024400 	.word	0x58024400

08043fec <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 8043fec:	b480      	push	{r7}
 8043fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 8043ff0:	4b07      	ldr	r3, [pc, #28]	@ (8044010 <LL_RCC_PLL1R_IsEnabled+0x24>)
 8043ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043ff4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8043ff8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8043ffc:	d101      	bne.n	8044002 <LL_RCC_PLL1R_IsEnabled+0x16>
 8043ffe:	2301      	movs	r3, #1
 8044000:	e000      	b.n	8044004 <LL_RCC_PLL1R_IsEnabled+0x18>
 8044002:	2300      	movs	r3, #0
}
 8044004:	4618      	mov	r0, r3
 8044006:	46bd      	mov	sp, r7
 8044008:	f85d 7b04 	ldr.w	r7, [sp], #4
 804400c:	4770      	bx	lr
 804400e:	bf00      	nop
 8044010:	58024400 	.word	0x58024400

08044014 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 8044014:	b480      	push	{r7}
 8044016:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 8044018:	4b06      	ldr	r3, [pc, #24]	@ (8044034 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 804401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804401c:	f003 0301 	and.w	r3, r3, #1
 8044020:	2b01      	cmp	r3, #1
 8044022:	d101      	bne.n	8044028 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 8044024:	2301      	movs	r3, #1
 8044026:	e000      	b.n	804402a <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 8044028:	2300      	movs	r3, #0
}
 804402a:	4618      	mov	r0, r3
 804402c:	46bd      	mov	sp, r7
 804402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044032:	4770      	bx	lr
 8044034:	58024400 	.word	0x58024400

08044038 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 8044038:	b480      	push	{r7}
 804403a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 804403c:	4b04      	ldr	r3, [pc, #16]	@ (8044050 <LL_RCC_PLL1_GetN+0x18>)
 804403e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8044040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8044044:	3301      	adds	r3, #1
}
 8044046:	4618      	mov	r0, r3
 8044048:	46bd      	mov	sp, r7
 804404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804404e:	4770      	bx	lr
 8044050:	58024400 	.word	0x58024400

08044054 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 8044054:	b480      	push	{r7}
 8044056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 8044058:	4b04      	ldr	r3, [pc, #16]	@ (804406c <LL_RCC_PLL1_GetM+0x18>)
 804405a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804405c:	091b      	lsrs	r3, r3, #4
 804405e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8044062:	4618      	mov	r0, r3
 8044064:	46bd      	mov	sp, r7
 8044066:	f85d 7b04 	ldr.w	r7, [sp], #4
 804406a:	4770      	bx	lr
 804406c:	58024400 	.word	0x58024400

08044070 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 8044070:	b480      	push	{r7}
 8044072:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 8044074:	4b05      	ldr	r3, [pc, #20]	@ (804408c <LL_RCC_PLL1_GetP+0x1c>)
 8044076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8044078:	0a5b      	lsrs	r3, r3, #9
 804407a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 804407e:	3301      	adds	r3, #1
}
 8044080:	4618      	mov	r0, r3
 8044082:	46bd      	mov	sp, r7
 8044084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044088:	4770      	bx	lr
 804408a:	bf00      	nop
 804408c:	58024400 	.word	0x58024400

08044090 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 8044090:	b480      	push	{r7}
 8044092:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 8044094:	4b05      	ldr	r3, [pc, #20]	@ (80440ac <LL_RCC_PLL1_GetQ+0x1c>)
 8044096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8044098:	0c1b      	lsrs	r3, r3, #16
 804409a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 804409e:	3301      	adds	r3, #1
}
 80440a0:	4618      	mov	r0, r3
 80440a2:	46bd      	mov	sp, r7
 80440a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80440a8:	4770      	bx	lr
 80440aa:	bf00      	nop
 80440ac:	58024400 	.word	0x58024400

080440b0 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 80440b0:	b480      	push	{r7}
 80440b2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 80440b4:	4b05      	ldr	r3, [pc, #20]	@ (80440cc <LL_RCC_PLL1_GetR+0x1c>)
 80440b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80440b8:	0e1b      	lsrs	r3, r3, #24
 80440ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80440be:	3301      	adds	r3, #1
}
 80440c0:	4618      	mov	r0, r3
 80440c2:	46bd      	mov	sp, r7
 80440c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80440c8:	4770      	bx	lr
 80440ca:	bf00      	nop
 80440cc:	58024400 	.word	0x58024400

080440d0 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 80440d0:	b480      	push	{r7}
 80440d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 80440d4:	4b04      	ldr	r3, [pc, #16]	@ (80440e8 <LL_RCC_PLL1_GetFRACN+0x18>)
 80440d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80440d8:	08db      	lsrs	r3, r3, #3
 80440da:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 80440de:	4618      	mov	r0, r3
 80440e0:	46bd      	mov	sp, r7
 80440e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80440e6:	4770      	bx	lr
 80440e8:	58024400 	.word	0x58024400

080440ec <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 80440ec:	b480      	push	{r7}
 80440ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 80440f0:	4b07      	ldr	r3, [pc, #28]	@ (8044110 <LL_RCC_PLL2_IsReady+0x24>)
 80440f2:	681b      	ldr	r3, [r3, #0]
 80440f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80440f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80440fc:	d101      	bne.n	8044102 <LL_RCC_PLL2_IsReady+0x16>
 80440fe:	2301      	movs	r3, #1
 8044100:	e000      	b.n	8044104 <LL_RCC_PLL2_IsReady+0x18>
 8044102:	2300      	movs	r3, #0
}
 8044104:	4618      	mov	r0, r3
 8044106:	46bd      	mov	sp, r7
 8044108:	f85d 7b04 	ldr.w	r7, [sp], #4
 804410c:	4770      	bx	lr
 804410e:	bf00      	nop
 8044110:	58024400 	.word	0x58024400

08044114 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 8044114:	b480      	push	{r7}
 8044116:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 8044118:	4b07      	ldr	r3, [pc, #28]	@ (8044138 <LL_RCC_PLL2P_IsEnabled+0x24>)
 804411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804411c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8044120:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8044124:	d101      	bne.n	804412a <LL_RCC_PLL2P_IsEnabled+0x16>
 8044126:	2301      	movs	r3, #1
 8044128:	e000      	b.n	804412c <LL_RCC_PLL2P_IsEnabled+0x18>
 804412a:	2300      	movs	r3, #0
}
 804412c:	4618      	mov	r0, r3
 804412e:	46bd      	mov	sp, r7
 8044130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044134:	4770      	bx	lr
 8044136:	bf00      	nop
 8044138:	58024400 	.word	0x58024400

0804413c <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 804413c:	b480      	push	{r7}
 804413e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 8044140:	4b07      	ldr	r3, [pc, #28]	@ (8044160 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 8044142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044144:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8044148:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 804414c:	d101      	bne.n	8044152 <LL_RCC_PLL2Q_IsEnabled+0x16>
 804414e:	2301      	movs	r3, #1
 8044150:	e000      	b.n	8044154 <LL_RCC_PLL2Q_IsEnabled+0x18>
 8044152:	2300      	movs	r3, #0
}
 8044154:	4618      	mov	r0, r3
 8044156:	46bd      	mov	sp, r7
 8044158:	f85d 7b04 	ldr.w	r7, [sp], #4
 804415c:	4770      	bx	lr
 804415e:	bf00      	nop
 8044160:	58024400 	.word	0x58024400

08044164 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 8044164:	b480      	push	{r7}
 8044166:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 8044168:	4b07      	ldr	r3, [pc, #28]	@ (8044188 <LL_RCC_PLL2R_IsEnabled+0x24>)
 804416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804416c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8044170:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8044174:	d101      	bne.n	804417a <LL_RCC_PLL2R_IsEnabled+0x16>
 8044176:	2301      	movs	r3, #1
 8044178:	e000      	b.n	804417c <LL_RCC_PLL2R_IsEnabled+0x18>
 804417a:	2300      	movs	r3, #0
}
 804417c:	4618      	mov	r0, r3
 804417e:	46bd      	mov	sp, r7
 8044180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044184:	4770      	bx	lr
 8044186:	bf00      	nop
 8044188:	58024400 	.word	0x58024400

0804418c <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 804418c:	b480      	push	{r7}
 804418e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 8044190:	4b06      	ldr	r3, [pc, #24]	@ (80441ac <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 8044192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044194:	f003 0310 	and.w	r3, r3, #16
 8044198:	2b10      	cmp	r3, #16
 804419a:	d101      	bne.n	80441a0 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 804419c:	2301      	movs	r3, #1
 804419e:	e000      	b.n	80441a2 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 80441a0:	2300      	movs	r3, #0
}
 80441a2:	4618      	mov	r0, r3
 80441a4:	46bd      	mov	sp, r7
 80441a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80441aa:	4770      	bx	lr
 80441ac:	58024400 	.word	0x58024400

080441b0 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 80441b0:	b480      	push	{r7}
 80441b2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 80441b4:	4b04      	ldr	r3, [pc, #16]	@ (80441c8 <LL_RCC_PLL2_GetN+0x18>)
 80441b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80441b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80441bc:	3301      	adds	r3, #1
}
 80441be:	4618      	mov	r0, r3
 80441c0:	46bd      	mov	sp, r7
 80441c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80441c6:	4770      	bx	lr
 80441c8:	58024400 	.word	0x58024400

080441cc <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 80441cc:	b480      	push	{r7}
 80441ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 80441d0:	4b04      	ldr	r3, [pc, #16]	@ (80441e4 <LL_RCC_PLL2_GetM+0x18>)
 80441d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80441d4:	0b1b      	lsrs	r3, r3, #12
 80441d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80441da:	4618      	mov	r0, r3
 80441dc:	46bd      	mov	sp, r7
 80441de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80441e2:	4770      	bx	lr
 80441e4:	58024400 	.word	0x58024400

080441e8 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 80441e8:	b480      	push	{r7}
 80441ea:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 80441ec:	4b05      	ldr	r3, [pc, #20]	@ (8044204 <LL_RCC_PLL2_GetP+0x1c>)
 80441ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80441f0:	0a5b      	lsrs	r3, r3, #9
 80441f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80441f6:	3301      	adds	r3, #1
}
 80441f8:	4618      	mov	r0, r3
 80441fa:	46bd      	mov	sp, r7
 80441fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044200:	4770      	bx	lr
 8044202:	bf00      	nop
 8044204:	58024400 	.word	0x58024400

08044208 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 8044208:	b480      	push	{r7}
 804420a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 804420c:	4b05      	ldr	r3, [pc, #20]	@ (8044224 <LL_RCC_PLL2_GetQ+0x1c>)
 804420e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8044210:	0c1b      	lsrs	r3, r3, #16
 8044212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8044216:	3301      	adds	r3, #1
}
 8044218:	4618      	mov	r0, r3
 804421a:	46bd      	mov	sp, r7
 804421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044220:	4770      	bx	lr
 8044222:	bf00      	nop
 8044224:	58024400 	.word	0x58024400

08044228 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 8044228:	b480      	push	{r7}
 804422a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 804422c:	4b05      	ldr	r3, [pc, #20]	@ (8044244 <LL_RCC_PLL2_GetR+0x1c>)
 804422e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8044230:	0e1b      	lsrs	r3, r3, #24
 8044232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8044236:	3301      	adds	r3, #1
}
 8044238:	4618      	mov	r0, r3
 804423a:	46bd      	mov	sp, r7
 804423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044240:	4770      	bx	lr
 8044242:	bf00      	nop
 8044244:	58024400 	.word	0x58024400

08044248 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 8044248:	b480      	push	{r7}
 804424a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 804424c:	4b04      	ldr	r3, [pc, #16]	@ (8044260 <LL_RCC_PLL2_GetFRACN+0x18>)
 804424e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8044250:	08db      	lsrs	r3, r3, #3
 8044252:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8044256:	4618      	mov	r0, r3
 8044258:	46bd      	mov	sp, r7
 804425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804425e:	4770      	bx	lr
 8044260:	58024400 	.word	0x58024400

08044264 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 8044264:	b480      	push	{r7}
 8044266:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 8044268:	4b07      	ldr	r3, [pc, #28]	@ (8044288 <LL_RCC_PLL3_IsReady+0x24>)
 804426a:	681b      	ldr	r3, [r3, #0]
 804426c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8044270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044274:	d101      	bne.n	804427a <LL_RCC_PLL3_IsReady+0x16>
 8044276:	2301      	movs	r3, #1
 8044278:	e000      	b.n	804427c <LL_RCC_PLL3_IsReady+0x18>
 804427a:	2300      	movs	r3, #0
}
 804427c:	4618      	mov	r0, r3
 804427e:	46bd      	mov	sp, r7
 8044280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044284:	4770      	bx	lr
 8044286:	bf00      	nop
 8044288:	58024400 	.word	0x58024400

0804428c <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 804428c:	b480      	push	{r7}
 804428e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 8044290:	4b07      	ldr	r3, [pc, #28]	@ (80442b0 <LL_RCC_PLL3P_IsEnabled+0x24>)
 8044292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044294:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8044298:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 804429c:	d101      	bne.n	80442a2 <LL_RCC_PLL3P_IsEnabled+0x16>
 804429e:	2301      	movs	r3, #1
 80442a0:	e000      	b.n	80442a4 <LL_RCC_PLL3P_IsEnabled+0x18>
 80442a2:	2300      	movs	r3, #0
}
 80442a4:	4618      	mov	r0, r3
 80442a6:	46bd      	mov	sp, r7
 80442a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80442ac:	4770      	bx	lr
 80442ae:	bf00      	nop
 80442b0:	58024400 	.word	0x58024400

080442b4 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 80442b4:	b480      	push	{r7}
 80442b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 80442b8:	4b07      	ldr	r3, [pc, #28]	@ (80442d8 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 80442ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80442bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80442c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80442c4:	d101      	bne.n	80442ca <LL_RCC_PLL3Q_IsEnabled+0x16>
 80442c6:	2301      	movs	r3, #1
 80442c8:	e000      	b.n	80442cc <LL_RCC_PLL3Q_IsEnabled+0x18>
 80442ca:	2300      	movs	r3, #0
}
 80442cc:	4618      	mov	r0, r3
 80442ce:	46bd      	mov	sp, r7
 80442d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80442d4:	4770      	bx	lr
 80442d6:	bf00      	nop
 80442d8:	58024400 	.word	0x58024400

080442dc <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 80442dc:	b480      	push	{r7}
 80442de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 80442e0:	4b07      	ldr	r3, [pc, #28]	@ (8044300 <LL_RCC_PLL3R_IsEnabled+0x24>)
 80442e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80442e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80442e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80442ec:	d101      	bne.n	80442f2 <LL_RCC_PLL3R_IsEnabled+0x16>
 80442ee:	2301      	movs	r3, #1
 80442f0:	e000      	b.n	80442f4 <LL_RCC_PLL3R_IsEnabled+0x18>
 80442f2:	2300      	movs	r3, #0
}
 80442f4:	4618      	mov	r0, r3
 80442f6:	46bd      	mov	sp, r7
 80442f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80442fc:	4770      	bx	lr
 80442fe:	bf00      	nop
 8044300:	58024400 	.word	0x58024400

08044304 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 8044304:	b480      	push	{r7}
 8044306:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 8044308:	4b07      	ldr	r3, [pc, #28]	@ (8044328 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 804430a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804430c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8044310:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8044314:	d101      	bne.n	804431a <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 8044316:	2301      	movs	r3, #1
 8044318:	e000      	b.n	804431c <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 804431a:	2300      	movs	r3, #0
}
 804431c:	4618      	mov	r0, r3
 804431e:	46bd      	mov	sp, r7
 8044320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044324:	4770      	bx	lr
 8044326:	bf00      	nop
 8044328:	58024400 	.word	0x58024400

0804432c <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 804432c:	b480      	push	{r7}
 804432e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8044330:	4b04      	ldr	r3, [pc, #16]	@ (8044344 <LL_RCC_PLL3_GetN+0x18>)
 8044332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8044334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8044338:	3301      	adds	r3, #1
}
 804433a:	4618      	mov	r0, r3
 804433c:	46bd      	mov	sp, r7
 804433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044342:	4770      	bx	lr
 8044344:	58024400 	.word	0x58024400

08044348 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 8044348:	b480      	push	{r7}
 804434a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 804434c:	4b04      	ldr	r3, [pc, #16]	@ (8044360 <LL_RCC_PLL3_GetM+0x18>)
 804434e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8044350:	0d1b      	lsrs	r3, r3, #20
 8044352:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8044356:	4618      	mov	r0, r3
 8044358:	46bd      	mov	sp, r7
 804435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804435e:	4770      	bx	lr
 8044360:	58024400 	.word	0x58024400

08044364 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 8044364:	b480      	push	{r7}
 8044366:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 8044368:	4b05      	ldr	r3, [pc, #20]	@ (8044380 <LL_RCC_PLL3_GetP+0x1c>)
 804436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804436c:	0a5b      	lsrs	r3, r3, #9
 804436e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8044372:	3301      	adds	r3, #1
}
 8044374:	4618      	mov	r0, r3
 8044376:	46bd      	mov	sp, r7
 8044378:	f85d 7b04 	ldr.w	r7, [sp], #4
 804437c:	4770      	bx	lr
 804437e:	bf00      	nop
 8044380:	58024400 	.word	0x58024400

08044384 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 8044384:	b480      	push	{r7}
 8044386:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 8044388:	4b05      	ldr	r3, [pc, #20]	@ (80443a0 <LL_RCC_PLL3_GetQ+0x1c>)
 804438a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804438c:	0c1b      	lsrs	r3, r3, #16
 804438e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8044392:	3301      	adds	r3, #1
}
 8044394:	4618      	mov	r0, r3
 8044396:	46bd      	mov	sp, r7
 8044398:	f85d 7b04 	ldr.w	r7, [sp], #4
 804439c:	4770      	bx	lr
 804439e:	bf00      	nop
 80443a0:	58024400 	.word	0x58024400

080443a4 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 80443a4:	b480      	push	{r7}
 80443a6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 80443a8:	4b05      	ldr	r3, [pc, #20]	@ (80443c0 <LL_RCC_PLL3_GetR+0x1c>)
 80443aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80443ac:	0e1b      	lsrs	r3, r3, #24
 80443ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80443b2:	3301      	adds	r3, #1
}
 80443b4:	4618      	mov	r0, r3
 80443b6:	46bd      	mov	sp, r7
 80443b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80443bc:	4770      	bx	lr
 80443be:	bf00      	nop
 80443c0:	58024400 	.word	0x58024400

080443c4 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 80443c4:	b480      	push	{r7}
 80443c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 80443c8:	4b04      	ldr	r3, [pc, #16]	@ (80443dc <LL_RCC_PLL3_GetFRACN+0x18>)
 80443ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80443cc:	08db      	lsrs	r3, r3, #3
 80443ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 80443d2:	4618      	mov	r0, r3
 80443d4:	46bd      	mov	sp, r7
 80443d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80443da:	4770      	bx	lr
 80443dc:	58024400 	.word	0x58024400

080443e0 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 80443e0:	b580      	push	{r7, lr}
 80443e2:	b08a      	sub	sp, #40	@ 0x28
 80443e4:	af02      	add	r7, sp, #8
 80443e6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 80443e8:	2300      	movs	r3, #0
 80443ea:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 80443ec:	2300      	movs	r3, #0
 80443ee:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 80443f0:	f7ff fdc6 	bl	8043f80 <LL_RCC_PLL_GetSource>
 80443f4:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 80443f6:	697b      	ldr	r3, [r7, #20]
 80443f8:	2b02      	cmp	r3, #2
 80443fa:	d01f      	beq.n	804443c <LL_RCC_GetPLL1ClockFreq+0x5c>
 80443fc:	697b      	ldr	r3, [r7, #20]
 80443fe:	2b02      	cmp	r3, #2
 8044400:	d824      	bhi.n	804444c <LL_RCC_GetPLL1ClockFreq+0x6c>
 8044402:	697b      	ldr	r3, [r7, #20]
 8044404:	2b00      	cmp	r3, #0
 8044406:	d003      	beq.n	8044410 <LL_RCC_GetPLL1ClockFreq+0x30>
 8044408:	697b      	ldr	r3, [r7, #20]
 804440a:	2b01      	cmp	r3, #1
 804440c:	d00e      	beq.n	804442c <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 804440e:	e01d      	b.n	804444c <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8044410:	f7ff fcf8 	bl	8043e04 <LL_RCC_HSI_IsReady>
 8044414:	4603      	mov	r3, r0
 8044416:	2b00      	cmp	r3, #0
 8044418:	d01a      	beq.n	8044450 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 804441a:	f7ff fd05 	bl	8043e28 <LL_RCC_HSI_GetDivider>
 804441e:	4603      	mov	r3, r0
 8044420:	08db      	lsrs	r3, r3, #3
 8044422:	4a38      	ldr	r2, [pc, #224]	@ (8044504 <LL_RCC_GetPLL1ClockFreq+0x124>)
 8044424:	fa22 f303 	lsr.w	r3, r2, r3
 8044428:	61fb      	str	r3, [r7, #28]
      break;
 804442a:	e011      	b.n	8044450 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 804442c:	f7ff fd0a 	bl	8043e44 <LL_RCC_CSI_IsReady>
 8044430:	4603      	mov	r3, r0
 8044432:	2b00      	cmp	r3, #0
 8044434:	d00e      	beq.n	8044454 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8044436:	4b34      	ldr	r3, [pc, #208]	@ (8044508 <LL_RCC_GetPLL1ClockFreq+0x128>)
 8044438:	61fb      	str	r3, [r7, #28]
      break;
 804443a:	e00b      	b.n	8044454 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 804443c:	f7ff fcce 	bl	8043ddc <LL_RCC_HSE_IsReady>
 8044440:	4603      	mov	r3, r0
 8044442:	2b00      	cmp	r3, #0
 8044444:	d008      	beq.n	8044458 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8044446:	4b31      	ldr	r3, [pc, #196]	@ (804450c <LL_RCC_GetPLL1ClockFreq+0x12c>)
 8044448:	61fb      	str	r3, [r7, #28]
      break;
 804444a:	e005      	b.n	8044458 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 804444c:	bf00      	nop
 804444e:	e004      	b.n	804445a <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8044450:	bf00      	nop
 8044452:	e002      	b.n	804445a <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8044454:	bf00      	nop
 8044456:	e000      	b.n	804445a <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8044458:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 804445a:	687b      	ldr	r3, [r7, #4]
 804445c:	2200      	movs	r2, #0
 804445e:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8044460:	687b      	ldr	r3, [r7, #4]
 8044462:	2200      	movs	r2, #0
 8044464:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8044466:	687b      	ldr	r3, [r7, #4]
 8044468:	2200      	movs	r2, #0
 804446a:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 804446c:	f7ff fdf2 	bl	8044054 <LL_RCC_PLL1_GetM>
 8044470:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 8044472:	f7ff fde1 	bl	8044038 <LL_RCC_PLL1_GetN>
 8044476:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 8044478:	f7ff fdcc 	bl	8044014 <LL_RCC_PLL1FRACN_IsEnabled>
 804447c:	4603      	mov	r3, r0
 804447e:	2b00      	cmp	r3, #0
 8044480:	d002      	beq.n	8044488 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 8044482:	f7ff fe25 	bl	80440d0 <LL_RCC_PLL1_GetFRACN>
 8044486:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8044488:	693b      	ldr	r3, [r7, #16]
 804448a:	2b00      	cmp	r3, #0
 804448c:	d035      	beq.n	80444fa <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 804448e:	f7ff fd85 	bl	8043f9c <LL_RCC_PLL1P_IsEnabled>
 8044492:	4603      	mov	r3, r0
 8044494:	2b00      	cmp	r3, #0
 8044496:	d00c      	beq.n	80444b2 <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 8044498:	f7ff fdea 	bl	8044070 <LL_RCC_PLL1_GetP>
 804449c:	4603      	mov	r3, r0
 804449e:	9300      	str	r3, [sp, #0]
 80444a0:	69bb      	ldr	r3, [r7, #24]
 80444a2:	68fa      	ldr	r2, [r7, #12]
 80444a4:	6939      	ldr	r1, [r7, #16]
 80444a6:	69f8      	ldr	r0, [r7, #28]
 80444a8:	f000 f964 	bl	8044774 <LL_RCC_CalcPLLClockFreq>
 80444ac:	4602      	mov	r2, r0
 80444ae:	687b      	ldr	r3, [r7, #4]
 80444b0:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 80444b2:	f7ff fd87 	bl	8043fc4 <LL_RCC_PLL1Q_IsEnabled>
 80444b6:	4603      	mov	r3, r0
 80444b8:	2b00      	cmp	r3, #0
 80444ba:	d00c      	beq.n	80444d6 <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 80444bc:	f7ff fde8 	bl	8044090 <LL_RCC_PLL1_GetQ>
 80444c0:	4603      	mov	r3, r0
 80444c2:	9300      	str	r3, [sp, #0]
 80444c4:	69bb      	ldr	r3, [r7, #24]
 80444c6:	68fa      	ldr	r2, [r7, #12]
 80444c8:	6939      	ldr	r1, [r7, #16]
 80444ca:	69f8      	ldr	r0, [r7, #28]
 80444cc:	f000 f952 	bl	8044774 <LL_RCC_CalcPLLClockFreq>
 80444d0:	4602      	mov	r2, r0
 80444d2:	687b      	ldr	r3, [r7, #4]
 80444d4:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 80444d6:	f7ff fd89 	bl	8043fec <LL_RCC_PLL1R_IsEnabled>
 80444da:	4603      	mov	r3, r0
 80444dc:	2b00      	cmp	r3, #0
 80444de:	d00c      	beq.n	80444fa <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 80444e0:	f7ff fde6 	bl	80440b0 <LL_RCC_PLL1_GetR>
 80444e4:	4603      	mov	r3, r0
 80444e6:	9300      	str	r3, [sp, #0]
 80444e8:	69bb      	ldr	r3, [r7, #24]
 80444ea:	68fa      	ldr	r2, [r7, #12]
 80444ec:	6939      	ldr	r1, [r7, #16]
 80444ee:	69f8      	ldr	r0, [r7, #28]
 80444f0:	f000 f940 	bl	8044774 <LL_RCC_CalcPLLClockFreq>
 80444f4:	4602      	mov	r2, r0
 80444f6:	687b      	ldr	r3, [r7, #4]
 80444f8:	609a      	str	r2, [r3, #8]
    }
  }
}
 80444fa:	bf00      	nop
 80444fc:	3720      	adds	r7, #32
 80444fe:	46bd      	mov	sp, r7
 8044500:	bd80      	pop	{r7, pc}
 8044502:	bf00      	nop
 8044504:	03d09000 	.word	0x03d09000
 8044508:	003d0900 	.word	0x003d0900
 804450c:	017d7840 	.word	0x017d7840

08044510 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8044510:	b580      	push	{r7, lr}
 8044512:	b08a      	sub	sp, #40	@ 0x28
 8044514:	af02      	add	r7, sp, #8
 8044516:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8044518:	2300      	movs	r3, #0
 804451a:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 804451c:	2300      	movs	r3, #0
 804451e:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8044520:	f7ff fd2e 	bl	8043f80 <LL_RCC_PLL_GetSource>
 8044524:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8044526:	697b      	ldr	r3, [r7, #20]
 8044528:	2b02      	cmp	r3, #2
 804452a:	d01f      	beq.n	804456c <LL_RCC_GetPLL2ClockFreq+0x5c>
 804452c:	697b      	ldr	r3, [r7, #20]
 804452e:	2b02      	cmp	r3, #2
 8044530:	d824      	bhi.n	804457c <LL_RCC_GetPLL2ClockFreq+0x6c>
 8044532:	697b      	ldr	r3, [r7, #20]
 8044534:	2b00      	cmp	r3, #0
 8044536:	d003      	beq.n	8044540 <LL_RCC_GetPLL2ClockFreq+0x30>
 8044538:	697b      	ldr	r3, [r7, #20]
 804453a:	2b01      	cmp	r3, #1
 804453c:	d00e      	beq.n	804455c <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 804453e:	e01d      	b.n	804457c <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8044540:	f7ff fc60 	bl	8043e04 <LL_RCC_HSI_IsReady>
 8044544:	4603      	mov	r3, r0
 8044546:	2b00      	cmp	r3, #0
 8044548:	d01a      	beq.n	8044580 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 804454a:	f7ff fc6d 	bl	8043e28 <LL_RCC_HSI_GetDivider>
 804454e:	4603      	mov	r3, r0
 8044550:	08db      	lsrs	r3, r3, #3
 8044552:	4a38      	ldr	r2, [pc, #224]	@ (8044634 <LL_RCC_GetPLL2ClockFreq+0x124>)
 8044554:	fa22 f303 	lsr.w	r3, r2, r3
 8044558:	61fb      	str	r3, [r7, #28]
      break;
 804455a:	e011      	b.n	8044580 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 804455c:	f7ff fc72 	bl	8043e44 <LL_RCC_CSI_IsReady>
 8044560:	4603      	mov	r3, r0
 8044562:	2b00      	cmp	r3, #0
 8044564:	d00e      	beq.n	8044584 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8044566:	4b34      	ldr	r3, [pc, #208]	@ (8044638 <LL_RCC_GetPLL2ClockFreq+0x128>)
 8044568:	61fb      	str	r3, [r7, #28]
      break;
 804456a:	e00b      	b.n	8044584 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 804456c:	f7ff fc36 	bl	8043ddc <LL_RCC_HSE_IsReady>
 8044570:	4603      	mov	r3, r0
 8044572:	2b00      	cmp	r3, #0
 8044574:	d008      	beq.n	8044588 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8044576:	4b31      	ldr	r3, [pc, #196]	@ (804463c <LL_RCC_GetPLL2ClockFreq+0x12c>)
 8044578:	61fb      	str	r3, [r7, #28]
      break;
 804457a:	e005      	b.n	8044588 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 804457c:	bf00      	nop
 804457e:	e004      	b.n	804458a <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8044580:	bf00      	nop
 8044582:	e002      	b.n	804458a <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8044584:	bf00      	nop
 8044586:	e000      	b.n	804458a <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8044588:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 804458a:	687b      	ldr	r3, [r7, #4]
 804458c:	2200      	movs	r2, #0
 804458e:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8044590:	687b      	ldr	r3, [r7, #4]
 8044592:	2200      	movs	r2, #0
 8044594:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8044596:	687b      	ldr	r3, [r7, #4]
 8044598:	2200      	movs	r2, #0
 804459a:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 804459c:	f7ff fe16 	bl	80441cc <LL_RCC_PLL2_GetM>
 80445a0:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 80445a2:	f7ff fe05 	bl	80441b0 <LL_RCC_PLL2_GetN>
 80445a6:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 80445a8:	f7ff fdf0 	bl	804418c <LL_RCC_PLL2FRACN_IsEnabled>
 80445ac:	4603      	mov	r3, r0
 80445ae:	2b00      	cmp	r3, #0
 80445b0:	d002      	beq.n	80445b8 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 80445b2:	f7ff fe49 	bl	8044248 <LL_RCC_PLL2_GetFRACN>
 80445b6:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 80445b8:	693b      	ldr	r3, [r7, #16]
 80445ba:	2b00      	cmp	r3, #0
 80445bc:	d035      	beq.n	804462a <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 80445be:	f7ff fda9 	bl	8044114 <LL_RCC_PLL2P_IsEnabled>
 80445c2:	4603      	mov	r3, r0
 80445c4:	2b00      	cmp	r3, #0
 80445c6:	d00c      	beq.n	80445e2 <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 80445c8:	f7ff fe0e 	bl	80441e8 <LL_RCC_PLL2_GetP>
 80445cc:	4603      	mov	r3, r0
 80445ce:	9300      	str	r3, [sp, #0]
 80445d0:	69bb      	ldr	r3, [r7, #24]
 80445d2:	68fa      	ldr	r2, [r7, #12]
 80445d4:	6939      	ldr	r1, [r7, #16]
 80445d6:	69f8      	ldr	r0, [r7, #28]
 80445d8:	f000 f8cc 	bl	8044774 <LL_RCC_CalcPLLClockFreq>
 80445dc:	4602      	mov	r2, r0
 80445de:	687b      	ldr	r3, [r7, #4]
 80445e0:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 80445e2:	f7ff fdab 	bl	804413c <LL_RCC_PLL2Q_IsEnabled>
 80445e6:	4603      	mov	r3, r0
 80445e8:	2b00      	cmp	r3, #0
 80445ea:	d00c      	beq.n	8044606 <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 80445ec:	f7ff fe0c 	bl	8044208 <LL_RCC_PLL2_GetQ>
 80445f0:	4603      	mov	r3, r0
 80445f2:	9300      	str	r3, [sp, #0]
 80445f4:	69bb      	ldr	r3, [r7, #24]
 80445f6:	68fa      	ldr	r2, [r7, #12]
 80445f8:	6939      	ldr	r1, [r7, #16]
 80445fa:	69f8      	ldr	r0, [r7, #28]
 80445fc:	f000 f8ba 	bl	8044774 <LL_RCC_CalcPLLClockFreq>
 8044600:	4602      	mov	r2, r0
 8044602:	687b      	ldr	r3, [r7, #4]
 8044604:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 8044606:	f7ff fdad 	bl	8044164 <LL_RCC_PLL2R_IsEnabled>
 804460a:	4603      	mov	r3, r0
 804460c:	2b00      	cmp	r3, #0
 804460e:	d00c      	beq.n	804462a <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 8044610:	f7ff fe0a 	bl	8044228 <LL_RCC_PLL2_GetR>
 8044614:	4603      	mov	r3, r0
 8044616:	9300      	str	r3, [sp, #0]
 8044618:	69bb      	ldr	r3, [r7, #24]
 804461a:	68fa      	ldr	r2, [r7, #12]
 804461c:	6939      	ldr	r1, [r7, #16]
 804461e:	69f8      	ldr	r0, [r7, #28]
 8044620:	f000 f8a8 	bl	8044774 <LL_RCC_CalcPLLClockFreq>
 8044624:	4602      	mov	r2, r0
 8044626:	687b      	ldr	r3, [r7, #4]
 8044628:	609a      	str	r2, [r3, #8]
    }
  }
}
 804462a:	bf00      	nop
 804462c:	3720      	adds	r7, #32
 804462e:	46bd      	mov	sp, r7
 8044630:	bd80      	pop	{r7, pc}
 8044632:	bf00      	nop
 8044634:	03d09000 	.word	0x03d09000
 8044638:	003d0900 	.word	0x003d0900
 804463c:	017d7840 	.word	0x017d7840

08044640 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8044640:	b580      	push	{r7, lr}
 8044642:	b08a      	sub	sp, #40	@ 0x28
 8044644:	af02      	add	r7, sp, #8
 8044646:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8044648:	2300      	movs	r3, #0
 804464a:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 804464c:	2300      	movs	r3, #0
 804464e:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8044650:	f7ff fc96 	bl	8043f80 <LL_RCC_PLL_GetSource>
 8044654:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8044656:	697b      	ldr	r3, [r7, #20]
 8044658:	2b02      	cmp	r3, #2
 804465a:	d01f      	beq.n	804469c <LL_RCC_GetPLL3ClockFreq+0x5c>
 804465c:	697b      	ldr	r3, [r7, #20]
 804465e:	2b02      	cmp	r3, #2
 8044660:	d824      	bhi.n	80446ac <LL_RCC_GetPLL3ClockFreq+0x6c>
 8044662:	697b      	ldr	r3, [r7, #20]
 8044664:	2b00      	cmp	r3, #0
 8044666:	d003      	beq.n	8044670 <LL_RCC_GetPLL3ClockFreq+0x30>
 8044668:	697b      	ldr	r3, [r7, #20]
 804466a:	2b01      	cmp	r3, #1
 804466c:	d00e      	beq.n	804468c <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 804466e:	e01d      	b.n	80446ac <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8044670:	f7ff fbc8 	bl	8043e04 <LL_RCC_HSI_IsReady>
 8044674:	4603      	mov	r3, r0
 8044676:	2b00      	cmp	r3, #0
 8044678:	d01a      	beq.n	80446b0 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 804467a:	f7ff fbd5 	bl	8043e28 <LL_RCC_HSI_GetDivider>
 804467e:	4603      	mov	r3, r0
 8044680:	08db      	lsrs	r3, r3, #3
 8044682:	4a39      	ldr	r2, [pc, #228]	@ (8044768 <LL_RCC_GetPLL3ClockFreq+0x128>)
 8044684:	fa22 f303 	lsr.w	r3, r2, r3
 8044688:	61fb      	str	r3, [r7, #28]
      break;
 804468a:	e011      	b.n	80446b0 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 804468c:	f7ff fbda 	bl	8043e44 <LL_RCC_CSI_IsReady>
 8044690:	4603      	mov	r3, r0
 8044692:	2b00      	cmp	r3, #0
 8044694:	d00e      	beq.n	80446b4 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8044696:	4b35      	ldr	r3, [pc, #212]	@ (804476c <LL_RCC_GetPLL3ClockFreq+0x12c>)
 8044698:	61fb      	str	r3, [r7, #28]
      break;
 804469a:	e00b      	b.n	80446b4 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 804469c:	f7ff fb9e 	bl	8043ddc <LL_RCC_HSE_IsReady>
 80446a0:	4603      	mov	r3, r0
 80446a2:	2b00      	cmp	r3, #0
 80446a4:	d008      	beq.n	80446b8 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 80446a6:	4b32      	ldr	r3, [pc, #200]	@ (8044770 <LL_RCC_GetPLL3ClockFreq+0x130>)
 80446a8:	61fb      	str	r3, [r7, #28]
      break;
 80446aa:	e005      	b.n	80446b8 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 80446ac:	bf00      	nop
 80446ae:	e004      	b.n	80446ba <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 80446b0:	bf00      	nop
 80446b2:	e002      	b.n	80446ba <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 80446b4:	bf00      	nop
 80446b6:	e000      	b.n	80446ba <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 80446b8:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 80446ba:	687b      	ldr	r3, [r7, #4]
 80446bc:	2200      	movs	r2, #0
 80446be:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 80446c0:	687b      	ldr	r3, [r7, #4]
 80446c2:	2200      	movs	r2, #0
 80446c4:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 80446c6:	687b      	ldr	r3, [r7, #4]
 80446c8:	2200      	movs	r2, #0
 80446ca:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 80446cc:	f7ff fe3c 	bl	8044348 <LL_RCC_PLL3_GetM>
 80446d0:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 80446d2:	f7ff fe2b 	bl	804432c <LL_RCC_PLL3_GetN>
 80446d6:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 80446d8:	f7ff fe14 	bl	8044304 <LL_RCC_PLL3FRACN_IsEnabled>
 80446dc:	4603      	mov	r3, r0
 80446de:	2b00      	cmp	r3, #0
 80446e0:	d002      	beq.n	80446e8 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 80446e2:	f7ff fe6f 	bl	80443c4 <LL_RCC_PLL3_GetFRACN>
 80446e6:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 80446e8:	693b      	ldr	r3, [r7, #16]
 80446ea:	2b00      	cmp	r3, #0
 80446ec:	d038      	beq.n	8044760 <LL_RCC_GetPLL3ClockFreq+0x120>
 80446ee:	69fb      	ldr	r3, [r7, #28]
 80446f0:	2b00      	cmp	r3, #0
 80446f2:	d035      	beq.n	8044760 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 80446f4:	f7ff fdca 	bl	804428c <LL_RCC_PLL3P_IsEnabled>
 80446f8:	4603      	mov	r3, r0
 80446fa:	2b00      	cmp	r3, #0
 80446fc:	d00c      	beq.n	8044718 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 80446fe:	f7ff fe31 	bl	8044364 <LL_RCC_PLL3_GetP>
 8044702:	4603      	mov	r3, r0
 8044704:	9300      	str	r3, [sp, #0]
 8044706:	69bb      	ldr	r3, [r7, #24]
 8044708:	68fa      	ldr	r2, [r7, #12]
 804470a:	6939      	ldr	r1, [r7, #16]
 804470c:	69f8      	ldr	r0, [r7, #28]
 804470e:	f000 f831 	bl	8044774 <LL_RCC_CalcPLLClockFreq>
 8044712:	4602      	mov	r2, r0
 8044714:	687b      	ldr	r3, [r7, #4]
 8044716:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8044718:	f7ff fdcc 	bl	80442b4 <LL_RCC_PLL3Q_IsEnabled>
 804471c:	4603      	mov	r3, r0
 804471e:	2b00      	cmp	r3, #0
 8044720:	d00c      	beq.n	804473c <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 8044722:	f7ff fe2f 	bl	8044384 <LL_RCC_PLL3_GetQ>
 8044726:	4603      	mov	r3, r0
 8044728:	9300      	str	r3, [sp, #0]
 804472a:	69bb      	ldr	r3, [r7, #24]
 804472c:	68fa      	ldr	r2, [r7, #12]
 804472e:	6939      	ldr	r1, [r7, #16]
 8044730:	69f8      	ldr	r0, [r7, #28]
 8044732:	f000 f81f 	bl	8044774 <LL_RCC_CalcPLLClockFreq>
 8044736:	4602      	mov	r2, r0
 8044738:	687b      	ldr	r3, [r7, #4]
 804473a:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 804473c:	f7ff fdce 	bl	80442dc <LL_RCC_PLL3R_IsEnabled>
 8044740:	4603      	mov	r3, r0
 8044742:	2b00      	cmp	r3, #0
 8044744:	d00c      	beq.n	8044760 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 8044746:	f7ff fe2d 	bl	80443a4 <LL_RCC_PLL3_GetR>
 804474a:	4603      	mov	r3, r0
 804474c:	9300      	str	r3, [sp, #0]
 804474e:	69bb      	ldr	r3, [r7, #24]
 8044750:	68fa      	ldr	r2, [r7, #12]
 8044752:	6939      	ldr	r1, [r7, #16]
 8044754:	69f8      	ldr	r0, [r7, #28]
 8044756:	f000 f80d 	bl	8044774 <LL_RCC_CalcPLLClockFreq>
 804475a:	4602      	mov	r2, r0
 804475c:	687b      	ldr	r3, [r7, #4]
 804475e:	609a      	str	r2, [r3, #8]
    }
  }
}
 8044760:	bf00      	nop
 8044762:	3720      	adds	r7, #32
 8044764:	46bd      	mov	sp, r7
 8044766:	bd80      	pop	{r7, pc}
 8044768:	03d09000 	.word	0x03d09000
 804476c:	003d0900 	.word	0x003d0900
 8044770:	017d7840 	.word	0x017d7840

08044774 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 8044774:	b480      	push	{r7}
 8044776:	b087      	sub	sp, #28
 8044778:	af00      	add	r7, sp, #0
 804477a:	60f8      	str	r0, [r7, #12]
 804477c:	60b9      	str	r1, [r7, #8]
 804477e:	607a      	str	r2, [r7, #4]
 8044780:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 8044782:	68fb      	ldr	r3, [r7, #12]
 8044784:	ee07 3a90 	vmov	s15, r3
 8044788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804478c:	68bb      	ldr	r3, [r7, #8]
 804478e:	ee07 3a90 	vmov	s15, r3
 8044792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8044796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804479a:	687b      	ldr	r3, [r7, #4]
 804479c:	ee07 3a90 	vmov	s15, r3
 80447a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80447a4:	683b      	ldr	r3, [r7, #0]
 80447a6:	ee07 3a90 	vmov	s15, r3
 80447aa:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80447ae:	eddf 5a10 	vldr	s11, [pc, #64]	@ 80447f0 <LL_RCC_CalcPLLClockFreq+0x7c>
 80447b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80447b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80447ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80447be:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 80447c2:	6a3b      	ldr	r3, [r7, #32]
 80447c4:	ee07 3a90 	vmov	s15, r3
 80447c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80447cc:	edd7 6a05 	vldr	s13, [r7, #20]
 80447d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80447d4:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 80447d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80447dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80447e0:	ee17 3a90 	vmov	r3, s15
}
 80447e4:	4618      	mov	r0, r3
 80447e6:	371c      	adds	r7, #28
 80447e8:	46bd      	mov	sp, r7
 80447ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80447ee:	4770      	bx	lr
 80447f0:	46000000 	.word	0x46000000

080447f4 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80447f4:	b590      	push	{r4, r7, lr}
 80447f6:	b087      	sub	sp, #28
 80447f8:	af00      	add	r7, sp, #0
 80447fa:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80447fc:	2300      	movs	r3, #0
 80447fe:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8044800:	6878      	ldr	r0, [r7, #4]
 8044802:	f7ff fbb1 	bl	8043f68 <LL_RCC_GetUSARTClockSource>
 8044806:	4603      	mov	r3, r0
 8044808:	4a62      	ldr	r2, [pc, #392]	@ (8044994 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 804480a:	4293      	cmp	r3, r2
 804480c:	f000 80a9 	beq.w	8044962 <LL_RCC_GetUSARTClockFreq+0x16e>
 8044810:	4a60      	ldr	r2, [pc, #384]	@ (8044994 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8044812:	4293      	cmp	r3, r2
 8044814:	f200 80ae 	bhi.w	8044974 <LL_RCC_GetUSARTClockFreq+0x180>
 8044818:	4a5f      	ldr	r2, [pc, #380]	@ (8044998 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 804481a:	4293      	cmp	r3, r2
 804481c:	f000 80a1 	beq.w	8044962 <LL_RCC_GetUSARTClockFreq+0x16e>
 8044820:	4a5d      	ldr	r2, [pc, #372]	@ (8044998 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8044822:	4293      	cmp	r3, r2
 8044824:	f200 80a6 	bhi.w	8044974 <LL_RCC_GetUSARTClockFreq+0x180>
 8044828:	4a5c      	ldr	r2, [pc, #368]	@ (804499c <LL_RCC_GetUSARTClockFreq+0x1a8>)
 804482a:	4293      	cmp	r3, r2
 804482c:	f000 8091 	beq.w	8044952 <LL_RCC_GetUSARTClockFreq+0x15e>
 8044830:	4a5a      	ldr	r2, [pc, #360]	@ (804499c <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8044832:	4293      	cmp	r3, r2
 8044834:	f200 809e 	bhi.w	8044974 <LL_RCC_GetUSARTClockFreq+0x180>
 8044838:	4a59      	ldr	r2, [pc, #356]	@ (80449a0 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 804483a:	4293      	cmp	r3, r2
 804483c:	f000 8089 	beq.w	8044952 <LL_RCC_GetUSARTClockFreq+0x15e>
 8044840:	4a57      	ldr	r2, [pc, #348]	@ (80449a0 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8044842:	4293      	cmp	r3, r2
 8044844:	f200 8096 	bhi.w	8044974 <LL_RCC_GetUSARTClockFreq+0x180>
 8044848:	4a56      	ldr	r2, [pc, #344]	@ (80449a4 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 804484a:	4293      	cmp	r3, r2
 804484c:	d073      	beq.n	8044936 <LL_RCC_GetUSARTClockFreq+0x142>
 804484e:	4a55      	ldr	r2, [pc, #340]	@ (80449a4 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8044850:	4293      	cmp	r3, r2
 8044852:	f200 808f 	bhi.w	8044974 <LL_RCC_GetUSARTClockFreq+0x180>
 8044856:	4a54      	ldr	r2, [pc, #336]	@ (80449a8 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8044858:	4293      	cmp	r3, r2
 804485a:	d06c      	beq.n	8044936 <LL_RCC_GetUSARTClockFreq+0x142>
 804485c:	4a52      	ldr	r2, [pc, #328]	@ (80449a8 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 804485e:	4293      	cmp	r3, r2
 8044860:	f200 8088 	bhi.w	8044974 <LL_RCC_GetUSARTClockFreq+0x180>
 8044864:	4a51      	ldr	r2, [pc, #324]	@ (80449ac <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8044866:	4293      	cmp	r3, r2
 8044868:	d058      	beq.n	804491c <LL_RCC_GetUSARTClockFreq+0x128>
 804486a:	4a50      	ldr	r2, [pc, #320]	@ (80449ac <LL_RCC_GetUSARTClockFreq+0x1b8>)
 804486c:	4293      	cmp	r3, r2
 804486e:	f200 8081 	bhi.w	8044974 <LL_RCC_GetUSARTClockFreq+0x180>
 8044872:	4a4f      	ldr	r2, [pc, #316]	@ (80449b0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8044874:	4293      	cmp	r3, r2
 8044876:	d051      	beq.n	804491c <LL_RCC_GetUSARTClockFreq+0x128>
 8044878:	4a4d      	ldr	r2, [pc, #308]	@ (80449b0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 804487a:	4293      	cmp	r3, r2
 804487c:	d87a      	bhi.n	8044974 <LL_RCC_GetUSARTClockFreq+0x180>
 804487e:	4a4d      	ldr	r2, [pc, #308]	@ (80449b4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8044880:	4293      	cmp	r3, r2
 8044882:	d03e      	beq.n	8044902 <LL_RCC_GetUSARTClockFreq+0x10e>
 8044884:	4a4b      	ldr	r2, [pc, #300]	@ (80449b4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8044886:	4293      	cmp	r3, r2
 8044888:	d874      	bhi.n	8044974 <LL_RCC_GetUSARTClockFreq+0x180>
 804488a:	4a4b      	ldr	r2, [pc, #300]	@ (80449b8 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 804488c:	4293      	cmp	r3, r2
 804488e:	d038      	beq.n	8044902 <LL_RCC_GetUSARTClockFreq+0x10e>
 8044890:	4a49      	ldr	r2, [pc, #292]	@ (80449b8 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8044892:	4293      	cmp	r3, r2
 8044894:	d86e      	bhi.n	8044974 <LL_RCC_GetUSARTClockFreq+0x180>
 8044896:	4a49      	ldr	r2, [pc, #292]	@ (80449bc <LL_RCC_GetUSARTClockFreq+0x1c8>)
 8044898:	4293      	cmp	r3, r2
 804489a:	d01a      	beq.n	80448d2 <LL_RCC_GetUSARTClockFreq+0xde>
 804489c:	4a48      	ldr	r2, [pc, #288]	@ (80449c0 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 804489e:	4293      	cmp	r3, r2
 80448a0:	d168      	bne.n	8044974 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 80448a2:	f000 f895 	bl	80449d0 <RCC_GetSystemClockFreq>
 80448a6:	4604      	mov	r4, r0
 80448a8:	f7ff fb00 	bl	8043eac <LL_RCC_GetSysPrescaler>
 80448ac:	4603      	mov	r3, r0
 80448ae:	0a1b      	lsrs	r3, r3, #8
 80448b0:	f003 030f 	and.w	r3, r3, #15
 80448b4:	4a43      	ldr	r2, [pc, #268]	@ (80449c4 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 80448b6:	5cd3      	ldrb	r3, [r2, r3]
 80448b8:	f003 031f 	and.w	r3, r3, #31
 80448bc:	fa24 f303 	lsr.w	r3, r4, r3
 80448c0:	4618      	mov	r0, r3
 80448c2:	f000 f8e7 	bl	8044a94 <RCC_GetHCLKClockFreq>
 80448c6:	4603      	mov	r3, r0
 80448c8:	4618      	mov	r0, r3
 80448ca:	f000 f911 	bl	8044af0 <RCC_GetPCLK2ClockFreq>
 80448ce:	6178      	str	r0, [r7, #20]
      break;
 80448d0:	e05b      	b.n	804498a <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 80448d2:	f000 f87d 	bl	80449d0 <RCC_GetSystemClockFreq>
 80448d6:	4604      	mov	r4, r0
 80448d8:	f7ff fae8 	bl	8043eac <LL_RCC_GetSysPrescaler>
 80448dc:	4603      	mov	r3, r0
 80448de:	0a1b      	lsrs	r3, r3, #8
 80448e0:	f003 030f 	and.w	r3, r3, #15
 80448e4:	4a37      	ldr	r2, [pc, #220]	@ (80449c4 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 80448e6:	5cd3      	ldrb	r3, [r2, r3]
 80448e8:	f003 031f 	and.w	r3, r3, #31
 80448ec:	fa24 f303 	lsr.w	r3, r4, r3
 80448f0:	4618      	mov	r0, r3
 80448f2:	f000 f8cf 	bl	8044a94 <RCC_GetHCLKClockFreq>
 80448f6:	4603      	mov	r3, r0
 80448f8:	4618      	mov	r0, r3
 80448fa:	f000 f8e1 	bl	8044ac0 <RCC_GetPCLK1ClockFreq>
 80448fe:	6178      	str	r0, [r7, #20]
      break;
 8044900:	e043      	b.n	804498a <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 8044902:	f7ff fbf3 	bl	80440ec <LL_RCC_PLL2_IsReady>
 8044906:	4603      	mov	r3, r0
 8044908:	2b00      	cmp	r3, #0
 804490a:	d035      	beq.n	8044978 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 804490c:	f107 0308 	add.w	r3, r7, #8
 8044910:	4618      	mov	r0, r3
 8044912:	f7ff fdfd 	bl	8044510 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8044916:	68fb      	ldr	r3, [r7, #12]
 8044918:	617b      	str	r3, [r7, #20]
      }
      break;
 804491a:	e02d      	b.n	8044978 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 804491c:	f7ff fca2 	bl	8044264 <LL_RCC_PLL3_IsReady>
 8044920:	4603      	mov	r3, r0
 8044922:	2b00      	cmp	r3, #0
 8044924:	d02a      	beq.n	804497c <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8044926:	f107 0308 	add.w	r3, r7, #8
 804492a:	4618      	mov	r0, r3
 804492c:	f7ff fe88 	bl	8044640 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8044930:	68fb      	ldr	r3, [r7, #12]
 8044932:	617b      	str	r3, [r7, #20]
      }
      break;
 8044934:	e022      	b.n	804497c <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 8044936:	f7ff fa65 	bl	8043e04 <LL_RCC_HSI_IsReady>
 804493a:	4603      	mov	r3, r0
 804493c:	2b00      	cmp	r3, #0
 804493e:	d01f      	beq.n	8044980 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8044940:	f7ff fa72 	bl	8043e28 <LL_RCC_HSI_GetDivider>
 8044944:	4603      	mov	r3, r0
 8044946:	08db      	lsrs	r3, r3, #3
 8044948:	4a1f      	ldr	r2, [pc, #124]	@ (80449c8 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 804494a:	fa22 f303 	lsr.w	r3, r2, r3
 804494e:	617b      	str	r3, [r7, #20]
      }
      break;
 8044950:	e016      	b.n	8044980 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 8044952:	f7ff fa77 	bl	8043e44 <LL_RCC_CSI_IsReady>
 8044956:	4603      	mov	r3, r0
 8044958:	2b00      	cmp	r3, #0
 804495a:	d013      	beq.n	8044984 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 804495c:	4b1b      	ldr	r3, [pc, #108]	@ (80449cc <LL_RCC_GetUSARTClockFreq+0x1d8>)
 804495e:	617b      	str	r3, [r7, #20]
      }
      break;
 8044960:	e010      	b.n	8044984 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 8044962:	f7ff fa83 	bl	8043e6c <LL_RCC_LSE_IsReady>
 8044966:	4603      	mov	r3, r0
 8044968:	2b00      	cmp	r3, #0
 804496a:	d00d      	beq.n	8044988 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 804496c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8044970:	617b      	str	r3, [r7, #20]
      }
      break;
 8044972:	e009      	b.n	8044988 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 8044974:	bf00      	nop
 8044976:	e008      	b.n	804498a <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8044978:	bf00      	nop
 804497a:	e006      	b.n	804498a <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 804497c:	bf00      	nop
 804497e:	e004      	b.n	804498a <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8044980:	bf00      	nop
 8044982:	e002      	b.n	804498a <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8044984:	bf00      	nop
 8044986:	e000      	b.n	804498a <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8044988:	bf00      	nop
  }

  return usart_frequency;
 804498a:	697b      	ldr	r3, [r7, #20]
}
 804498c:	4618      	mov	r0, r3
 804498e:	371c      	adds	r7, #28
 8044990:	46bd      	mov	sp, r7
 8044992:	bd90      	pop	{r4, r7, pc}
 8044994:	07050308 	.word	0x07050308
 8044998:	07050008 	.word	0x07050008
 804499c:	07040308 	.word	0x07040308
 80449a0:	07040008 	.word	0x07040008
 80449a4:	07030308 	.word	0x07030308
 80449a8:	07030008 	.word	0x07030008
 80449ac:	07020308 	.word	0x07020308
 80449b0:	07020008 	.word	0x07020008
 80449b4:	07010308 	.word	0x07010308
 80449b8:	07010008 	.word	0x07010008
 80449bc:	07000008 	.word	0x07000008
 80449c0:	07000308 	.word	0x07000308
 80449c4:	08045d84 	.word	0x08045d84
 80449c8:	03d09000 	.word	0x03d09000
 80449cc:	003d0900 	.word	0x003d0900

080449d0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80449d0:	b580      	push	{r7, lr}
 80449d2:	b084      	sub	sp, #16
 80449d4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80449d6:	2300      	movs	r3, #0
 80449d8:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80449da:	f7ff fa59 	bl	8043e90 <LL_RCC_GetSysClkSource>
 80449de:	4603      	mov	r3, r0
 80449e0:	2b18      	cmp	r3, #24
 80449e2:	d84b      	bhi.n	8044a7c <RCC_GetSystemClockFreq+0xac>
 80449e4:	a201      	add	r2, pc, #4	@ (adr r2, 80449ec <RCC_GetSystemClockFreq+0x1c>)
 80449e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80449ea:	bf00      	nop
 80449ec:	08044a51 	.word	0x08044a51
 80449f0:	08044a7d 	.word	0x08044a7d
 80449f4:	08044a7d 	.word	0x08044a7d
 80449f8:	08044a7d 	.word	0x08044a7d
 80449fc:	08044a7d 	.word	0x08044a7d
 8044a00:	08044a7d 	.word	0x08044a7d
 8044a04:	08044a7d 	.word	0x08044a7d
 8044a08:	08044a7d 	.word	0x08044a7d
 8044a0c:	08044a63 	.word	0x08044a63
 8044a10:	08044a7d 	.word	0x08044a7d
 8044a14:	08044a7d 	.word	0x08044a7d
 8044a18:	08044a7d 	.word	0x08044a7d
 8044a1c:	08044a7d 	.word	0x08044a7d
 8044a20:	08044a7d 	.word	0x08044a7d
 8044a24:	08044a7d 	.word	0x08044a7d
 8044a28:	08044a7d 	.word	0x08044a7d
 8044a2c:	08044a69 	.word	0x08044a69
 8044a30:	08044a7d 	.word	0x08044a7d
 8044a34:	08044a7d 	.word	0x08044a7d
 8044a38:	08044a7d 	.word	0x08044a7d
 8044a3c:	08044a7d 	.word	0x08044a7d
 8044a40:	08044a7d 	.word	0x08044a7d
 8044a44:	08044a7d 	.word	0x08044a7d
 8044a48:	08044a7d 	.word	0x08044a7d
 8044a4c:	08044a6f 	.word	0x08044a6f
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8044a50:	f7ff f9ea 	bl	8043e28 <LL_RCC_HSI_GetDivider>
 8044a54:	4603      	mov	r3, r0
 8044a56:	08db      	lsrs	r3, r3, #3
 8044a58:	4a0b      	ldr	r2, [pc, #44]	@ (8044a88 <RCC_GetSystemClockFreq+0xb8>)
 8044a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8044a5e:	60fb      	str	r3, [r7, #12]
      break;
 8044a60:	e00d      	b.n	8044a7e <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 8044a62:	4b0a      	ldr	r3, [pc, #40]	@ (8044a8c <RCC_GetSystemClockFreq+0xbc>)
 8044a64:	60fb      	str	r3, [r7, #12]
      break;
 8044a66:	e00a      	b.n	8044a7e <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 8044a68:	4b09      	ldr	r3, [pc, #36]	@ (8044a90 <RCC_GetSystemClockFreq+0xc0>)
 8044a6a:	60fb      	str	r3, [r7, #12]
      break;
 8044a6c:	e007      	b.n	8044a7e <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8044a6e:	463b      	mov	r3, r7
 8044a70:	4618      	mov	r0, r3
 8044a72:	f7ff fcb5 	bl	80443e0 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8044a76:	683b      	ldr	r3, [r7, #0]
 8044a78:	60fb      	str	r3, [r7, #12]
      break;
 8044a7a:	e000      	b.n	8044a7e <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 8044a7c:	bf00      	nop
  }

  return frequency;
 8044a7e:	68fb      	ldr	r3, [r7, #12]
}
 8044a80:	4618      	mov	r0, r3
 8044a82:	3710      	adds	r7, #16
 8044a84:	46bd      	mov	sp, r7
 8044a86:	bd80      	pop	{r7, pc}
 8044a88:	03d09000 	.word	0x03d09000
 8044a8c:	003d0900 	.word	0x003d0900
 8044a90:	017d7840 	.word	0x017d7840

08044a94 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8044a94:	b580      	push	{r7, lr}
 8044a96:	b082      	sub	sp, #8
 8044a98:	af00      	add	r7, sp, #0
 8044a9a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8044a9c:	f7ff fa14 	bl	8043ec8 <LL_RCC_GetAHBPrescaler>
 8044aa0:	4603      	mov	r3, r0
 8044aa2:	f003 030f 	and.w	r3, r3, #15
 8044aa6:	4a05      	ldr	r2, [pc, #20]	@ (8044abc <RCC_GetHCLKClockFreq+0x28>)
 8044aa8:	5cd3      	ldrb	r3, [r2, r3]
 8044aaa:	f003 031f 	and.w	r3, r3, #31
 8044aae:	687a      	ldr	r2, [r7, #4]
 8044ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8044ab4:	4618      	mov	r0, r3
 8044ab6:	3708      	adds	r7, #8
 8044ab8:	46bd      	mov	sp, r7
 8044aba:	bd80      	pop	{r7, pc}
 8044abc:	08045d84 	.word	0x08045d84

08044ac0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8044ac0:	b580      	push	{r7, lr}
 8044ac2:	b082      	sub	sp, #8
 8044ac4:	af00      	add	r7, sp, #0
 8044ac6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8044ac8:	f7ff fa0c 	bl	8043ee4 <LL_RCC_GetAPB1Prescaler>
 8044acc:	4603      	mov	r3, r0
 8044ace:	091b      	lsrs	r3, r3, #4
 8044ad0:	f003 0307 	and.w	r3, r3, #7
 8044ad4:	4a05      	ldr	r2, [pc, #20]	@ (8044aec <RCC_GetPCLK1ClockFreq+0x2c>)
 8044ad6:	5cd3      	ldrb	r3, [r2, r3]
 8044ad8:	f003 031f 	and.w	r3, r3, #31
 8044adc:	687a      	ldr	r2, [r7, #4]
 8044ade:	fa22 f303 	lsr.w	r3, r2, r3
}
 8044ae2:	4618      	mov	r0, r3
 8044ae4:	3708      	adds	r7, #8
 8044ae6:	46bd      	mov	sp, r7
 8044ae8:	bd80      	pop	{r7, pc}
 8044aea:	bf00      	nop
 8044aec:	08045d84 	.word	0x08045d84

08044af0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8044af0:	b580      	push	{r7, lr}
 8044af2:	b082      	sub	sp, #8
 8044af4:	af00      	add	r7, sp, #0
 8044af6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8044af8:	f7ff fa02 	bl	8043f00 <LL_RCC_GetAPB2Prescaler>
 8044afc:	4603      	mov	r3, r0
 8044afe:	0a1b      	lsrs	r3, r3, #8
 8044b00:	f003 0307 	and.w	r3, r3, #7
 8044b04:	4a05      	ldr	r2, [pc, #20]	@ (8044b1c <RCC_GetPCLK2ClockFreq+0x2c>)
 8044b06:	5cd3      	ldrb	r3, [r2, r3]
 8044b08:	f003 031f 	and.w	r3, r3, #31
 8044b0c:	687a      	ldr	r2, [r7, #4]
 8044b0e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8044b12:	4618      	mov	r0, r3
 8044b14:	3708      	adds	r7, #8
 8044b16:	46bd      	mov	sp, r7
 8044b18:	bd80      	pop	{r7, pc}
 8044b1a:	bf00      	nop
 8044b1c:	08045d84 	.word	0x08045d84

08044b20 <LL_USART_IsEnabled>:
{
 8044b20:	b480      	push	{r7}
 8044b22:	b083      	sub	sp, #12
 8044b24:	af00      	add	r7, sp, #0
 8044b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8044b28:	687b      	ldr	r3, [r7, #4]
 8044b2a:	681b      	ldr	r3, [r3, #0]
 8044b2c:	f003 0301 	and.w	r3, r3, #1
 8044b30:	2b01      	cmp	r3, #1
 8044b32:	d101      	bne.n	8044b38 <LL_USART_IsEnabled+0x18>
 8044b34:	2301      	movs	r3, #1
 8044b36:	e000      	b.n	8044b3a <LL_USART_IsEnabled+0x1a>
 8044b38:	2300      	movs	r3, #0
}
 8044b3a:	4618      	mov	r0, r3
 8044b3c:	370c      	adds	r7, #12
 8044b3e:	46bd      	mov	sp, r7
 8044b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b44:	4770      	bx	lr

08044b46 <LL_USART_SetPrescaler>:
{
 8044b46:	b480      	push	{r7}
 8044b48:	b083      	sub	sp, #12
 8044b4a:	af00      	add	r7, sp, #0
 8044b4c:	6078      	str	r0, [r7, #4]
 8044b4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8044b50:	687b      	ldr	r3, [r7, #4]
 8044b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044b54:	f023 030f 	bic.w	r3, r3, #15
 8044b58:	683a      	ldr	r2, [r7, #0]
 8044b5a:	b292      	uxth	r2, r2
 8044b5c:	431a      	orrs	r2, r3
 8044b5e:	687b      	ldr	r3, [r7, #4]
 8044b60:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8044b62:	bf00      	nop
 8044b64:	370c      	adds	r7, #12
 8044b66:	46bd      	mov	sp, r7
 8044b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b6c:	4770      	bx	lr

08044b6e <LL_USART_SetStopBitsLength>:
{
 8044b6e:	b480      	push	{r7}
 8044b70:	b083      	sub	sp, #12
 8044b72:	af00      	add	r7, sp, #0
 8044b74:	6078      	str	r0, [r7, #4]
 8044b76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8044b78:	687b      	ldr	r3, [r7, #4]
 8044b7a:	685b      	ldr	r3, [r3, #4]
 8044b7c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8044b80:	683b      	ldr	r3, [r7, #0]
 8044b82:	431a      	orrs	r2, r3
 8044b84:	687b      	ldr	r3, [r7, #4]
 8044b86:	605a      	str	r2, [r3, #4]
}
 8044b88:	bf00      	nop
 8044b8a:	370c      	adds	r7, #12
 8044b8c:	46bd      	mov	sp, r7
 8044b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b92:	4770      	bx	lr

08044b94 <LL_USART_SetHWFlowCtrl>:
{
 8044b94:	b480      	push	{r7}
 8044b96:	b083      	sub	sp, #12
 8044b98:	af00      	add	r7, sp, #0
 8044b9a:	6078      	str	r0, [r7, #4]
 8044b9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8044b9e:	687b      	ldr	r3, [r7, #4]
 8044ba0:	689b      	ldr	r3, [r3, #8]
 8044ba2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8044ba6:	683b      	ldr	r3, [r7, #0]
 8044ba8:	431a      	orrs	r2, r3
 8044baa:	687b      	ldr	r3, [r7, #4]
 8044bac:	609a      	str	r2, [r3, #8]
}
 8044bae:	bf00      	nop
 8044bb0:	370c      	adds	r7, #12
 8044bb2:	46bd      	mov	sp, r7
 8044bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044bb8:	4770      	bx	lr
	...

08044bbc <LL_USART_SetBaudRate>:
{
 8044bbc:	b480      	push	{r7}
 8044bbe:	b087      	sub	sp, #28
 8044bc0:	af00      	add	r7, sp, #0
 8044bc2:	60f8      	str	r0, [r7, #12]
 8044bc4:	60b9      	str	r1, [r7, #8]
 8044bc6:	607a      	str	r2, [r7, #4]
 8044bc8:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8044bca:	687b      	ldr	r3, [r7, #4]
 8044bcc:	2b0b      	cmp	r3, #11
 8044bce:	d83c      	bhi.n	8044c4a <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8044bd0:	6a3b      	ldr	r3, [r7, #32]
 8044bd2:	2b00      	cmp	r3, #0
 8044bd4:	d039      	beq.n	8044c4a <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8044bd6:	683b      	ldr	r3, [r7, #0]
 8044bd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8044bdc:	d122      	bne.n	8044c24 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8044bde:	687b      	ldr	r3, [r7, #4]
 8044be0:	b2db      	uxtb	r3, r3
 8044be2:	461a      	mov	r2, r3
 8044be4:	4b1c      	ldr	r3, [pc, #112]	@ (8044c58 <LL_USART_SetBaudRate+0x9c>)
 8044be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044bea:	68ba      	ldr	r2, [r7, #8]
 8044bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8044bf0:	005a      	lsls	r2, r3, #1
 8044bf2:	6a3b      	ldr	r3, [r7, #32]
 8044bf4:	085b      	lsrs	r3, r3, #1
 8044bf6:	441a      	add	r2, r3
 8044bf8:	6a3b      	ldr	r3, [r7, #32]
 8044bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8044bfe:	b29b      	uxth	r3, r3
 8044c00:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8044c02:	697a      	ldr	r2, [r7, #20]
 8044c04:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8044c08:	4013      	ands	r3, r2
 8044c0a:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8044c0c:	697b      	ldr	r3, [r7, #20]
 8044c0e:	085b      	lsrs	r3, r3, #1
 8044c10:	b29b      	uxth	r3, r3
 8044c12:	f003 0307 	and.w	r3, r3, #7
 8044c16:	693a      	ldr	r2, [r7, #16]
 8044c18:	4313      	orrs	r3, r2
 8044c1a:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8044c1c:	68fb      	ldr	r3, [r7, #12]
 8044c1e:	693a      	ldr	r2, [r7, #16]
 8044c20:	60da      	str	r2, [r3, #12]
}
 8044c22:	e012      	b.n	8044c4a <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8044c24:	687b      	ldr	r3, [r7, #4]
 8044c26:	b2db      	uxtb	r3, r3
 8044c28:	461a      	mov	r2, r3
 8044c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8044c58 <LL_USART_SetBaudRate+0x9c>)
 8044c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044c30:	68ba      	ldr	r2, [r7, #8]
 8044c32:	fbb2 f2f3 	udiv	r2, r2, r3
 8044c36:	6a3b      	ldr	r3, [r7, #32]
 8044c38:	085b      	lsrs	r3, r3, #1
 8044c3a:	441a      	add	r2, r3
 8044c3c:	6a3b      	ldr	r3, [r7, #32]
 8044c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8044c42:	b29b      	uxth	r3, r3
 8044c44:	461a      	mov	r2, r3
 8044c46:	68fb      	ldr	r3, [r7, #12]
 8044c48:	60da      	str	r2, [r3, #12]
}
 8044c4a:	bf00      	nop
 8044c4c:	371c      	adds	r7, #28
 8044c4e:	46bd      	mov	sp, r7
 8044c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044c54:	4770      	bx	lr
 8044c56:	bf00      	nop
 8044c58:	08045d94 	.word	0x08045d94

08044c5c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8044c5c:	b580      	push	{r7, lr}
 8044c5e:	b086      	sub	sp, #24
 8044c60:	af02      	add	r7, sp, #8
 8044c62:	6078      	str	r0, [r7, #4]
 8044c64:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8044c66:	2301      	movs	r3, #1
 8044c68:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8044c6a:	2300      	movs	r3, #0
 8044c6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8044c6e:	6878      	ldr	r0, [r7, #4]
 8044c70:	f7ff ff56 	bl	8044b20 <LL_USART_IsEnabled>
 8044c74:	4603      	mov	r3, r0
 8044c76:	2b00      	cmp	r3, #0
 8044c78:	d17f      	bne.n	8044d7a <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8044c7a:	687b      	ldr	r3, [r7, #4]
 8044c7c:	681a      	ldr	r2, [r3, #0]
 8044c7e:	4b41      	ldr	r3, [pc, #260]	@ (8044d84 <LL_USART_Init+0x128>)
 8044c80:	4013      	ands	r3, r2
 8044c82:	683a      	ldr	r2, [r7, #0]
 8044c84:	6891      	ldr	r1, [r2, #8]
 8044c86:	683a      	ldr	r2, [r7, #0]
 8044c88:	6912      	ldr	r2, [r2, #16]
 8044c8a:	4311      	orrs	r1, r2
 8044c8c:	683a      	ldr	r2, [r7, #0]
 8044c8e:	6952      	ldr	r2, [r2, #20]
 8044c90:	4311      	orrs	r1, r2
 8044c92:	683a      	ldr	r2, [r7, #0]
 8044c94:	69d2      	ldr	r2, [r2, #28]
 8044c96:	430a      	orrs	r2, r1
 8044c98:	431a      	orrs	r2, r3
 8044c9a:	687b      	ldr	r3, [r7, #4]
 8044c9c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8044c9e:	683b      	ldr	r3, [r7, #0]
 8044ca0:	68db      	ldr	r3, [r3, #12]
 8044ca2:	4619      	mov	r1, r3
 8044ca4:	6878      	ldr	r0, [r7, #4]
 8044ca6:	f7ff ff62 	bl	8044b6e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8044caa:	683b      	ldr	r3, [r7, #0]
 8044cac:	699b      	ldr	r3, [r3, #24]
 8044cae:	4619      	mov	r1, r3
 8044cb0:	6878      	ldr	r0, [r7, #4]
 8044cb2:	f7ff ff6f 	bl	8044b94 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8044cb6:	687b      	ldr	r3, [r7, #4]
 8044cb8:	4a33      	ldr	r2, [pc, #204]	@ (8044d88 <LL_USART_Init+0x12c>)
 8044cba:	4293      	cmp	r3, r2
 8044cbc:	d104      	bne.n	8044cc8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8044cbe:	4833      	ldr	r0, [pc, #204]	@ (8044d8c <LL_USART_Init+0x130>)
 8044cc0:	f7ff fd98 	bl	80447f4 <LL_RCC_GetUSARTClockFreq>
 8044cc4:	60b8      	str	r0, [r7, #8]
 8044cc6:	e03d      	b.n	8044d44 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 8044cc8:	687b      	ldr	r3, [r7, #4]
 8044cca:	4a31      	ldr	r2, [pc, #196]	@ (8044d90 <LL_USART_Init+0x134>)
 8044ccc:	4293      	cmp	r3, r2
 8044cce:	d104      	bne.n	8044cda <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8044cd0:	4830      	ldr	r0, [pc, #192]	@ (8044d94 <LL_USART_Init+0x138>)
 8044cd2:	f7ff fd8f 	bl	80447f4 <LL_RCC_GetUSARTClockFreq>
 8044cd6:	60b8      	str	r0, [r7, #8]
 8044cd8:	e034      	b.n	8044d44 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 8044cda:	687b      	ldr	r3, [r7, #4]
 8044cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8044d98 <LL_USART_Init+0x13c>)
 8044cde:	4293      	cmp	r3, r2
 8044ce0:	d104      	bne.n	8044cec <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8044ce2:	482c      	ldr	r0, [pc, #176]	@ (8044d94 <LL_USART_Init+0x138>)
 8044ce4:	f7ff fd86 	bl	80447f4 <LL_RCC_GetUSARTClockFreq>
 8044ce8:	60b8      	str	r0, [r7, #8]
 8044cea:	e02b      	b.n	8044d44 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 8044cec:	687b      	ldr	r3, [r7, #4]
 8044cee:	4a2b      	ldr	r2, [pc, #172]	@ (8044d9c <LL_USART_Init+0x140>)
 8044cf0:	4293      	cmp	r3, r2
 8044cf2:	d104      	bne.n	8044cfe <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8044cf4:	4827      	ldr	r0, [pc, #156]	@ (8044d94 <LL_USART_Init+0x138>)
 8044cf6:	f7ff fd7d 	bl	80447f4 <LL_RCC_GetUSARTClockFreq>
 8044cfa:	60b8      	str	r0, [r7, #8]
 8044cfc:	e022      	b.n	8044d44 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 8044cfe:	687b      	ldr	r3, [r7, #4]
 8044d00:	4a27      	ldr	r2, [pc, #156]	@ (8044da0 <LL_USART_Init+0x144>)
 8044d02:	4293      	cmp	r3, r2
 8044d04:	d104      	bne.n	8044d10 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8044d06:	4823      	ldr	r0, [pc, #140]	@ (8044d94 <LL_USART_Init+0x138>)
 8044d08:	f7ff fd74 	bl	80447f4 <LL_RCC_GetUSARTClockFreq>
 8044d0c:	60b8      	str	r0, [r7, #8]
 8044d0e:	e019      	b.n	8044d44 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 8044d10:	687b      	ldr	r3, [r7, #4]
 8044d12:	4a24      	ldr	r2, [pc, #144]	@ (8044da4 <LL_USART_Init+0x148>)
 8044d14:	4293      	cmp	r3, r2
 8044d16:	d104      	bne.n	8044d22 <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8044d18:	481c      	ldr	r0, [pc, #112]	@ (8044d8c <LL_USART_Init+0x130>)
 8044d1a:	f7ff fd6b 	bl	80447f4 <LL_RCC_GetUSARTClockFreq>
 8044d1e:	60b8      	str	r0, [r7, #8]
 8044d20:	e010      	b.n	8044d44 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 8044d22:	687b      	ldr	r3, [r7, #4]
 8044d24:	4a20      	ldr	r2, [pc, #128]	@ (8044da8 <LL_USART_Init+0x14c>)
 8044d26:	4293      	cmp	r3, r2
 8044d28:	d104      	bne.n	8044d34 <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8044d2a:	481a      	ldr	r0, [pc, #104]	@ (8044d94 <LL_USART_Init+0x138>)
 8044d2c:	f7ff fd62 	bl	80447f4 <LL_RCC_GetUSARTClockFreq>
 8044d30:	60b8      	str	r0, [r7, #8]
 8044d32:	e007      	b.n	8044d44 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 8044d34:	687b      	ldr	r3, [r7, #4]
 8044d36:	4a1d      	ldr	r2, [pc, #116]	@ (8044dac <LL_USART_Init+0x150>)
 8044d38:	4293      	cmp	r3, r2
 8044d3a:	d103      	bne.n	8044d44 <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8044d3c:	4815      	ldr	r0, [pc, #84]	@ (8044d94 <LL_USART_Init+0x138>)
 8044d3e:	f7ff fd59 	bl	80447f4 <LL_RCC_GetUSARTClockFreq>
 8044d42:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8044d44:	68bb      	ldr	r3, [r7, #8]
 8044d46:	2b00      	cmp	r3, #0
 8044d48:	d011      	beq.n	8044d6e <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 8044d4a:	683b      	ldr	r3, [r7, #0]
 8044d4c:	685b      	ldr	r3, [r3, #4]
 8044d4e:	2b00      	cmp	r3, #0
 8044d50:	d00d      	beq.n	8044d6e <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 8044d52:	2300      	movs	r3, #0
 8044d54:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8044d56:	683b      	ldr	r3, [r7, #0]
 8044d58:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8044d5a:	683b      	ldr	r3, [r7, #0]
 8044d5c:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8044d5e:	683b      	ldr	r3, [r7, #0]
 8044d60:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8044d62:	9300      	str	r3, [sp, #0]
 8044d64:	460b      	mov	r3, r1
 8044d66:	68b9      	ldr	r1, [r7, #8]
 8044d68:	6878      	ldr	r0, [r7, #4]
 8044d6a:	f7ff ff27 	bl	8044bbc <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8044d6e:	683b      	ldr	r3, [r7, #0]
 8044d70:	681b      	ldr	r3, [r3, #0]
 8044d72:	4619      	mov	r1, r3
 8044d74:	6878      	ldr	r0, [r7, #4]
 8044d76:	f7ff fee6 	bl	8044b46 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8044d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8044d7c:	4618      	mov	r0, r3
 8044d7e:	3710      	adds	r7, #16
 8044d80:	46bd      	mov	sp, r7
 8044d82:	bd80      	pop	{r7, pc}
 8044d84:	efff69f3 	.word	0xefff69f3
 8044d88:	40011000 	.word	0x40011000
 8044d8c:	07000308 	.word	0x07000308
 8044d90:	40004400 	.word	0x40004400
 8044d94:	07000008 	.word	0x07000008
 8044d98:	40004800 	.word	0x40004800
 8044d9c:	40004c00 	.word	0x40004c00
 8044da0:	40005000 	.word	0x40005000
 8044da4:	40011400 	.word	0x40011400
 8044da8:	40007800 	.word	0x40007800
 8044dac:	40007c00 	.word	0x40007c00

08044db0 <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t
CmdLineProcess(char *pcCmdLine)
{
 8044db0:	b580      	push	{r7, lr}
 8044db2:	b086      	sub	sp, #24
 8044db4:	af00      	add	r7, sp, #0
 8044db6:	6078      	str	r0, [r7, #4]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 8044db8:	2301      	movs	r3, #1
 8044dba:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 8044dbc:	2300      	movs	r3, #0
 8044dbe:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 8044dc0:	687b      	ldr	r3, [r7, #4]
 8044dc2:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 8044dc4:	e01f      	b.n	8044e06 <CmdLineProcess+0x56>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 8044dc6:	697b      	ldr	r3, [r7, #20]
 8044dc8:	781b      	ldrb	r3, [r3, #0]
 8044dca:	2b20      	cmp	r3, #32
 8044dcc:	d105      	bne.n	8044dda <CmdLineProcess+0x2a>
        {
            *pcChar = 0;
 8044dce:	697b      	ldr	r3, [r7, #20]
 8044dd0:	2200      	movs	r2, #0
 8044dd2:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 8044dd4:	2301      	movs	r3, #1
 8044dd6:	73fb      	strb	r3, [r7, #15]
 8044dd8:	e012      	b.n	8044e00 <CmdLineProcess+0x50>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 8044dda:	7bfb      	ldrb	r3, [r7, #15]
 8044ddc:	2b00      	cmp	r3, #0
 8044dde:	d00f      	beq.n	8044e00 <CmdLineProcess+0x50>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 8044de0:	693b      	ldr	r3, [r7, #16]
 8044de2:	2b07      	cmp	r3, #7
 8044de4:	d80a      	bhi.n	8044dfc <CmdLineProcess+0x4c>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 8044de6:	491d      	ldr	r1, [pc, #116]	@ (8044e5c <CmdLineProcess+0xac>)
 8044de8:	693b      	ldr	r3, [r7, #16]
 8044dea:	697a      	ldr	r2, [r7, #20]
 8044dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 8044df0:	693b      	ldr	r3, [r7, #16]
 8044df2:	3301      	adds	r3, #1
 8044df4:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 8044df6:	2300      	movs	r3, #0
 8044df8:	73fb      	strb	r3, [r7, #15]
 8044dfa:	e001      	b.n	8044e00 <CmdLineProcess+0x50>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 8044dfc:	2302      	movs	r3, #2
 8044dfe:	e028      	b.n	8044e52 <CmdLineProcess+0xa2>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 8044e00:	697b      	ldr	r3, [r7, #20]
 8044e02:	3301      	adds	r3, #1
 8044e04:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 8044e06:	697b      	ldr	r3, [r7, #20]
 8044e08:	781b      	ldrb	r3, [r3, #0]
 8044e0a:	2b00      	cmp	r3, #0
 8044e0c:	d1db      	bne.n	8044dc6 <CmdLineProcess+0x16>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 8044e0e:	693b      	ldr	r3, [r7, #16]
 8044e10:	2b00      	cmp	r3, #0
 8044e12:	d01d      	beq.n	8044e50 <CmdLineProcess+0xa0>
    {
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 8044e14:	4b12      	ldr	r3, [pc, #72]	@ (8044e60 <CmdLineProcess+0xb0>)
 8044e16:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 8044e18:	e016      	b.n	8044e48 <CmdLineProcess+0x98>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 8044e1a:	4b10      	ldr	r3, [pc, #64]	@ (8044e5c <CmdLineProcess+0xac>)
 8044e1c:	681a      	ldr	r2, [r3, #0]
 8044e1e:	68bb      	ldr	r3, [r7, #8]
 8044e20:	681b      	ldr	r3, [r3, #0]
 8044e22:	4619      	mov	r1, r3
 8044e24:	4610      	mov	r0, r2
 8044e26:	f7fb fa57 	bl	80402d8 <strcmp>
 8044e2a:	4603      	mov	r3, r0
 8044e2c:	2b00      	cmp	r3, #0
 8044e2e:	d108      	bne.n	8044e42 <CmdLineProcess+0x92>
            {

                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 8044e30:	68bb      	ldr	r3, [r7, #8]
 8044e32:	685b      	ldr	r3, [r3, #4]
 8044e34:	693a      	ldr	r2, [r7, #16]
 8044e36:	4909      	ldr	r1, [pc, #36]	@ (8044e5c <CmdLineProcess+0xac>)
 8044e38:	4610      	mov	r0, r2
 8044e3a:	4798      	blx	r3
 8044e3c:	4603      	mov	r3, r0
 8044e3e:	b2db      	uxtb	r3, r3
 8044e40:	e007      	b.n	8044e52 <CmdLineProcess+0xa2>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 8044e42:	68bb      	ldr	r3, [r7, #8]
 8044e44:	330c      	adds	r3, #12
 8044e46:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 8044e48:	68bb      	ldr	r3, [r7, #8]
 8044e4a:	681b      	ldr	r3, [r3, #0]
 8044e4c:	2b00      	cmp	r3, #0
 8044e4e:	d1e4      	bne.n	8044e1a <CmdLineProcess+0x6a>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 8044e50:	2301      	movs	r3, #1
}
 8044e52:	4618      	mov	r0, r3
 8044e54:	3718      	adds	r7, #24
 8044e56:	46bd      	mov	sp, r7
 8044e58:	bd80      	pop	{r7, pc}
 8044e5a:	bf00      	nop
 8044e5c:	240000f4 	.word	0x240000f4
 8044e60:	24000050 	.word	0x24000050

08044e64 <command_init>:
static	char s_commandBuffer[COMMAND_MAX_LENGTH];
static uint8_t	s_commandBufferIndex = 0;


void	command_init(void)
{
 8044e64:	b580      	push	{r7, lr}
 8044e66:	af00      	add	r7, sp, #0
	USART2_init();
 8044e68:	f000 fb12 	bl	8045490 <USART2_init>
	p_CommandRingBuffer = uart_get_USART2_rx_buffer_address();
 8044e6c:	f000 fb7e 	bl	804556c <uart_get_USART2_rx_buffer_address>
 8044e70:	4603      	mov	r3, r0
 8044e72:	4a07      	ldr	r2, [pc, #28]	@ (8044e90 <command_init+0x2c>)
 8044e74:	6013      	str	r3, [r2, #0]
	memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
 8044e76:	2220      	movs	r2, #32
 8044e78:	2100      	movs	r1, #0
 8044e7a:	4806      	ldr	r0, [pc, #24]	@ (8044e94 <command_init+0x30>)
 8044e7c:	f000 fea4 	bl	8045bc8 <memset>
	s_commandBufferIndex = 0;
 8044e80:	4b05      	ldr	r3, [pc, #20]	@ (8044e98 <command_init+0x34>)
 8044e82:	2200      	movs	r2, #0
 8044e84:	701a      	strb	r2, [r3, #0]
	USART2_send_string("OBC FOTA V1.0.0 \r\n>");
 8044e86:	4805      	ldr	r0, [pc, #20]	@ (8044e9c <command_init+0x38>)
 8044e88:	f000 fb3e 	bl	8045508 <USART2_send_string>
	//UARTprintf("\r\nHIGH_POINT: %d\r\nLOW_POINT: %d\r\nPWM: %d\r\n", eeprom_read_word(HIGH_TEMP_POINT_ADR), eeprom_read_word(LOW_TEMP_POINT_ADR), eeprom_read_byte(HEATER_PWM_ADR));
}
 8044e8c:	bf00      	nop
 8044e8e:	bd80      	pop	{r7, pc}
 8044e90:	24000118 	.word	0x24000118
 8044e94:	2400011c 	.word	0x2400011c
 8044e98:	2400013c 	.word	0x2400013c
 8044e9c:	08045d0c 	.word	0x08045d0c

08044ea0 <command_task_update>:
	*ptr = 0;
	return buf;
}

void command_task_update(void*)
{
 8044ea0:	b580      	push	{r7, lr}
 8044ea2:	b084      	sub	sp, #16
 8044ea4:	af00      	add	r7, sp, #0
 8044ea6:	6078      	str	r0, [r7, #4]
	char rxData;
	int8_t	ret_val;
	while (! rbuffer_empty(p_CommandRingBuffer))
 8044ea8:	e05c      	b.n	8044f64 <command_task_update+0xc4>
	{
		rxData = rbuffer_remove(p_CommandRingBuffer);
 8044eaa:	4b36      	ldr	r3, [pc, #216]	@ (8044f84 <command_task_update+0xe4>)
 8044eac:	681b      	ldr	r3, [r3, #0]
 8044eae:	4618      	mov	r0, r3
 8044eb0:	f000 f93b 	bl	804512a <rbuffer_remove>
 8044eb4:	4603      	mov	r3, r0
 8044eb6:	73fb      	strb	r3, [r7, #15]
		USART2_send_char(rxData);
 8044eb8:	7bfb      	ldrb	r3, [r7, #15]
 8044eba:	4618      	mov	r0, r3
 8044ebc:	f000 fb00 	bl	80454c0 <USART2_send_char>
		if ((rxData == '\r') || (rxData == '\n'))		//got a return or new line
 8044ec0:	7bfb      	ldrb	r3, [r7, #15]
 8044ec2:	2b0d      	cmp	r3, #13
 8044ec4:	d002      	beq.n	8044ecc <command_task_update+0x2c>
 8044ec6:	7bfb      	ldrb	r3, [r7, #15]
 8044ec8:	2b0a      	cmp	r3, #10
 8044eca:	d127      	bne.n	8044f1c <command_task_update+0x7c>
		{
			if (s_commandBufferIndex > 0)		//if we got the CR or LF at the begining, discard	
 8044ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8044f88 <command_task_update+0xe8>)
 8044ece:	781b      	ldrb	r3, [r3, #0]
 8044ed0:	2b00      	cmp	r3, #0
 8044ed2:	d01f      	beq.n	8044f14 <command_task_update+0x74>
			{
				s_commandBuffer[s_commandBufferIndex] = 0;
 8044ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8044f88 <command_task_update+0xe8>)
 8044ed6:	781b      	ldrb	r3, [r3, #0]
 8044ed8:	461a      	mov	r2, r3
 8044eda:	4b2c      	ldr	r3, [pc, #176]	@ (8044f8c <command_task_update+0xec>)
 8044edc:	2100      	movs	r1, #0
 8044ede:	5499      	strb	r1, [r3, r2]
				s_commandBufferIndex++;
 8044ee0:	4b29      	ldr	r3, [pc, #164]	@ (8044f88 <command_task_update+0xe8>)
 8044ee2:	781b      	ldrb	r3, [r3, #0]
 8044ee4:	3301      	adds	r3, #1
 8044ee6:	b2da      	uxtb	r2, r3
 8044ee8:	4b27      	ldr	r3, [pc, #156]	@ (8044f88 <command_task_update+0xe8>)
 8044eea:	701a      	strb	r2, [r3, #0]
				ret_val = CmdLineProcess(s_commandBuffer);		
 8044eec:	4827      	ldr	r0, [pc, #156]	@ (8044f8c <command_task_update+0xec>)
 8044eee:	f7ff ff5f 	bl	8044db0 <CmdLineProcess>
 8044ef2:	4603      	mov	r3, r0
 8044ef4:	73bb      	strb	r3, [r7, #14]
				s_commandBufferIndex = 0;		
 8044ef6:	4b24      	ldr	r3, [pc, #144]	@ (8044f88 <command_task_update+0xe8>)
 8044ef8:	2200      	movs	r2, #0
 8044efa:	701a      	strb	r2, [r3, #0]
				USART2_send_string(ErrorCode[ret_val]);
 8044efc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8044f00:	4a23      	ldr	r2, [pc, #140]	@ (8044f90 <command_task_update+0xf0>)
 8044f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8044f06:	4618      	mov	r0, r3
 8044f08:	f000 fafe 	bl	8045508 <USART2_send_string>
				USART2_send_string("> ");
 8044f0c:	4821      	ldr	r0, [pc, #132]	@ (8044f94 <command_task_update+0xf4>)
 8044f0e:	f000 fafb 	bl	8045508 <USART2_send_string>
			if (s_commandBufferIndex > 0)		//if we got the CR or LF at the begining, discard	
 8044f12:	e027      	b.n	8044f64 <command_task_update+0xc4>
			}	
			else USART2_send_string("\r\n> ");
 8044f14:	4820      	ldr	r0, [pc, #128]	@ (8044f98 <command_task_update+0xf8>)
 8044f16:	f000 faf7 	bl	8045508 <USART2_send_string>
			if (s_commandBufferIndex > 0)		//if we got the CR or LF at the begining, discard	
 8044f1a:	e023      	b.n	8044f64 <command_task_update+0xc4>
		}
		else if ((rxData == 8) || (rxData == 127))	
 8044f1c:	7bfb      	ldrb	r3, [r7, #15]
 8044f1e:	2b08      	cmp	r3, #8
 8044f20:	d002      	beq.n	8044f28 <command_task_update+0x88>
 8044f22:	7bfb      	ldrb	r3, [r7, #15]
 8044f24:	2b7f      	cmp	r3, #127	@ 0x7f
 8044f26:	d10a      	bne.n	8044f3e <command_task_update+0x9e>
		{
			if (s_commandBufferIndex > 0) s_commandBufferIndex--;
 8044f28:	4b17      	ldr	r3, [pc, #92]	@ (8044f88 <command_task_update+0xe8>)
 8044f2a:	781b      	ldrb	r3, [r3, #0]
 8044f2c:	2b00      	cmp	r3, #0
 8044f2e:	d019      	beq.n	8044f64 <command_task_update+0xc4>
 8044f30:	4b15      	ldr	r3, [pc, #84]	@ (8044f88 <command_task_update+0xe8>)
 8044f32:	781b      	ldrb	r3, [r3, #0]
 8044f34:	3b01      	subs	r3, #1
 8044f36:	b2da      	uxtb	r2, r3
 8044f38:	4b13      	ldr	r3, [pc, #76]	@ (8044f88 <command_task_update+0xe8>)
 8044f3a:	701a      	strb	r2, [r3, #0]
 8044f3c:	e012      	b.n	8044f64 <command_task_update+0xc4>
		}
		else
		{
			s_commandBuffer[s_commandBufferIndex] = rxData;
 8044f3e:	4b12      	ldr	r3, [pc, #72]	@ (8044f88 <command_task_update+0xe8>)
 8044f40:	781b      	ldrb	r3, [r3, #0]
 8044f42:	4619      	mov	r1, r3
 8044f44:	4a11      	ldr	r2, [pc, #68]	@ (8044f8c <command_task_update+0xec>)
 8044f46:	7bfb      	ldrb	r3, [r7, #15]
 8044f48:	5453      	strb	r3, [r2, r1]
			s_commandBufferIndex ++;
 8044f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8044f88 <command_task_update+0xe8>)
 8044f4c:	781b      	ldrb	r3, [r3, #0]
 8044f4e:	3301      	adds	r3, #1
 8044f50:	b2da      	uxtb	r2, r3
 8044f52:	4b0d      	ldr	r3, [pc, #52]	@ (8044f88 <command_task_update+0xe8>)
 8044f54:	701a      	strb	r2, [r3, #0]
			if (s_commandBufferIndex >= COMMAND_MAX_LENGTH) s_commandBufferIndex= 0;
 8044f56:	4b0c      	ldr	r3, [pc, #48]	@ (8044f88 <command_task_update+0xe8>)
 8044f58:	781b      	ldrb	r3, [r3, #0]
 8044f5a:	2b1f      	cmp	r3, #31
 8044f5c:	d902      	bls.n	8044f64 <command_task_update+0xc4>
 8044f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8044f88 <command_task_update+0xe8>)
 8044f60:	2200      	movs	r2, #0
 8044f62:	701a      	strb	r2, [r3, #0]
	while (! rbuffer_empty(p_CommandRingBuffer))
 8044f64:	4b07      	ldr	r3, [pc, #28]	@ (8044f84 <command_task_update+0xe4>)
 8044f66:	681b      	ldr	r3, [r3, #0]
 8044f68:	4618      	mov	r0, r3
 8044f6a:	f000 f89f 	bl	80450ac <rbuffer_empty>
 8044f6e:	4603      	mov	r3, r0
 8044f70:	f083 0301 	eor.w	r3, r3, #1
 8044f74:	b2db      	uxtb	r3, r3
 8044f76:	2b00      	cmp	r3, #0
 8044f78:	d197      	bne.n	8044eaa <command_task_update+0xa>
		}
	}	
}
 8044f7a:	bf00      	nop
 8044f7c:	bf00      	nop
 8044f7e:	3710      	adds	r7, #16
 8044f80:	46bd      	mov	sp, r7
 8044f82:	bd80      	pop	{r7, pc}
 8044f84:	24000118 	.word	0x24000118
 8044f88:	2400013c 	.word	0x2400013c
 8044f8c:	2400011c 	.word	0x2400011c
 8044f90:	2400003c 	.word	0x2400003c
 8044f94:	08045d20 	.word	0x08045d20
 8044f98:	08045d24 	.word	0x08045d24

08044f9c <Cmd_help>:



int Cmd_help(int argc, char *argv[]) {
 8044f9c:	b580      	push	{r7, lr}
 8044f9e:	b084      	sub	sp, #16
 8044fa0:	af00      	add	r7, sp, #0
 8044fa2:	6078      	str	r0, [r7, #4]
 8044fa4:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;

	USART2_send_string("\nAvailable commands: \r\n");
 8044fa6:	480f      	ldr	r0, [pc, #60]	@ (8044fe4 <Cmd_help+0x48>)
 8044fa8:	f000 faae 	bl	8045508 <USART2_send_string>
	
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[0];
 8044fac:	4b0e      	ldr	r3, [pc, #56]	@ (8044fe8 <Cmd_help+0x4c>)
 8044fae:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8044fb0:	e00f      	b.n	8044fd2 <Cmd_help+0x36>
		// Print the command name and the brief description.
		USART2_send_string(pEntry->pcCmd);
 8044fb2:	68fb      	ldr	r3, [r7, #12]
 8044fb4:	681b      	ldr	r3, [r3, #0]
 8044fb6:	4618      	mov	r0, r3
 8044fb8:	f000 faa6 	bl	8045508 <USART2_send_string>
		USART2_send_string(pEntry->pcHelp);
 8044fbc:	68fb      	ldr	r3, [r7, #12]
 8044fbe:	689b      	ldr	r3, [r3, #8]
 8044fc0:	4618      	mov	r0, r3
 8044fc2:	f000 faa1 	bl	8045508 <USART2_send_string>
		USART2_send_string("\r\n");
 8044fc6:	4809      	ldr	r0, [pc, #36]	@ (8044fec <Cmd_help+0x50>)
 8044fc8:	f000 fa9e 	bl	8045508 <USART2_send_string>

		// Advance to the next entry in the table.
		pEntry++;
 8044fcc:	68fb      	ldr	r3, [r7, #12]
 8044fce:	330c      	adds	r3, #12
 8044fd0:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8044fd2:	68fb      	ldr	r3, [r7, #12]
 8044fd4:	681b      	ldr	r3, [r3, #0]
 8044fd6:	2b00      	cmp	r3, #0
 8044fd8:	d1eb      	bne.n	8044fb2 <Cmd_help+0x16>

	}
	// Return success.
	return (CMDLINE_OK);
 8044fda:	2300      	movs	r3, #0
}
 8044fdc:	4618      	mov	r0, r3
 8044fde:	3710      	adds	r7, #16
 8044fe0:	46bd      	mov	sp, r7
 8044fe2:	bd80      	pop	{r7, pc}
 8044fe4:	08045d2c 	.word	0x08045d2c
 8044fe8:	24000050 	.word	0x24000050
 8044fec:	08045d44 	.word	0x08045d44

08044ff0 <Cmd_get_temp>:
// Format: get_temp
// Get the temperature from NTC
//
//*****************************************************************************
int	Cmd_get_temp(int argc, char *argv[])
{
 8044ff0:	b580      	push	{r7, lr}
 8044ff2:	b084      	sub	sp, #16
 8044ff4:	af00      	add	r7, sp, #0
 8044ff6:	6078      	str	r0, [r7, #4]
 8044ff8:	6039      	str	r1, [r7, #0]
	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8044ffa:	687b      	ldr	r3, [r7, #4]
 8044ffc:	2b01      	cmp	r3, #1
 8044ffe:	dc01      	bgt.n	8045004 <Cmd_get_temp+0x14>
 8045000:	2303      	movs	r3, #3
 8045002:	e012      	b.n	804502a <Cmd_get_temp+0x3a>
	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8045004:	687b      	ldr	r3, [r7, #4]
 8045006:	2b02      	cmp	r3, #2
 8045008:	dd01      	ble.n	804500e <Cmd_get_temp+0x1e>
 804500a:	2302      	movs	r3, #2
 804500c:	e00d      	b.n	804502a <Cmd_get_temp+0x3a>

	uint8_t hehe = atoi(argv[1]);
 804500e:	683b      	ldr	r3, [r7, #0]
 8045010:	3304      	adds	r3, #4
 8045012:	681b      	ldr	r3, [r3, #0]
 8045014:	4618      	mov	r0, r3
 8045016:	f000 fd4f 	bl	8045ab8 <atoi>
 804501a:	4603      	mov	r3, r0
 804501c:	73fb      	strb	r3, [r7, #15]
	UARTprintf("\r\nNTC %d: ", hehe);
 804501e:	7bfb      	ldrb	r3, [r7, #15]
 8045020:	4619      	mov	r1, r3
 8045022:	4804      	ldr	r0, [pc, #16]	@ (8045034 <Cmd_get_temp+0x44>)
 8045024:	f000 fca8 	bl	8045978 <UARTprintf>

	return CMDLINE_OK;
 8045028:	2300      	movs	r3, #0
}
 804502a:	4618      	mov	r0, r3
 804502c:	3710      	adds	r7, #16
 804502e:	46bd      	mov	sp, r7
 8045030:	bd80      	pop	{r7, pc}
 8045032:	bf00      	nop
 8045034:	08045d48 	.word	0x08045d48

08045038 <Cmd_bootloader>:
// Format:
// Jump to bootloader mode
//
//*****************************************************************************
int Cmd_bootloader(int argc, char *argv[])
{
 8045038:	b580      	push	{r7, lr}
 804503a:	b082      	sub	sp, #8
 804503c:	af00      	add	r7, sp, #0
 804503e:	6078      	str	r0, [r7, #4]
 8045040:	6039      	str	r1, [r7, #0]
	full_system_reset();
 8045042:	f000 fcc1 	bl	80459c8 <full_system_reset>
	return CMDLINE_OK;
 8045046:	2300      	movs	r3, #0
}
 8045048:	4618      	mov	r0, r3
 804504a:	3708      	adds	r7, #8
 804504c:	46bd      	mov	sp, r7
 804504e:	bd80      	pop	{r7, pc}

08045050 <rbuffer_init>:
 */

// RINGBUFFER FUNCTIONS
#include "RingBuffer.h"

void rbuffer_init(volatile ringbuffer_t *rb) {
 8045050:	b480      	push	{r7}
 8045052:	b083      	sub	sp, #12
 8045054:	af00      	add	r7, sp, #0
 8045056:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8045058:	b672      	cpsid	i
}
 804505a:	bf00      	nop
	__disable_irq();
	rb->in = 0;
 804505c:	687b      	ldr	r3, [r7, #4]
 804505e:	2200      	movs	r2, #0
 8045060:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	rb->out = 0;
 8045064:	687b      	ldr	r3, [r7, #4]
 8045066:	2200      	movs	r2, #0
 8045068:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	rb->count = 0;
 804506c:	687b      	ldr	r3, [r7, #4]
 804506e:	2200      	movs	r2, #0
 8045070:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 8045074:	b662      	cpsie	i
}
 8045076:	bf00      	nop
	__enable_irq();
}
 8045078:	bf00      	nop
 804507a:	370c      	adds	r7, #12
 804507c:	46bd      	mov	sp, r7
 804507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045082:	4770      	bx	lr

08045084 <rbuffer_full>:

uint8_t rbuffer_count(volatile ringbuffer_t *rb) {
	return rb->count;
}

bool rbuffer_full(volatile ringbuffer_t *rb) {
 8045084:	b480      	push	{r7}
 8045086:	b083      	sub	sp, #12
 8045088:	af00      	add	r7, sp, #0
 804508a:	6078      	str	r0, [r7, #4]
	return (rb->count == (uint16_t) RingBufferSize);
 804508c:	687b      	ldr	r3, [r7, #4]
 804508e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8045092:	b29b      	uxth	r3, r3
 8045094:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8045098:	bf0c      	ite	eq
 804509a:	2301      	moveq	r3, #1
 804509c:	2300      	movne	r3, #0
 804509e:	b2db      	uxtb	r3, r3
}
 80450a0:	4618      	mov	r0, r3
 80450a2:	370c      	adds	r7, #12
 80450a4:	46bd      	mov	sp, r7
 80450a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80450aa:	4770      	bx	lr

080450ac <rbuffer_empty>:

bool rbuffer_empty(volatile ringbuffer_t *rb) {
 80450ac:	b480      	push	{r7}
 80450ae:	b083      	sub	sp, #12
 80450b0:	af00      	add	r7, sp, #0
 80450b2:	6078      	str	r0, [r7, #4]
	return (rb->count == 0);
 80450b4:	687b      	ldr	r3, [r7, #4]
 80450b6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80450ba:	b29b      	uxth	r3, r3
 80450bc:	2b00      	cmp	r3, #0
 80450be:	bf0c      	ite	eq
 80450c0:	2301      	moveq	r3, #1
 80450c2:	2300      	movne	r3, #0
 80450c4:	b2db      	uxtb	r3, r3
}
 80450c6:	4618      	mov	r0, r3
 80450c8:	370c      	adds	r7, #12
 80450ca:	46bd      	mov	sp, r7
 80450cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80450d0:	4770      	bx	lr

080450d2 <rbuffer_insert>:

void rbuffer_insert(char data, volatile ringbuffer_t *rb) {
 80450d2:	b480      	push	{r7}
 80450d4:	b083      	sub	sp, #12
 80450d6:	af00      	add	r7, sp, #0
 80450d8:	4603      	mov	r3, r0
 80450da:	6039      	str	r1, [r7, #0]
 80450dc:	71fb      	strb	r3, [r7, #7]
	*(rb->buffer + rb->in) = data;
 80450de:	683b      	ldr	r3, [r7, #0]
 80450e0:	683a      	ldr	r2, [r7, #0]
 80450e2:	f8b2 2100 	ldrh.w	r2, [r2, #256]	@ 0x100
 80450e6:	b292      	uxth	r2, r2
 80450e8:	4413      	add	r3, r2
 80450ea:	79fa      	ldrb	r2, [r7, #7]
 80450ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80450ee:	b672      	cpsid	i
}
 80450f0:	bf00      	nop
	__disable_irq();
	rb->in = (rb->in + 1) & ((uint16_t) RingBufferSize - 1);
 80450f2:	683b      	ldr	r3, [r7, #0]
 80450f4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80450f8:	b29b      	uxth	r3, r3
 80450fa:	3301      	adds	r3, #1
 80450fc:	b29b      	uxth	r3, r3
 80450fe:	b2db      	uxtb	r3, r3
 8045100:	b29a      	uxth	r2, r3
 8045102:	683b      	ldr	r3, [r7, #0]
 8045104:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	rb->count++;
 8045108:	683b      	ldr	r3, [r7, #0]
 804510a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 804510e:	b29b      	uxth	r3, r3
 8045110:	3301      	adds	r3, #1
 8045112:	b29a      	uxth	r2, r3
 8045114:	683b      	ldr	r3, [r7, #0]
 8045116:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 804511a:	b662      	cpsie	i
}
 804511c:	bf00      	nop
	__enable_irq();
}
 804511e:	bf00      	nop
 8045120:	370c      	adds	r7, #12
 8045122:	46bd      	mov	sp, r7
 8045124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045128:	4770      	bx	lr

0804512a <rbuffer_remove>:

char rbuffer_remove(volatile ringbuffer_t *rb) {
 804512a:	b480      	push	{r7}
 804512c:	b085      	sub	sp, #20
 804512e:	af00      	add	r7, sp, #0
 8045130:	6078      	str	r0, [r7, #4]
	char data = *(rb->buffer + rb->out);
 8045132:	687b      	ldr	r3, [r7, #4]
 8045134:	687a      	ldr	r2, [r7, #4]
 8045136:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 804513a:	b292      	uxth	r2, r2
 804513c:	4413      	add	r3, r2
 804513e:	781b      	ldrb	r3, [r3, #0]
 8045140:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8045142:	b672      	cpsid	i
}
 8045144:	bf00      	nop
	__disable_irq();
	rb->out = (rb->out + 1) & ((uint16_t) RingBufferSize - 1);
 8045146:	687b      	ldr	r3, [r7, #4]
 8045148:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 804514c:	b29b      	uxth	r3, r3
 804514e:	3301      	adds	r3, #1
 8045150:	b29b      	uxth	r3, r3
 8045152:	b2db      	uxtb	r3, r3
 8045154:	b29a      	uxth	r2, r3
 8045156:	687b      	ldr	r3, [r7, #4]
 8045158:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	rb->count--;
 804515c:	687b      	ldr	r3, [r7, #4]
 804515e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8045162:	b29b      	uxth	r3, r3
 8045164:	3b01      	subs	r3, #1
 8045166:	b29a      	uxth	r2, r3
 8045168:	687b      	ldr	r3, [r7, #4]
 804516a:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 804516e:	b662      	cpsie	i
}
 8045170:	bf00      	nop
	__enable_irq();
	return data;
 8045172:	7bfb      	ldrb	r3, [r7, #15]
}
 8045174:	4618      	mov	r0, r3
 8045176:	3714      	adds	r7, #20
 8045178:	46bd      	mov	sp, r7
 804517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804517e:	4770      	bx	lr

08045180 <LL_USART_IsActiveFlag_FE>:
{
 8045180:	b480      	push	{r7}
 8045182:	b083      	sub	sp, #12
 8045184:	af00      	add	r7, sp, #0
 8045186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8045188:	687b      	ldr	r3, [r7, #4]
 804518a:	69db      	ldr	r3, [r3, #28]
 804518c:	f003 0302 	and.w	r3, r3, #2
 8045190:	2b02      	cmp	r3, #2
 8045192:	d101      	bne.n	8045198 <LL_USART_IsActiveFlag_FE+0x18>
 8045194:	2301      	movs	r3, #1
 8045196:	e000      	b.n	804519a <LL_USART_IsActiveFlag_FE+0x1a>
 8045198:	2300      	movs	r3, #0
}
 804519a:	4618      	mov	r0, r3
 804519c:	370c      	adds	r7, #12
 804519e:	46bd      	mov	sp, r7
 80451a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80451a4:	4770      	bx	lr

080451a6 <LL_USART_IsActiveFlag_NE>:
{
 80451a6:	b480      	push	{r7}
 80451a8:	b083      	sub	sp, #12
 80451aa:	af00      	add	r7, sp, #0
 80451ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80451ae:	687b      	ldr	r3, [r7, #4]
 80451b0:	69db      	ldr	r3, [r3, #28]
 80451b2:	f003 0304 	and.w	r3, r3, #4
 80451b6:	2b04      	cmp	r3, #4
 80451b8:	d101      	bne.n	80451be <LL_USART_IsActiveFlag_NE+0x18>
 80451ba:	2301      	movs	r3, #1
 80451bc:	e000      	b.n	80451c0 <LL_USART_IsActiveFlag_NE+0x1a>
 80451be:	2300      	movs	r3, #0
}
 80451c0:	4618      	mov	r0, r3
 80451c2:	370c      	adds	r7, #12
 80451c4:	46bd      	mov	sp, r7
 80451c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80451ca:	4770      	bx	lr

080451cc <LL_USART_IsActiveFlag_ORE>:
{
 80451cc:	b480      	push	{r7}
 80451ce:	b083      	sub	sp, #12
 80451d0:	af00      	add	r7, sp, #0
 80451d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80451d4:	687b      	ldr	r3, [r7, #4]
 80451d6:	69db      	ldr	r3, [r3, #28]
 80451d8:	f003 0308 	and.w	r3, r3, #8
 80451dc:	2b08      	cmp	r3, #8
 80451de:	d101      	bne.n	80451e4 <LL_USART_IsActiveFlag_ORE+0x18>
 80451e0:	2301      	movs	r3, #1
 80451e2:	e000      	b.n	80451e6 <LL_USART_IsActiveFlag_ORE+0x1a>
 80451e4:	2300      	movs	r3, #0
}
 80451e6:	4618      	mov	r0, r3
 80451e8:	370c      	adds	r7, #12
 80451ea:	46bd      	mov	sp, r7
 80451ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80451f0:	4770      	bx	lr

080451f2 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 80451f2:	b480      	push	{r7}
 80451f4:	b083      	sub	sp, #12
 80451f6:	af00      	add	r7, sp, #0
 80451f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80451fa:	687b      	ldr	r3, [r7, #4]
 80451fc:	69db      	ldr	r3, [r3, #28]
 80451fe:	f003 0320 	and.w	r3, r3, #32
 8045202:	2b20      	cmp	r3, #32
 8045204:	d101      	bne.n	804520a <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8045206:	2301      	movs	r3, #1
 8045208:	e000      	b.n	804520c <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 804520a:	2300      	movs	r3, #0
}
 804520c:	4618      	mov	r0, r3
 804520e:	370c      	adds	r7, #12
 8045210:	46bd      	mov	sp, r7
 8045212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045216:	4770      	bx	lr

08045218 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8045218:	b480      	push	{r7}
 804521a:	b083      	sub	sp, #12
 804521c:	af00      	add	r7, sp, #0
 804521e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8045220:	687b      	ldr	r3, [r7, #4]
 8045222:	69db      	ldr	r3, [r3, #28]
 8045224:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8045228:	2b80      	cmp	r3, #128	@ 0x80
 804522a:	d101      	bne.n	8045230 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 804522c:	2301      	movs	r3, #1
 804522e:	e000      	b.n	8045232 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8045230:	2300      	movs	r3, #0
}
 8045232:	4618      	mov	r0, r3
 8045234:	370c      	adds	r7, #12
 8045236:	46bd      	mov	sp, r7
 8045238:	f85d 7b04 	ldr.w	r7, [sp], #4
 804523c:	4770      	bx	lr

0804523e <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 804523e:	b480      	push	{r7}
 8045240:	b083      	sub	sp, #12
 8045242:	af00      	add	r7, sp, #0
 8045244:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8045246:	687b      	ldr	r3, [r7, #4]
 8045248:	2202      	movs	r2, #2
 804524a:	621a      	str	r2, [r3, #32]
}
 804524c:	bf00      	nop
 804524e:	370c      	adds	r7, #12
 8045250:	46bd      	mov	sp, r7
 8045252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045256:	4770      	bx	lr

08045258 <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8045258:	b480      	push	{r7}
 804525a:	b083      	sub	sp, #12
 804525c:	af00      	add	r7, sp, #0
 804525e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8045260:	687b      	ldr	r3, [r7, #4]
 8045262:	2204      	movs	r2, #4
 8045264:	621a      	str	r2, [r3, #32]
}
 8045266:	bf00      	nop
 8045268:	370c      	adds	r7, #12
 804526a:	46bd      	mov	sp, r7
 804526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045270:	4770      	bx	lr

08045272 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8045272:	b480      	push	{r7}
 8045274:	b083      	sub	sp, #12
 8045276:	af00      	add	r7, sp, #0
 8045278:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 804527a:	687b      	ldr	r3, [r7, #4]
 804527c:	2208      	movs	r2, #8
 804527e:	621a      	str	r2, [r3, #32]
}
 8045280:	bf00      	nop
 8045282:	370c      	adds	r7, #12
 8045284:	46bd      	mov	sp, r7
 8045286:	f85d 7b04 	ldr.w	r7, [sp], #4
 804528a:	4770      	bx	lr

0804528c <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 804528c:	b480      	push	{r7}
 804528e:	b089      	sub	sp, #36	@ 0x24
 8045290:	af00      	add	r7, sp, #0
 8045292:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8045294:	687b      	ldr	r3, [r7, #4]
 8045296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045298:	68fb      	ldr	r3, [r7, #12]
 804529a:	e853 3f00 	ldrex	r3, [r3]
 804529e:	60bb      	str	r3, [r7, #8]
   return(result);
 80452a0:	68bb      	ldr	r3, [r7, #8]
 80452a2:	f043 0320 	orr.w	r3, r3, #32
 80452a6:	61fb      	str	r3, [r7, #28]
 80452a8:	687b      	ldr	r3, [r7, #4]
 80452aa:	69fa      	ldr	r2, [r7, #28]
 80452ac:	61ba      	str	r2, [r7, #24]
 80452ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80452b0:	6979      	ldr	r1, [r7, #20]
 80452b2:	69ba      	ldr	r2, [r7, #24]
 80452b4:	e841 2300 	strex	r3, r2, [r1]
 80452b8:	613b      	str	r3, [r7, #16]
   return(result);
 80452ba:	693b      	ldr	r3, [r7, #16]
 80452bc:	2b00      	cmp	r3, #0
 80452be:	d1e9      	bne.n	8045294 <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 80452c0:	bf00      	nop
 80452c2:	bf00      	nop
 80452c4:	3724      	adds	r7, #36	@ 0x24
 80452c6:	46bd      	mov	sp, r7
 80452c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80452cc:	4770      	bx	lr

080452ce <LL_USART_EnableIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 80452ce:	b480      	push	{r7}
 80452d0:	b089      	sub	sp, #36	@ 0x24
 80452d2:	af00      	add	r7, sp, #0
 80452d4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80452d6:	687b      	ldr	r3, [r7, #4]
 80452d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80452da:	68fb      	ldr	r3, [r7, #12]
 80452dc:	e853 3f00 	ldrex	r3, [r3]
 80452e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80452e2:	68bb      	ldr	r3, [r7, #8]
 80452e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80452e8:	61fb      	str	r3, [r7, #28]
 80452ea:	687b      	ldr	r3, [r7, #4]
 80452ec:	69fa      	ldr	r2, [r7, #28]
 80452ee:	61ba      	str	r2, [r7, #24]
 80452f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80452f2:	6979      	ldr	r1, [r7, #20]
 80452f4:	69ba      	ldr	r2, [r7, #24]
 80452f6:	e841 2300 	strex	r3, r2, [r1]
 80452fa:	613b      	str	r3, [r7, #16]
   return(result);
 80452fc:	693b      	ldr	r3, [r7, #16]
 80452fe:	2b00      	cmp	r3, #0
 8045300:	d1e9      	bne.n	80452d6 <LL_USART_EnableIT_TXE_TXFNF+0x8>
}
 8045302:	bf00      	nop
 8045304:	bf00      	nop
 8045306:	3724      	adds	r7, #36	@ 0x24
 8045308:	46bd      	mov	sp, r7
 804530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804530e:	4770      	bx	lr

08045310 <LL_USART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8045310:	b480      	push	{r7}
 8045312:	b089      	sub	sp, #36	@ 0x24
 8045314:	af00      	add	r7, sp, #0
 8045316:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8045318:	687b      	ldr	r3, [r7, #4]
 804531a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804531c:	68fb      	ldr	r3, [r7, #12]
 804531e:	e853 3f00 	ldrex	r3, [r3]
 8045322:	60bb      	str	r3, [r7, #8]
   return(result);
 8045324:	68bb      	ldr	r3, [r7, #8]
 8045326:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 804532a:	61fb      	str	r3, [r7, #28]
 804532c:	687b      	ldr	r3, [r7, #4]
 804532e:	69fa      	ldr	r2, [r7, #28]
 8045330:	61ba      	str	r2, [r7, #24]
 8045332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045334:	6979      	ldr	r1, [r7, #20]
 8045336:	69ba      	ldr	r2, [r7, #24]
 8045338:	e841 2300 	strex	r3, r2, [r1]
 804533c:	613b      	str	r3, [r7, #16]
   return(result);
 804533e:	693b      	ldr	r3, [r7, #16]
 8045340:	2b00      	cmp	r3, #0
 8045342:	d1e9      	bne.n	8045318 <LL_USART_DisableIT_TXE_TXFNF+0x8>
}
 8045344:	bf00      	nop
 8045346:	bf00      	nop
 8045348:	3724      	adds	r7, #36	@ 0x24
 804534a:	46bd      	mov	sp, r7
 804534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045350:	4770      	bx	lr

08045352 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
 8045352:	b480      	push	{r7}
 8045354:	b083      	sub	sp, #12
 8045356:	af00      	add	r7, sp, #0
 8045358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 804535a:	687b      	ldr	r3, [r7, #4]
 804535c:	681b      	ldr	r3, [r3, #0]
 804535e:	f003 0320 	and.w	r3, r3, #32
 8045362:	2b20      	cmp	r3, #32
 8045364:	d101      	bne.n	804536a <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8045366:	2301      	movs	r3, #1
 8045368:	e000      	b.n	804536c <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 804536a:	2300      	movs	r3, #0
}
 804536c:	4618      	mov	r0, r3
 804536e:	370c      	adds	r7, #12
 8045370:	46bd      	mov	sp, r7
 8045372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045376:	4770      	bx	lr

08045378 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8045378:	b480      	push	{r7}
 804537a:	b083      	sub	sp, #12
 804537c:	af00      	add	r7, sp, #0
 804537e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8045380:	687b      	ldr	r3, [r7, #4]
 8045382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8045384:	b2db      	uxtb	r3, r3
}
 8045386:	4618      	mov	r0, r3
 8045388:	370c      	adds	r7, #12
 804538a:	46bd      	mov	sp, r7
 804538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045390:	4770      	bx	lr

08045392 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8045392:	b480      	push	{r7}
 8045394:	b083      	sub	sp, #12
 8045396:	af00      	add	r7, sp, #0
 8045398:	6078      	str	r0, [r7, #4]
 804539a:	460b      	mov	r3, r1
 804539c:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 804539e:	78fa      	ldrb	r2, [r7, #3]
 80453a0:	687b      	ldr	r3, [r7, #4]
 80453a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80453a4:	bf00      	nop
 80453a6:	370c      	adds	r7, #12
 80453a8:	46bd      	mov	sp, r7
 80453aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80453ae:	4770      	bx	lr

080453b0 <USART2_IRQ>:
usart_meta_t *p_USART2_meta = &USART2_meta;

// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
// USART FUNCTIONS

void USART2_IRQ(void) {
 80453b0:	b580      	push	{r7, lr}
 80453b2:	b082      	sub	sp, #8
 80453b4:	af00      	add	r7, sp, #0
    uint8_t data;
    if (LL_USART_IsActiveFlag_TXE(USART2)) {
 80453b6:	4834      	ldr	r0, [pc, #208]	@ (8045488 <USART2_IRQ+0xd8>)
 80453b8:	f7ff ff2e 	bl	8045218 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80453bc:	4603      	mov	r3, r0
 80453be:	2b00      	cmp	r3, #0
 80453c0:	d01e      	beq.n	8045400 <USART2_IRQ+0x50>
        if (!rbuffer_empty(&p_USART2_meta->rb_tx)) {
 80453c2:	4b32      	ldr	r3, [pc, #200]	@ (804548c <USART2_IRQ+0xdc>)
 80453c4:	681b      	ldr	r3, [r3, #0]
 80453c6:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 80453ca:	4618      	mov	r0, r3
 80453cc:	f7ff fe6e 	bl	80450ac <rbuffer_empty>
 80453d0:	4603      	mov	r3, r0
 80453d2:	f083 0301 	eor.w	r3, r3, #1
 80453d6:	b2db      	uxtb	r3, r3
 80453d8:	2b00      	cmp	r3, #0
 80453da:	d00e      	beq.n	80453fa <USART2_IRQ+0x4a>
            data = rbuffer_remove(&p_USART2_meta->rb_tx);
 80453dc:	4b2b      	ldr	r3, [pc, #172]	@ (804548c <USART2_IRQ+0xdc>)
 80453de:	681b      	ldr	r3, [r3, #0]
 80453e0:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 80453e4:	4618      	mov	r0, r3
 80453e6:	f7ff fea0 	bl	804512a <rbuffer_remove>
 80453ea:	4603      	mov	r3, r0
 80453ec:	71fb      	strb	r3, [r7, #7]
            LL_USART_TransmitData8(USART2, (uint8_t)data);
 80453ee:	79fb      	ldrb	r3, [r7, #7]
 80453f0:	4619      	mov	r1, r3
 80453f2:	4825      	ldr	r0, [pc, #148]	@ (8045488 <USART2_IRQ+0xd8>)
 80453f4:	f7ff ffcd 	bl	8045392 <LL_USART_TransmitData8>
 80453f8:	e002      	b.n	8045400 <USART2_IRQ+0x50>
        } else {
            LL_USART_DisableIT_TXE(USART2);
 80453fa:	4823      	ldr	r0, [pc, #140]	@ (8045488 <USART2_IRQ+0xd8>)
 80453fc:	f7ff ff88 	bl	8045310 <LL_USART_DisableIT_TXE_TXFNF>
        }
    }
    if ((LL_USART_IsActiveFlag_RXNE(USART2) != RESET) && (LL_USART_IsEnabledIT_RXNE(USART2) != RESET)) {
 8045400:	4821      	ldr	r0, [pc, #132]	@ (8045488 <USART2_IRQ+0xd8>)
 8045402:	f7ff fef6 	bl	80451f2 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8045406:	4603      	mov	r3, r0
 8045408:	2b00      	cmp	r3, #0
 804540a:	d03a      	beq.n	8045482 <USART2_IRQ+0xd2>
 804540c:	481e      	ldr	r0, [pc, #120]	@ (8045488 <USART2_IRQ+0xd8>)
 804540e:	f7ff ffa0 	bl	8045352 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8045412:	4603      	mov	r3, r0
 8045414:	2b00      	cmp	r3, #0
 8045416:	d034      	beq.n	8045482 <USART2_IRQ+0xd2>
        unsigned char data = LL_USART_ReceiveData8(USART2);
 8045418:	481b      	ldr	r0, [pc, #108]	@ (8045488 <USART2_IRQ+0xd8>)
 804541a:	f7ff ffad 	bl	8045378 <LL_USART_ReceiveData8>
 804541e:	4603      	mov	r3, r0
 8045420:	71bb      	strb	r3, [r7, #6]

        if ((LL_USART_IsActiveFlag_ORE(USART2) != RESET) ||
 8045422:	4819      	ldr	r0, [pc, #100]	@ (8045488 <USART2_IRQ+0xd8>)
 8045424:	f7ff fed2 	bl	80451cc <LL_USART_IsActiveFlag_ORE>
 8045428:	4603      	mov	r3, r0
 804542a:	2b00      	cmp	r3, #0
 804542c:	d10b      	bne.n	8045446 <USART2_IRQ+0x96>
            (LL_USART_IsActiveFlag_FE(USART2) != RESET) ||
 804542e:	4816      	ldr	r0, [pc, #88]	@ (8045488 <USART2_IRQ+0xd8>)
 8045430:	f7ff fea6 	bl	8045180 <LL_USART_IsActiveFlag_FE>
 8045434:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(USART2) != RESET) ||
 8045436:	2b00      	cmp	r3, #0
 8045438:	d105      	bne.n	8045446 <USART2_IRQ+0x96>
            (LL_USART_IsActiveFlag_NE(USART2) != RESET)) {
 804543a:	4813      	ldr	r0, [pc, #76]	@ (8045488 <USART2_IRQ+0xd8>)
 804543c:	f7ff feb3 	bl	80451a6 <LL_USART_IsActiveFlag_NE>
 8045440:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(USART2) != RESET) ||
 8045442:	2b00      	cmp	r3, #0
 8045444:	d009      	beq.n	804545a <USART2_IRQ+0xaa>
            LL_USART_ClearFlag_ORE(USART2);
 8045446:	4810      	ldr	r0, [pc, #64]	@ (8045488 <USART2_IRQ+0xd8>)
 8045448:	f7ff ff13 	bl	8045272 <LL_USART_ClearFlag_ORE>
            LL_USART_ClearFlag_FE(USART2);
 804544c:	480e      	ldr	r0, [pc, #56]	@ (8045488 <USART2_IRQ+0xd8>)
 804544e:	f7ff fef6 	bl	804523e <LL_USART_ClearFlag_FE>
            LL_USART_ClearFlag_NE(USART2);
 8045452:	480d      	ldr	r0, [pc, #52]	@ (8045488 <USART2_IRQ+0xd8>)
 8045454:	f7ff ff00 	bl	8045258 <LL_USART_ClearFlag_NE>
        } else {
            if (!rbuffer_full(&p_USART2_meta->rb_rx)) {
                rbuffer_insert(data, &p_USART2_meta->rb_rx);
            }
        }
        return;
 8045458:	e012      	b.n	8045480 <USART2_IRQ+0xd0>
            if (!rbuffer_full(&p_USART2_meta->rb_rx)) {
 804545a:	4b0c      	ldr	r3, [pc, #48]	@ (804548c <USART2_IRQ+0xdc>)
 804545c:	681b      	ldr	r3, [r3, #0]
 804545e:	4618      	mov	r0, r3
 8045460:	f7ff fe10 	bl	8045084 <rbuffer_full>
 8045464:	4603      	mov	r3, r0
 8045466:	f083 0301 	eor.w	r3, r3, #1
 804546a:	b2db      	uxtb	r3, r3
 804546c:	2b00      	cmp	r3, #0
 804546e:	d007      	beq.n	8045480 <USART2_IRQ+0xd0>
                rbuffer_insert(data, &p_USART2_meta->rb_rx);
 8045470:	4b06      	ldr	r3, [pc, #24]	@ (804548c <USART2_IRQ+0xdc>)
 8045472:	681b      	ldr	r3, [r3, #0]
 8045474:	461a      	mov	r2, r3
 8045476:	79bb      	ldrb	r3, [r7, #6]
 8045478:	4611      	mov	r1, r2
 804547a:	4618      	mov	r0, r3
 804547c:	f7ff fe29 	bl	80450d2 <rbuffer_insert>
        return;
 8045480:	bf00      	nop
    }
}
 8045482:	3708      	adds	r7, #8
 8045484:	46bd      	mov	sp, r7
 8045486:	bd80      	pop	{r7, pc}
 8045488:	40004400 	.word	0x40004400
 804548c:	24000080 	.word	0x24000080

08045490 <USART2_init>:

void USART2_init(void) {
 8045490:	b580      	push	{r7, lr}
 8045492:	af00      	add	r7, sp, #0
    rbuffer_init(&p_USART2_meta->rb_tx); // Init Tx buffer
 8045494:	4b08      	ldr	r3, [pc, #32]	@ (80454b8 <USART2_init+0x28>)
 8045496:	681b      	ldr	r3, [r3, #0]
 8045498:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 804549c:	4618      	mov	r0, r3
 804549e:	f7ff fdd7 	bl	8045050 <rbuffer_init>
    rbuffer_init(&p_USART2_meta->rb_rx); // Init Rx buffer
 80454a2:	4b05      	ldr	r3, [pc, #20]	@ (80454b8 <USART2_init+0x28>)
 80454a4:	681b      	ldr	r3, [r3, #0]
 80454a6:	4618      	mov	r0, r3
 80454a8:	f7ff fdd2 	bl	8045050 <rbuffer_init>
    LL_USART_EnableIT_RXNE(USART2);
 80454ac:	4803      	ldr	r0, [pc, #12]	@ (80454bc <USART2_init+0x2c>)
 80454ae:	f7ff feed 	bl	804528c <LL_USART_EnableIT_RXNE_RXFNE>
}
 80454b2:	bf00      	nop
 80454b4:	bd80      	pop	{r7, pc}
 80454b6:	bf00      	nop
 80454b8:	24000080 	.word	0x24000080
 80454bc:	40004400 	.word	0x40004400

080454c0 <USART2_send_char>:

void USART2_send_char(char c) {
 80454c0:	b580      	push	{r7, lr}
 80454c2:	b082      	sub	sp, #8
 80454c4:	af00      	add	r7, sp, #0
 80454c6:	4603      	mov	r3, r0
 80454c8:	71fb      	strb	r3, [r7, #7]
    while (rbuffer_full(&p_USART2_meta->rb_tx))
 80454ca:	bf00      	nop
 80454cc:	4b0c      	ldr	r3, [pc, #48]	@ (8045500 <USART2_send_char+0x40>)
 80454ce:	681b      	ldr	r3, [r3, #0]
 80454d0:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 80454d4:	4618      	mov	r0, r3
 80454d6:	f7ff fdd5 	bl	8045084 <rbuffer_full>
 80454da:	4603      	mov	r3, r0
 80454dc:	2b00      	cmp	r3, #0
 80454de:	d1f5      	bne.n	80454cc <USART2_send_char+0xc>
        ;
    rbuffer_insert(c, &p_USART2_meta->rb_tx);
 80454e0:	4b07      	ldr	r3, [pc, #28]	@ (8045500 <USART2_send_char+0x40>)
 80454e2:	681b      	ldr	r3, [r3, #0]
 80454e4:	f503 7283 	add.w	r2, r3, #262	@ 0x106
 80454e8:	79fb      	ldrb	r3, [r7, #7]
 80454ea:	4611      	mov	r1, r2
 80454ec:	4618      	mov	r0, r3
 80454ee:	f7ff fdf0 	bl	80450d2 <rbuffer_insert>
    LL_USART_EnableIT_TXE(USART2);
 80454f2:	4804      	ldr	r0, [pc, #16]	@ (8045504 <USART2_send_char+0x44>)
 80454f4:	f7ff feeb 	bl	80452ce <LL_USART_EnableIT_TXE_TXFNF>
}
 80454f8:	bf00      	nop
 80454fa:	3708      	adds	r7, #8
 80454fc:	46bd      	mov	sp, r7
 80454fe:	bd80      	pop	{r7, pc}
 8045500:	24000080 	.word	0x24000080
 8045504:	40004400 	.word	0x40004400

08045508 <USART2_send_string>:

void USART2_send_string(const char *str) {
 8045508:	b580      	push	{r7, lr}
 804550a:	b082      	sub	sp, #8
 804550c:	af00      	add	r7, sp, #0
 804550e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8045510:	e006      	b.n	8045520 <USART2_send_string+0x18>
        USART2_send_char(*str++);
 8045512:	687b      	ldr	r3, [r7, #4]
 8045514:	1c5a      	adds	r2, r3, #1
 8045516:	607a      	str	r2, [r7, #4]
 8045518:	781b      	ldrb	r3, [r3, #0]
 804551a:	4618      	mov	r0, r3
 804551c:	f7ff ffd0 	bl	80454c0 <USART2_send_char>
    while (*str) {
 8045520:	687b      	ldr	r3, [r7, #4]
 8045522:	781b      	ldrb	r3, [r3, #0]
 8045524:	2b00      	cmp	r3, #0
 8045526:	d1f4      	bne.n	8045512 <USART2_send_string+0xa>
    }
}
 8045528:	bf00      	nop
 804552a:	bf00      	nop
 804552c:	3708      	adds	r7, #8
 804552e:	46bd      	mov	sp, r7
 8045530:	bd80      	pop	{r7, pc}

08045532 <USART2_send_array>:

void USART2_send_array(const char *str, uint8_t len) {
 8045532:	b580      	push	{r7, lr}
 8045534:	b084      	sub	sp, #16
 8045536:	af00      	add	r7, sp, #0
 8045538:	6078      	str	r0, [r7, #4]
 804553a:	460b      	mov	r3, r1
 804553c:	70fb      	strb	r3, [r7, #3]
    uint8_t udx;
    for (udx = 0; udx < len; udx++) {
 804553e:	2300      	movs	r3, #0
 8045540:	73fb      	strb	r3, [r7, #15]
 8045542:	e009      	b.n	8045558 <USART2_send_array+0x26>
        USART2_send_char(*str++);
 8045544:	687b      	ldr	r3, [r7, #4]
 8045546:	1c5a      	adds	r2, r3, #1
 8045548:	607a      	str	r2, [r7, #4]
 804554a:	781b      	ldrb	r3, [r3, #0]
 804554c:	4618      	mov	r0, r3
 804554e:	f7ff ffb7 	bl	80454c0 <USART2_send_char>
    for (udx = 0; udx < len; udx++) {
 8045552:	7bfb      	ldrb	r3, [r7, #15]
 8045554:	3301      	adds	r3, #1
 8045556:	73fb      	strb	r3, [r7, #15]
 8045558:	7bfa      	ldrb	r2, [r7, #15]
 804555a:	78fb      	ldrb	r3, [r7, #3]
 804555c:	429a      	cmp	r2, r3
 804555e:	d3f1      	bcc.n	8045544 <USART2_send_array+0x12>
    }
}
 8045560:	bf00      	nop
 8045562:	bf00      	nop
 8045564:	3710      	adds	r7, #16
 8045566:	46bd      	mov	sp, r7
 8045568:	bd80      	pop	{r7, pc}
	...

0804556c <uart_get_USART2_rx_buffer_address>:
    LL_USART_Init(USART2, &USART_InitStruct);
    LL_USART_ConfigAsyncMode(USART2);
    LL_USART_Enable(USART2);
}

volatile ringbuffer_t* uart_get_USART2_rx_buffer_address(void) {
 804556c:	b480      	push	{r7}
 804556e:	af00      	add	r7, sp, #0
    return &p_USART2_meta->rb_rx; // Trả về địa chỉ buffer Rx
 8045570:	4b03      	ldr	r3, [pc, #12]	@ (8045580 <uart_get_USART2_rx_buffer_address+0x14>)
 8045572:	681b      	ldr	r3, [r3, #0]
}
 8045574:	4618      	mov	r0, r3
 8045576:	46bd      	mov	sp, r7
 8045578:	f85d 7b04 	ldr.w	r7, [sp], #4
 804557c:	4770      	bx	lr
 804557e:	bf00      	nop
 8045580:	24000080 	.word	0x24000080

08045584 <UARTvprintf>:

static void UARTvprintf(const char *pcString, va_list vaArgP)
{
 8045584:	b580      	push	{r7, lr}
 8045586:	b08e      	sub	sp, #56	@ 0x38
 8045588:	af00      	add	r7, sp, #0
 804558a:	6078      	str	r0, [r7, #4]
 804558c:	6039      	str	r1, [r7, #0]
    char *pcStr, pcBuf[16], cFill;

    //
    // Loop while there are more characters in the string.
    //
    while(*pcString)
 804558e:	e1e2      	b.n	8045956 <UARTvprintf+0x3d2>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
 8045590:	2300      	movs	r3, #0
 8045592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8045594:	e002      	b.n	804559c <UARTvprintf+0x18>
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
            ui32Idx++)
 8045596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8045598:	3301      	adds	r3, #1
 804559a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
 804559c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804559e:	687a      	ldr	r2, [r7, #4]
 80455a0:	4413      	add	r3, r2
 80455a2:	781b      	ldrb	r3, [r3, #0]
 80455a4:	2b25      	cmp	r3, #37	@ 0x25
 80455a6:	d005      	beq.n	80455b4 <UARTvprintf+0x30>
 80455a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80455aa:	687a      	ldr	r2, [r7, #4]
 80455ac:	4413      	add	r3, r2
 80455ae:	781b      	ldrb	r3, [r3, #0]
 80455b0:	2b00      	cmp	r3, #0
 80455b2:	d1f0      	bne.n	8045596 <UARTvprintf+0x12>
        }

        //
        // Write this portion of the string.
        //
        CONSOLE_UART_WRITE(pcString, ui32Idx);
 80455b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80455b6:	b2db      	uxtb	r3, r3
 80455b8:	4619      	mov	r1, r3
 80455ba:	6878      	ldr	r0, [r7, #4]
 80455bc:	f7ff ffb9 	bl	8045532 <USART2_send_array>

        //
        // Skip the portion of the string that was written.
        //
        pcString += ui32Idx;
 80455c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80455c2:	687a      	ldr	r2, [r7, #4]
 80455c4:	4413      	add	r3, r2
 80455c6:	607b      	str	r3, [r7, #4]

        //
        // See if the next character is a %.
        //
        if(*pcString == '%')
 80455c8:	687b      	ldr	r3, [r7, #4]
 80455ca:	781b      	ldrb	r3, [r3, #0]
 80455cc:	2b25      	cmp	r3, #37	@ 0x25
 80455ce:	f040 81c2 	bne.w	8045956 <UARTvprintf+0x3d2>
        {
            //
            // Skip the %.
            //
            pcString++;
 80455d2:	687b      	ldr	r3, [r7, #4]
 80455d4:	3301      	adds	r3, #1
 80455d6:	607b      	str	r3, [r7, #4]

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui32Count = 0;
 80455d8:	2300      	movs	r3, #0
 80455da:	623b      	str	r3, [r7, #32]
            cFill = ' ';
 80455dc:	2320      	movs	r3, #32
 80455de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
 80455e2:	687b      	ldr	r3, [r7, #4]
 80455e4:	1c5a      	adds	r2, r3, #1
 80455e6:	607a      	str	r2, [r7, #4]
 80455e8:	781b      	ldrb	r3, [r3, #0]
 80455ea:	3b25      	subs	r3, #37	@ 0x25
 80455ec:	2b53      	cmp	r3, #83	@ 0x53
 80455ee:	f200 81ac 	bhi.w	804594a <UARTvprintf+0x3c6>
 80455f2:	a201      	add	r2, pc, #4	@ (adr r2, 80455f8 <UARTvprintf+0x74>)
 80455f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80455f8:	0804593d 	.word	0x0804593d
 80455fc:	0804594b 	.word	0x0804594b
 8045600:	0804594b 	.word	0x0804594b
 8045604:	0804594b 	.word	0x0804594b
 8045608:	0804594b 	.word	0x0804594b
 804560c:	0804594b 	.word	0x0804594b
 8045610:	0804594b 	.word	0x0804594b
 8045614:	0804594b 	.word	0x0804594b
 8045618:	0804594b 	.word	0x0804594b
 804561c:	0804594b 	.word	0x0804594b
 8045620:	0804594b 	.word	0x0804594b
 8045624:	08045749 	.word	0x08045749
 8045628:	08045749 	.word	0x08045749
 804562c:	08045749 	.word	0x08045749
 8045630:	08045749 	.word	0x08045749
 8045634:	08045749 	.word	0x08045749
 8045638:	08045749 	.word	0x08045749
 804563c:	08045749 	.word	0x08045749
 8045640:	08045749 	.word	0x08045749
 8045644:	08045749 	.word	0x08045749
 8045648:	08045749 	.word	0x08045749
 804564c:	0804594b 	.word	0x0804594b
 8045650:	0804594b 	.word	0x0804594b
 8045654:	0804594b 	.word	0x0804594b
 8045658:	0804594b 	.word	0x0804594b
 804565c:	0804594b 	.word	0x0804594b
 8045660:	0804594b 	.word	0x0804594b
 8045664:	0804594b 	.word	0x0804594b
 8045668:	0804594b 	.word	0x0804594b
 804566c:	0804594b 	.word	0x0804594b
 8045670:	0804594b 	.word	0x0804594b
 8045674:	0804594b 	.word	0x0804594b
 8045678:	0804594b 	.word	0x0804594b
 804567c:	0804594b 	.word	0x0804594b
 8045680:	0804594b 	.word	0x0804594b
 8045684:	0804594b 	.word	0x0804594b
 8045688:	0804594b 	.word	0x0804594b
 804568c:	0804594b 	.word	0x0804594b
 8045690:	0804594b 	.word	0x0804594b
 8045694:	0804594b 	.word	0x0804594b
 8045698:	0804594b 	.word	0x0804594b
 804569c:	0804594b 	.word	0x0804594b
 80456a0:	0804594b 	.word	0x0804594b
 80456a4:	0804594b 	.word	0x0804594b
 80456a8:	0804594b 	.word	0x0804594b
 80456ac:	0804594b 	.word	0x0804594b
 80456b0:	0804594b 	.word	0x0804594b
 80456b4:	0804594b 	.word	0x0804594b
 80456b8:	0804594b 	.word	0x0804594b
 80456bc:	0804594b 	.word	0x0804594b
 80456c0:	0804594b 	.word	0x0804594b
 80456c4:	0804582d 	.word	0x0804582d
 80456c8:	0804594b 	.word	0x0804594b
 80456cc:	0804594b 	.word	0x0804594b
 80456d0:	0804594b 	.word	0x0804594b
 80456d4:	0804594b 	.word	0x0804594b
 80456d8:	0804594b 	.word	0x0804594b
 80456dc:	0804594b 	.word	0x0804594b
 80456e0:	0804594b 	.word	0x0804594b
 80456e4:	0804594b 	.word	0x0804594b
 80456e8:	0804594b 	.word	0x0804594b
 80456ec:	0804594b 	.word	0x0804594b
 80456f0:	0804577d 	.word	0x0804577d
 80456f4:	08045795 	.word	0x08045795
 80456f8:	0804594b 	.word	0x0804594b
 80456fc:	0804594b 	.word	0x0804594b
 8045700:	0804594b 	.word	0x0804594b
 8045704:	0804594b 	.word	0x0804594b
 8045708:	08045795 	.word	0x08045795
 804570c:	0804594b 	.word	0x0804594b
 8045710:	0804594b 	.word	0x0804594b
 8045714:	0804594b 	.word	0x0804594b
 8045718:	0804594b 	.word	0x0804594b
 804571c:	0804594b 	.word	0x0804594b
 8045720:	0804594b 	.word	0x0804594b
 8045724:	0804582d 	.word	0x0804582d
 8045728:	0804594b 	.word	0x0804594b
 804572c:	0804594b 	.word	0x0804594b
 8045730:	080457bf 	.word	0x080457bf
 8045734:	0804594b 	.word	0x0804594b
 8045738:	08045815 	.word	0x08045815
 804573c:	0804594b 	.word	0x0804594b
 8045740:	0804594b 	.word	0x0804594b
 8045744:	0804582d 	.word	0x0804582d
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pcString[-1] == '0') && (ui32Count == 0))
 8045748:	687b      	ldr	r3, [r7, #4]
 804574a:	3b01      	subs	r3, #1
 804574c:	781b      	ldrb	r3, [r3, #0]
 804574e:	2b30      	cmp	r3, #48	@ 0x30
 8045750:	d105      	bne.n	804575e <UARTvprintf+0x1da>
 8045752:	6a3b      	ldr	r3, [r7, #32]
 8045754:	2b00      	cmp	r3, #0
 8045756:	d102      	bne.n	804575e <UARTvprintf+0x1da>
                    {
                        cFill = '0';
 8045758:	2330      	movs	r3, #48	@ 0x30
 804575a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                    }

                    //
                    // Update the digit count.
                    //
                    ui32Count *= 10;
 804575e:	6a3a      	ldr	r2, [r7, #32]
 8045760:	4613      	mov	r3, r2
 8045762:	009b      	lsls	r3, r3, #2
 8045764:	4413      	add	r3, r2
 8045766:	005b      	lsls	r3, r3, #1
 8045768:	623b      	str	r3, [r7, #32]
                    ui32Count += pcString[-1] - '0';
 804576a:	687b      	ldr	r3, [r7, #4]
 804576c:	3b01      	subs	r3, #1
 804576e:	781b      	ldrb	r3, [r3, #0]
 8045770:	461a      	mov	r2, r3
 8045772:	6a3b      	ldr	r3, [r7, #32]
 8045774:	4413      	add	r3, r2
 8045776:	3b30      	subs	r3, #48	@ 0x30
 8045778:	623b      	str	r3, [r7, #32]

                    //
                    // Get the next character.
                    //
                    goto again;
 804577a:	e732      	b.n	80455e2 <UARTvprintf+0x5e>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 804577c:	683b      	ldr	r3, [r7, #0]
 804577e:	1d1a      	adds	r2, r3, #4
 8045780:	603a      	str	r2, [r7, #0]
 8045782:	681b      	ldr	r3, [r3, #0]
 8045784:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Print out the character.
                    //
                    CONSOLE_UART_WRITE((char *)&ui32Value, 1);
 8045786:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 804578a:	2101      	movs	r1, #1
 804578c:	4618      	mov	r0, r3
 804578e:	f7ff fed0 	bl	8045532 <USART2_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
 8045792:	e0e0      	b.n	8045956 <UARTvprintf+0x3d2>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8045794:	683b      	ldr	r3, [r7, #0]
 8045796:	1d1a      	adds	r2, r3, #4
 8045798:	603a      	str	r2, [r7, #0]
 804579a:	681b      	ldr	r3, [r3, #0]
 804579c:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 804579e:	2300      	movs	r3, #0
 80457a0:	627b      	str	r3, [r7, #36]	@ 0x24

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int32_t)ui32Value < 0)
 80457a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80457a4:	2b00      	cmp	r3, #0
 80457a6:	da05      	bge.n	80457b4 <UARTvprintf+0x230>
                    {
                        //
                        // Make the value positive.
                        //
                        ui32Value = -(int32_t)ui32Value;
 80457a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80457aa:	425b      	negs	r3, r3
 80457ac:	62bb      	str	r3, [r7, #40]	@ 0x28

                        //
                        // Indicate that the value is negative.
                        //
                        ui32Neg = 1;
 80457ae:	2301      	movs	r3, #1
 80457b0:	61bb      	str	r3, [r7, #24]
 80457b2:	e001      	b.n	80457b8 <UARTvprintf+0x234>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui32Neg = 0;
 80457b4:	2300      	movs	r3, #0
 80457b6:	61bb      	str	r3, [r7, #24]
                    }

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
 80457b8:	230a      	movs	r3, #10
 80457ba:	61fb      	str	r3, [r7, #28]

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 80457bc:	e041      	b.n	8045842 <UARTvprintf+0x2be>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 80457be:	683b      	ldr	r3, [r7, #0]
 80457c0:	1d1a      	adds	r2, r3, #4
 80457c2:	603a      	str	r2, [r7, #0]
 80457c4:	681b      	ldr	r3, [r3, #0]
 80457c6:	633b      	str	r3, [r7, #48]	@ 0x30

                    //
                    // Determine the length of the string.
                    //
                    for(ui32Idx = 0; pcStr[ui32Idx] != '\0'; ui32Idx++)
 80457c8:	2300      	movs	r3, #0
 80457ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80457cc:	e002      	b.n	80457d4 <UARTvprintf+0x250>
 80457ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80457d0:	3301      	adds	r3, #1
 80457d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80457d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80457d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80457d8:	4413      	add	r3, r2
 80457da:	781b      	ldrb	r3, [r3, #0]
 80457dc:	2b00      	cmp	r3, #0
 80457de:	d1f6      	bne.n	80457ce <UARTvprintf+0x24a>
                    }

                    //
                    // Write the string.
                    //
                    CONSOLE_UART_WRITE(pcStr, ui32Idx);
 80457e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80457e2:	b2db      	uxtb	r3, r3
 80457e4:	4619      	mov	r1, r3
 80457e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80457e8:	f7ff fea3 	bl	8045532 <USART2_send_array>

                    //
                    // Write any required padding spaces
                    //
                    if(ui32Count > ui32Idx)
 80457ec:	6a3a      	ldr	r2, [r7, #32]
 80457ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80457f0:	429a      	cmp	r2, r3
 80457f2:	f240 80af 	bls.w	8045954 <UARTvprintf+0x3d0>
                    {
                        ui32Count -= ui32Idx;
 80457f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80457f8:	6a3a      	ldr	r2, [r7, #32]
 80457fa:	1ad3      	subs	r3, r2, r3
 80457fc:	623b      	str	r3, [r7, #32]
                        while(ui32Count--)
 80457fe:	e003      	b.n	8045808 <UARTvprintf+0x284>
                        {
                            CONSOLE_UART_WRITE(" ", 1);
 8045800:	2101      	movs	r1, #1
 8045802:	485a      	ldr	r0, [pc, #360]	@ (804596c <UARTvprintf+0x3e8>)
 8045804:	f7ff fe95 	bl	8045532 <USART2_send_array>
                        while(ui32Count--)
 8045808:	6a3b      	ldr	r3, [r7, #32]
 804580a:	1e5a      	subs	r2, r3, #1
 804580c:	623a      	str	r2, [r7, #32]
 804580e:	2b00      	cmp	r3, #0
 8045810:	d1f6      	bne.n	8045800 <UARTvprintf+0x27c>
                    }

                    //
                    // This command has been handled.
                    //
                    break;
 8045812:	e09f      	b.n	8045954 <UARTvprintf+0x3d0>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8045814:	683b      	ldr	r3, [r7, #0]
 8045816:	1d1a      	adds	r2, r3, #4
 8045818:	603a      	str	r2, [r7, #0]
 804581a:	681b      	ldr	r3, [r3, #0]
 804581c:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 804581e:	2300      	movs	r3, #0
 8045820:	627b      	str	r3, [r7, #36]	@ 0x24

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
 8045822:	230a      	movs	r3, #10
 8045824:	61fb      	str	r3, [r7, #28]

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
 8045826:	2300      	movs	r3, #0
 8045828:	61bb      	str	r3, [r7, #24]

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 804582a:	e00a      	b.n	8045842 <UARTvprintf+0x2be>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 804582c:	683b      	ldr	r3, [r7, #0]
 804582e:	1d1a      	adds	r2, r3, #4
 8045830:	603a      	str	r2, [r7, #0]
 8045832:	681b      	ldr	r3, [r3, #0]
 8045834:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 8045836:	2300      	movs	r3, #0
 8045838:	627b      	str	r3, [r7, #36]	@ 0x24

                    //
                    // Set the base to 16.
                    //
                    ui32Base = 16;
 804583a:	2310      	movs	r3, #16
 804583c:	61fb      	str	r3, [r7, #28]

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
 804583e:	2300      	movs	r3, #0
 8045840:	61bb      	str	r3, [r7, #24]
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
 8045842:	2301      	movs	r3, #1
 8045844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8045846:	e007      	b.n	8045858 <UARTvprintf+0x2d4>
                        (((ui32Idx * ui32Base) <= ui32Value) &&
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
                        ui32Idx *= ui32Base, ui32Count--)
 8045848:	69fb      	ldr	r3, [r7, #28]
 804584a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 804584c:	fb02 f303 	mul.w	r3, r2, r3
 8045850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8045852:	6a3b      	ldr	r3, [r7, #32]
 8045854:	3b01      	subs	r3, #1
 8045856:	623b      	str	r3, [r7, #32]
                        (((ui32Idx * ui32Base) <= ui32Value) &&
 8045858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804585a:	69fa      	ldr	r2, [r7, #28]
 804585c:	fb03 f202 	mul.w	r2, r3, r2
 8045860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8045862:	429a      	cmp	r2, r3
 8045864:	d809      	bhi.n	804587a <UARTvprintf+0x2f6>
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
 8045866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8045868:	69fa      	ldr	r2, [r7, #28]
 804586a:	fb03 f202 	mul.w	r2, r3, r2
 804586e:	69fb      	ldr	r3, [r7, #28]
 8045870:	fbb2 f2f3 	udiv	r2, r2, r3
 8045874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                        (((ui32Idx * ui32Base) <= ui32Value) &&
 8045876:	429a      	cmp	r2, r3
 8045878:	d0e6      	beq.n	8045848 <UARTvprintf+0x2c4>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui32Neg)
 804587a:	69bb      	ldr	r3, [r7, #24]
 804587c:	2b00      	cmp	r3, #0
 804587e:	d002      	beq.n	8045886 <UARTvprintf+0x302>
                    {
                        ui32Count--;
 8045880:	6a3b      	ldr	r3, [r7, #32]
 8045882:	3b01      	subs	r3, #1
 8045884:	623b      	str	r3, [r7, #32]

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui32Neg && (cFill == '0'))
 8045886:	69bb      	ldr	r3, [r7, #24]
 8045888:	2b00      	cmp	r3, #0
 804588a:	d00d      	beq.n	80458a8 <UARTvprintf+0x324>
 804588c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8045890:	2b30      	cmp	r3, #48	@ 0x30
 8045892:	d109      	bne.n	80458a8 <UARTvprintf+0x324>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
 8045894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8045896:	1c5a      	adds	r2, r3, #1
 8045898:	627a      	str	r2, [r7, #36]	@ 0x24
 804589a:	3338      	adds	r3, #56	@ 0x38
 804589c:	443b      	add	r3, r7
 804589e:	222d      	movs	r2, #45	@ 0x2d
 80458a0:	f803 2c30 	strb.w	r2, [r3, #-48]

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui32Neg = 0;
 80458a4:	2300      	movs	r3, #0
 80458a6:	61bb      	str	r3, [r7, #24]

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui32Count > 1) && (ui32Count < 16))
 80458a8:	6a3b      	ldr	r3, [r7, #32]
 80458aa:	2b01      	cmp	r3, #1
 80458ac:	d915      	bls.n	80458da <UARTvprintf+0x356>
 80458ae:	6a3b      	ldr	r3, [r7, #32]
 80458b0:	2b0f      	cmp	r3, #15
 80458b2:	d812      	bhi.n	80458da <UARTvprintf+0x356>
                    {
                        for(ui32Count--; ui32Count; ui32Count--)
 80458b4:	6a3b      	ldr	r3, [r7, #32]
 80458b6:	3b01      	subs	r3, #1
 80458b8:	623b      	str	r3, [r7, #32]
 80458ba:	e00b      	b.n	80458d4 <UARTvprintf+0x350>
                        {
                            pcBuf[ui32Pos++] = cFill;
 80458bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80458be:	1c5a      	adds	r2, r3, #1
 80458c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80458c2:	3338      	adds	r3, #56	@ 0x38
 80458c4:	443b      	add	r3, r7
 80458c6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80458ca:	f803 2c30 	strb.w	r2, [r3, #-48]
                        for(ui32Count--; ui32Count; ui32Count--)
 80458ce:	6a3b      	ldr	r3, [r7, #32]
 80458d0:	3b01      	subs	r3, #1
 80458d2:	623b      	str	r3, [r7, #32]
 80458d4:	6a3b      	ldr	r3, [r7, #32]
 80458d6:	2b00      	cmp	r3, #0
 80458d8:	d1f0      	bne.n	80458bc <UARTvprintf+0x338>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui32Neg)
 80458da:	69bb      	ldr	r3, [r7, #24]
 80458dc:	2b00      	cmp	r3, #0
 80458de:	d021      	beq.n	8045924 <UARTvprintf+0x3a0>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
 80458e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80458e2:	1c5a      	adds	r2, r3, #1
 80458e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80458e6:	3338      	adds	r3, #56	@ 0x38
 80458e8:	443b      	add	r3, r7
 80458ea:	222d      	movs	r2, #45	@ 0x2d
 80458ec:	f803 2c30 	strb.w	r2, [r3, #-48]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
 80458f0:	e018      	b.n	8045924 <UARTvprintf+0x3a0>
                    {
                        pcBuf[ui32Pos++] =
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
 80458f2:	481f      	ldr	r0, [pc, #124]	@ (8045970 <UARTvprintf+0x3ec>)
 80458f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80458f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80458f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80458fc:	69fa      	ldr	r2, [r7, #28]
 80458fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8045902:	fb01 f202 	mul.w	r2, r1, r2
 8045906:	1a9b      	subs	r3, r3, r2
 8045908:	18c2      	adds	r2, r0, r3
                        pcBuf[ui32Pos++] =
 804590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804590c:	1c59      	adds	r1, r3, #1
 804590e:	6279      	str	r1, [r7, #36]	@ 0x24
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
 8045910:	7812      	ldrb	r2, [r2, #0]
                        pcBuf[ui32Pos++] =
 8045912:	3338      	adds	r3, #56	@ 0x38
 8045914:	443b      	add	r3, r7
 8045916:	f803 2c30 	strb.w	r2, [r3, #-48]
                    for(; ui32Idx; ui32Idx /= ui32Base)
 804591a:	69fb      	ldr	r3, [r7, #28]
 804591c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 804591e:	fbb2 f3f3 	udiv	r3, r2, r3
 8045922:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8045924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8045926:	2b00      	cmp	r3, #0
 8045928:	d1e3      	bne.n	80458f2 <UARTvprintf+0x36e>
                    }

                    //
                    // Write the string.
                    //
                    CONSOLE_UART_WRITE(pcBuf, ui32Pos);
 804592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804592c:	b2da      	uxtb	r2, r3
 804592e:	f107 0308 	add.w	r3, r7, #8
 8045932:	4611      	mov	r1, r2
 8045934:	4618      	mov	r0, r3
 8045936:	f7ff fdfc 	bl	8045532 <USART2_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
 804593a:	e00c      	b.n	8045956 <UARTvprintf+0x3d2>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    CONSOLE_UART_WRITE(pcString - 1, 1);
 804593c:	687b      	ldr	r3, [r7, #4]
 804593e:	3b01      	subs	r3, #1
 8045940:	2101      	movs	r1, #1
 8045942:	4618      	mov	r0, r3
 8045944:	f7ff fdf5 	bl	8045532 <USART2_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
 8045948:	e005      	b.n	8045956 <UARTvprintf+0x3d2>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    CONSOLE_UART_WRITE("ERROR", 5);
 804594a:	2105      	movs	r1, #5
 804594c:	4809      	ldr	r0, [pc, #36]	@ (8045974 <UARTvprintf+0x3f0>)
 804594e:	f7ff fdf0 	bl	8045532 <USART2_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
 8045952:	e000      	b.n	8045956 <UARTvprintf+0x3d2>
                    break;
 8045954:	bf00      	nop
    while(*pcString)
 8045956:	687b      	ldr	r3, [r7, #4]
 8045958:	781b      	ldrb	r3, [r3, #0]
 804595a:	2b00      	cmp	r3, #0
 804595c:	f47f ae18 	bne.w	8045590 <UARTvprintf+0xc>
                }
            }
        }
    }
}
 8045960:	bf00      	nop
 8045962:	bf00      	nop
 8045964:	3738      	adds	r7, #56	@ 0x38
 8045966:	46bd      	mov	sp, r7
 8045968:	bd80      	pop	{r7, pc}
 804596a:	bf00      	nop
 804596c:	08045d68 	.word	0x08045d68
 8045970:	08045d54 	.word	0x08045d54
 8045974:	08045d6c 	.word	0x08045d6c

08045978 <UARTprintf>:

//*****************************************************************************

void UARTprintf(const char *pcString, ...)
{
 8045978:	b40f      	push	{r0, r1, r2, r3}
 804597a:	b580      	push	{r7, lr}
 804597c:	b082      	sub	sp, #8
 804597e:	af00      	add	r7, sp, #0
    va_list vaArgP;
    va_start(vaArgP, pcString);
 8045980:	f107 0314 	add.w	r3, r7, #20
 8045984:	607b      	str	r3, [r7, #4]
    UARTvprintf(pcString, vaArgP);
 8045986:	6879      	ldr	r1, [r7, #4]
 8045988:	6938      	ldr	r0, [r7, #16]
 804598a:	f7ff fdfb 	bl	8045584 <UARTvprintf>
    va_end(vaArgP);
}
 804598e:	bf00      	nop
 8045990:	3708      	adds	r7, #8
 8045992:	46bd      	mov	sp, r7
 8045994:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8045998:	b004      	add	sp, #16
 804599a:	4770      	bx	lr

0804599c <__NVIC_SystemReset>:
{
 804599c:	b480      	push	{r7}
 804599e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80459a0:	f3bf 8f4f 	dsb	sy
}
 80459a4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80459a6:	4b06      	ldr	r3, [pc, #24]	@ (80459c0 <__NVIC_SystemReset+0x24>)
 80459a8:	68db      	ldr	r3, [r3, #12]
 80459aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80459ae:	4904      	ldr	r1, [pc, #16]	@ (80459c0 <__NVIC_SystemReset+0x24>)
 80459b0:	4b04      	ldr	r3, [pc, #16]	@ (80459c4 <__NVIC_SystemReset+0x28>)
 80459b2:	4313      	orrs	r3, r2
 80459b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80459b6:	f3bf 8f4f 	dsb	sy
}
 80459ba:	bf00      	nop
    __NOP();
 80459bc:	bf00      	nop
 80459be:	e7fd      	b.n	80459bc <__NVIC_SystemReset+0x20>
 80459c0:	e000ed00 	.word	0xe000ed00
 80459c4:	05fa0004 	.word	0x05fa0004

080459c8 <full_system_reset>:

}*/


void full_system_reset(void)
{
 80459c8:	b580      	push	{r7, lr}
 80459ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80459cc:	b672      	cpsid	i
}
 80459ce:	bf00      	nop
    //clear_all_ram(); // Xóa RAM
//    __DSB();
    __disable_irq();
    __HAL_RCC_CLEAR_RESET_FLAGS();
 80459d0:	4b04      	ldr	r3, [pc, #16]	@ (80459e4 <full_system_reset+0x1c>)
 80459d2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80459d6:	4a03      	ldr	r2, [pc, #12]	@ (80459e4 <full_system_reset+0x1c>)
 80459d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80459dc:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
    NVIC_SystemReset();
 80459e0:	f7ff ffdc 	bl	804599c <__NVIC_SystemReset>
 80459e4:	58024400 	.word	0x58024400

080459e8 <SchedulerSysTickIntHandler>:
//! \return None.
//
//*****************************************************************************
void
SchedulerSysTickIntHandler(void)
{
 80459e8:	b480      	push	{r7}
 80459ea:	af00      	add	r7, sp, #0
    g_ui32SchedulerTickCount++;
 80459ec:	4b04      	ldr	r3, [pc, #16]	@ (8045a00 <SchedulerSysTickIntHandler+0x18>)
 80459ee:	681b      	ldr	r3, [r3, #0]
 80459f0:	3301      	adds	r3, #1
 80459f2:	4a03      	ldr	r2, [pc, #12]	@ (8045a00 <SchedulerSysTickIntHandler+0x18>)
 80459f4:	6013      	str	r3, [r2, #0]
}
 80459f6:	bf00      	nop
 80459f8:	46bd      	mov	sp, r7
 80459fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80459fe:	4770      	bx	lr
 8045a00:	24000350 	.word	0x24000350

08045a04 <SchedulerRun>:
//! \return None.
//
//*****************************************************************************
void
SchedulerRun(void)
{
 8045a04:	b580      	push	{r7, lr}
 8045a06:	b082      	sub	sp, #8
 8045a08:	af00      	add	r7, sp, #0
    tSchedulerTask *pi16Task;

    //
    // Loop through each task in the task table.
    //
    for(ui32Loop = 0; ui32Loop < g_ui32SchedulerNumTasks; ui32Loop++)
 8045a0a:	2300      	movs	r3, #0
 8045a0c:	607b      	str	r3, [r7, #4]
 8045a0e:	e022      	b.n	8045a56 <SchedulerRun+0x52>
    {
        //
        // Get a pointer to the task information.
        //
        pi16Task = &g_psSchedulerTable[ui32Loop];
 8045a10:	687a      	ldr	r2, [r7, #4]
 8045a12:	4613      	mov	r3, r2
 8045a14:	009b      	lsls	r3, r3, #2
 8045a16:	4413      	add	r3, r2
 8045a18:	009b      	lsls	r3, r3, #2
 8045a1a:	4a14      	ldr	r2, [pc, #80]	@ (8045a6c <SchedulerRun+0x68>)
 8045a1c:	4413      	add	r3, r2
 8045a1e:	603b      	str	r3, [r7, #0]

        //
        // Is this task active and, if so, is it time to call it's function?
        //
        if(pi16Task->bActive &&
 8045a20:	683b      	ldr	r3, [r7, #0]
 8045a22:	7c1b      	ldrb	r3, [r3, #16]
 8045a24:	2b00      	cmp	r3, #0
 8045a26:	d013      	beq.n	8045a50 <SchedulerRun+0x4c>
           (SchedulerElapsedTicksGet(pi16Task->ui32LastCall) >=
 8045a28:	683b      	ldr	r3, [r7, #0]
 8045a2a:	68db      	ldr	r3, [r3, #12]
 8045a2c:	4618      	mov	r0, r3
 8045a2e:	f000 f823 	bl	8045a78 <SchedulerElapsedTicksGet>
 8045a32:	4602      	mov	r2, r0
            pi16Task->ui32FrequencyTicks))
 8045a34:	683b      	ldr	r3, [r7, #0]
 8045a36:	689b      	ldr	r3, [r3, #8]
        if(pi16Task->bActive &&
 8045a38:	429a      	cmp	r2, r3
 8045a3a:	d309      	bcc.n	8045a50 <SchedulerRun+0x4c>
        {
            //
            // Remember the timestamp at which we make the function call.
            //
            pi16Task->ui32LastCall = g_ui32SchedulerTickCount;
 8045a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8045a70 <SchedulerRun+0x6c>)
 8045a3e:	681a      	ldr	r2, [r3, #0]
 8045a40:	683b      	ldr	r3, [r7, #0]
 8045a42:	60da      	str	r2, [r3, #12]

            //
            // Call the task function, passing the provided parameter.
            //
            pi16Task->pfnFunction(pi16Task->pvParam);
 8045a44:	683b      	ldr	r3, [r7, #0]
 8045a46:	681b      	ldr	r3, [r3, #0]
 8045a48:	683a      	ldr	r2, [r7, #0]
 8045a4a:	6852      	ldr	r2, [r2, #4]
 8045a4c:	4610      	mov	r0, r2
 8045a4e:	4798      	blx	r3
    for(ui32Loop = 0; ui32Loop < g_ui32SchedulerNumTasks; ui32Loop++)
 8045a50:	687b      	ldr	r3, [r7, #4]
 8045a52:	3301      	adds	r3, #1
 8045a54:	607b      	str	r3, [r7, #4]
 8045a56:	4b07      	ldr	r3, [pc, #28]	@ (8045a74 <SchedulerRun+0x70>)
 8045a58:	681b      	ldr	r3, [r3, #0]
 8045a5a:	687a      	ldr	r2, [r7, #4]
 8045a5c:	429a      	cmp	r2, r3
 8045a5e:	d3d7      	bcc.n	8045a10 <SchedulerRun+0xc>
        }
    }
}
 8045a60:	bf00      	nop
 8045a62:	bf00      	nop
 8045a64:	3708      	adds	r7, #8
 8045a66:	46bd      	mov	sp, r7
 8045a68:	bd80      	pop	{r7, pc}
 8045a6a:	bf00      	nop
 8045a6c:	2400000c 	.word	0x2400000c
 8045a70:	24000350 	.word	0x24000350
 8045a74:	24000008 	.word	0x24000008

08045a78 <SchedulerElapsedTicksGet>:
//! \return The number of ticks elapsed since the provided tick count.
//
//*****************************************************************************
uint32_t
SchedulerElapsedTicksGet(uint32_t ui32TickCount)
{
 8045a78:	b580      	push	{r7, lr}
 8045a7a:	b082      	sub	sp, #8
 8045a7c:	af00      	add	r7, sp, #0
 8045a7e:	6078      	str	r0, [r7, #4]
    //
    // Determine the calculation based upon whether the global tick count has
    // wrapped since the passed ui32TickCount.
    //
    return(SchedulerElapsedTicksCalc(ui32TickCount, g_ui32SchedulerTickCount));
 8045a80:	4b05      	ldr	r3, [pc, #20]	@ (8045a98 <SchedulerElapsedTicksGet+0x20>)
 8045a82:	681b      	ldr	r3, [r3, #0]
 8045a84:	4619      	mov	r1, r3
 8045a86:	6878      	ldr	r0, [r7, #4]
 8045a88:	f000 f808 	bl	8045a9c <SchedulerElapsedTicksCalc>
 8045a8c:	4603      	mov	r3, r0
}
 8045a8e:	4618      	mov	r0, r3
 8045a90:	3708      	adds	r7, #8
 8045a92:	46bd      	mov	sp, r7
 8045a94:	bd80      	pop	{r7, pc}
 8045a96:	bf00      	nop
 8045a98:	24000350 	.word	0x24000350

08045a9c <SchedulerElapsedTicksCalc>:
//! counts.
//
//*****************************************************************************
uint32_t
SchedulerElapsedTicksCalc(uint32_t ui32TickStart, uint32_t ui32TickEnd)
{
 8045a9c:	b480      	push	{r7}
 8045a9e:	b083      	sub	sp, #12
 8045aa0:	af00      	add	r7, sp, #0
 8045aa2:	6078      	str	r0, [r7, #4]
 8045aa4:	6039      	str	r1, [r7, #0]
    return((ui32TickEnd > ui32TickStart) ? (ui32TickEnd - ui32TickStart) :
 8045aa6:	683a      	ldr	r2, [r7, #0]
 8045aa8:	687b      	ldr	r3, [r7, #4]
 8045aaa:	1ad3      	subs	r3, r2, r3
           ((0xFFFFFFFF - ui32TickStart) + ui32TickEnd + 1));
}
 8045aac:	4618      	mov	r0, r3
 8045aae:	370c      	adds	r7, #12
 8045ab0:	46bd      	mov	sp, r7
 8045ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045ab6:	4770      	bx	lr

08045ab8 <atoi>:
 8045ab8:	220a      	movs	r2, #10
 8045aba:	2100      	movs	r1, #0
 8045abc:	f000 b87a 	b.w	8045bb4 <strtol>

08045ac0 <_strtol_l.isra.0>:
 8045ac0:	2b24      	cmp	r3, #36	@ 0x24
 8045ac2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8045ac6:	4686      	mov	lr, r0
 8045ac8:	4690      	mov	r8, r2
 8045aca:	d801      	bhi.n	8045ad0 <_strtol_l.isra.0+0x10>
 8045acc:	2b01      	cmp	r3, #1
 8045ace:	d106      	bne.n	8045ade <_strtol_l.isra.0+0x1e>
 8045ad0:	f000 f882 	bl	8045bd8 <__errno>
 8045ad4:	2316      	movs	r3, #22
 8045ad6:	6003      	str	r3, [r0, #0]
 8045ad8:	2000      	movs	r0, #0
 8045ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8045ade:	4834      	ldr	r0, [pc, #208]	@ (8045bb0 <_strtol_l.isra.0+0xf0>)
 8045ae0:	460d      	mov	r5, r1
 8045ae2:	462a      	mov	r2, r5
 8045ae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8045ae8:	5d06      	ldrb	r6, [r0, r4]
 8045aea:	f016 0608 	ands.w	r6, r6, #8
 8045aee:	d1f8      	bne.n	8045ae2 <_strtol_l.isra.0+0x22>
 8045af0:	2c2d      	cmp	r4, #45	@ 0x2d
 8045af2:	d110      	bne.n	8045b16 <_strtol_l.isra.0+0x56>
 8045af4:	782c      	ldrb	r4, [r5, #0]
 8045af6:	2601      	movs	r6, #1
 8045af8:	1c95      	adds	r5, r2, #2
 8045afa:	f033 0210 	bics.w	r2, r3, #16
 8045afe:	d115      	bne.n	8045b2c <_strtol_l.isra.0+0x6c>
 8045b00:	2c30      	cmp	r4, #48	@ 0x30
 8045b02:	d10d      	bne.n	8045b20 <_strtol_l.isra.0+0x60>
 8045b04:	782a      	ldrb	r2, [r5, #0]
 8045b06:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8045b0a:	2a58      	cmp	r2, #88	@ 0x58
 8045b0c:	d108      	bne.n	8045b20 <_strtol_l.isra.0+0x60>
 8045b0e:	786c      	ldrb	r4, [r5, #1]
 8045b10:	3502      	adds	r5, #2
 8045b12:	2310      	movs	r3, #16
 8045b14:	e00a      	b.n	8045b2c <_strtol_l.isra.0+0x6c>
 8045b16:	2c2b      	cmp	r4, #43	@ 0x2b
 8045b18:	bf04      	itt	eq
 8045b1a:	782c      	ldrbeq	r4, [r5, #0]
 8045b1c:	1c95      	addeq	r5, r2, #2
 8045b1e:	e7ec      	b.n	8045afa <_strtol_l.isra.0+0x3a>
 8045b20:	2b00      	cmp	r3, #0
 8045b22:	d1f6      	bne.n	8045b12 <_strtol_l.isra.0+0x52>
 8045b24:	2c30      	cmp	r4, #48	@ 0x30
 8045b26:	bf14      	ite	ne
 8045b28:	230a      	movne	r3, #10
 8045b2a:	2308      	moveq	r3, #8
 8045b2c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8045b30:	f10c 3cff 	add.w	ip, ip, #4294967295
 8045b34:	2200      	movs	r2, #0
 8045b36:	fbbc f9f3 	udiv	r9, ip, r3
 8045b3a:	4610      	mov	r0, r2
 8045b3c:	fb03 ca19 	mls	sl, r3, r9, ip
 8045b40:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8045b44:	2f09      	cmp	r7, #9
 8045b46:	d80f      	bhi.n	8045b68 <_strtol_l.isra.0+0xa8>
 8045b48:	463c      	mov	r4, r7
 8045b4a:	42a3      	cmp	r3, r4
 8045b4c:	dd1b      	ble.n	8045b86 <_strtol_l.isra.0+0xc6>
 8045b4e:	1c57      	adds	r7, r2, #1
 8045b50:	d007      	beq.n	8045b62 <_strtol_l.isra.0+0xa2>
 8045b52:	4581      	cmp	r9, r0
 8045b54:	d314      	bcc.n	8045b80 <_strtol_l.isra.0+0xc0>
 8045b56:	d101      	bne.n	8045b5c <_strtol_l.isra.0+0x9c>
 8045b58:	45a2      	cmp	sl, r4
 8045b5a:	db11      	blt.n	8045b80 <_strtol_l.isra.0+0xc0>
 8045b5c:	fb00 4003 	mla	r0, r0, r3, r4
 8045b60:	2201      	movs	r2, #1
 8045b62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8045b66:	e7eb      	b.n	8045b40 <_strtol_l.isra.0+0x80>
 8045b68:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8045b6c:	2f19      	cmp	r7, #25
 8045b6e:	d801      	bhi.n	8045b74 <_strtol_l.isra.0+0xb4>
 8045b70:	3c37      	subs	r4, #55	@ 0x37
 8045b72:	e7ea      	b.n	8045b4a <_strtol_l.isra.0+0x8a>
 8045b74:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8045b78:	2f19      	cmp	r7, #25
 8045b7a:	d804      	bhi.n	8045b86 <_strtol_l.isra.0+0xc6>
 8045b7c:	3c57      	subs	r4, #87	@ 0x57
 8045b7e:	e7e4      	b.n	8045b4a <_strtol_l.isra.0+0x8a>
 8045b80:	f04f 32ff 	mov.w	r2, #4294967295
 8045b84:	e7ed      	b.n	8045b62 <_strtol_l.isra.0+0xa2>
 8045b86:	1c53      	adds	r3, r2, #1
 8045b88:	d108      	bne.n	8045b9c <_strtol_l.isra.0+0xdc>
 8045b8a:	2322      	movs	r3, #34	@ 0x22
 8045b8c:	f8ce 3000 	str.w	r3, [lr]
 8045b90:	4660      	mov	r0, ip
 8045b92:	f1b8 0f00 	cmp.w	r8, #0
 8045b96:	d0a0      	beq.n	8045ada <_strtol_l.isra.0+0x1a>
 8045b98:	1e69      	subs	r1, r5, #1
 8045b9a:	e006      	b.n	8045baa <_strtol_l.isra.0+0xea>
 8045b9c:	b106      	cbz	r6, 8045ba0 <_strtol_l.isra.0+0xe0>
 8045b9e:	4240      	negs	r0, r0
 8045ba0:	f1b8 0f00 	cmp.w	r8, #0
 8045ba4:	d099      	beq.n	8045ada <_strtol_l.isra.0+0x1a>
 8045ba6:	2a00      	cmp	r2, #0
 8045ba8:	d1f6      	bne.n	8045b98 <_strtol_l.isra.0+0xd8>
 8045baa:	f8c8 1000 	str.w	r1, [r8]
 8045bae:	e794      	b.n	8045ada <_strtol_l.isra.0+0x1a>
 8045bb0:	08045dc5 	.word	0x08045dc5

08045bb4 <strtol>:
 8045bb4:	4613      	mov	r3, r2
 8045bb6:	460a      	mov	r2, r1
 8045bb8:	4601      	mov	r1, r0
 8045bba:	4802      	ldr	r0, [pc, #8]	@ (8045bc4 <strtol+0x10>)
 8045bbc:	6800      	ldr	r0, [r0, #0]
 8045bbe:	f7ff bf7f 	b.w	8045ac0 <_strtol_l.isra.0>
 8045bc2:	bf00      	nop
 8045bc4:	24000084 	.word	0x24000084

08045bc8 <memset>:
 8045bc8:	4402      	add	r2, r0
 8045bca:	4603      	mov	r3, r0
 8045bcc:	4293      	cmp	r3, r2
 8045bce:	d100      	bne.n	8045bd2 <memset+0xa>
 8045bd0:	4770      	bx	lr
 8045bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8045bd6:	e7f9      	b.n	8045bcc <memset+0x4>

08045bd8 <__errno>:
 8045bd8:	4b01      	ldr	r3, [pc, #4]	@ (8045be0 <__errno+0x8>)
 8045bda:	6818      	ldr	r0, [r3, #0]
 8045bdc:	4770      	bx	lr
 8045bde:	bf00      	nop
 8045be0:	24000084 	.word	0x24000084

08045be4 <__libc_init_array>:
 8045be4:	b570      	push	{r4, r5, r6, lr}
 8045be6:	4d0d      	ldr	r5, [pc, #52]	@ (8045c1c <__libc_init_array+0x38>)
 8045be8:	4c0d      	ldr	r4, [pc, #52]	@ (8045c20 <__libc_init_array+0x3c>)
 8045bea:	1b64      	subs	r4, r4, r5
 8045bec:	10a4      	asrs	r4, r4, #2
 8045bee:	2600      	movs	r6, #0
 8045bf0:	42a6      	cmp	r6, r4
 8045bf2:	d109      	bne.n	8045c08 <__libc_init_array+0x24>
 8045bf4:	4d0b      	ldr	r5, [pc, #44]	@ (8045c24 <__libc_init_array+0x40>)
 8045bf6:	4c0c      	ldr	r4, [pc, #48]	@ (8045c28 <__libc_init_array+0x44>)
 8045bf8:	f000 f818 	bl	8045c2c <_init>
 8045bfc:	1b64      	subs	r4, r4, r5
 8045bfe:	10a4      	asrs	r4, r4, #2
 8045c00:	2600      	movs	r6, #0
 8045c02:	42a6      	cmp	r6, r4
 8045c04:	d105      	bne.n	8045c12 <__libc_init_array+0x2e>
 8045c06:	bd70      	pop	{r4, r5, r6, pc}
 8045c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8045c0c:	4798      	blx	r3
 8045c0e:	3601      	adds	r6, #1
 8045c10:	e7ee      	b.n	8045bf0 <__libc_init_array+0xc>
 8045c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8045c16:	4798      	blx	r3
 8045c18:	3601      	adds	r6, #1
 8045c1a:	e7f2      	b.n	8045c02 <__libc_init_array+0x1e>
 8045c1c:	08045ed0 	.word	0x08045ed0
 8045c20:	08045ed0 	.word	0x08045ed0
 8045c24:	08045ed0 	.word	0x08045ed0
 8045c28:	08045ed4 	.word	0x08045ed4

08045c2c <_init>:
 8045c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8045c2e:	bf00      	nop
 8045c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8045c32:	bc08      	pop	{r3}
 8045c34:	469e      	mov	lr, r3
 8045c36:	4770      	bx	lr

08045c38 <_fini>:
 8045c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8045c3a:	bf00      	nop
 8045c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8045c3e:	bc08      	pop	{r3}
 8045c40:	469e      	mov	lr, r3
 8045c42:	4770      	bx	lr
