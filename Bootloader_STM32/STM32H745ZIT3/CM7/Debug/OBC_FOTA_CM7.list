
OBC_FOTA_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006688  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006920  08006920  00007920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006978  08006978  00008044  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006978  08006978  00008044  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006978  08006978  00008044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006978  08006978  00007978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800697c  0800697c  0000797c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000044  24000000  08006980  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  24000044  080069c4  00008044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000374  080069c4  00008374  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001038b  00000000  00000000  00008072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eb4  00000000  00000000  000183fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  0001b2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c43  00000000  00000000  0001c320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d3d1  00000000  00000000  0001cf63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013406  00000000  00000000  0005a334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00187ab3  00000000  00000000  0006d73a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f51ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004298  00000000  00000000  001f5230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  001f94c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000044 	.word	0x24000044
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006908 	.word	0x08006908

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000048 	.word	0x24000048
 80002d4:	08006908 	.word	0x08006908

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b49      	ldr	r3, [pc, #292]	@ (8000404 <SystemInit+0x12c>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a48      	ldr	r2, [pc, #288]	@ (8000404 <SystemInit+0x12c>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <SystemInit+0x12c>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a44      	ldr	r2, [pc, #272]	@ (8000404 <SystemInit+0x12c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b43      	ldr	r3, [pc, #268]	@ (8000408 <SystemInit+0x130>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b40      	ldr	r3, [pc, #256]	@ (8000408 <SystemInit+0x130>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a3e      	ldr	r2, [pc, #248]	@ (8000408 <SystemInit+0x130>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b3d      	ldr	r3, [pc, #244]	@ (800040c <SystemInit+0x134>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3c      	ldr	r2, [pc, #240]	@ (800040c <SystemInit+0x134>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <SystemInit+0x134>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b39      	ldr	r3, [pc, #228]	@ (800040c <SystemInit+0x134>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4938      	ldr	r1, [pc, #224]	@ (800040c <SystemInit+0x134>)
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <SystemInit+0x138>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <SystemInit+0x130>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <SystemInit+0x130>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a30      	ldr	r2, [pc, #192]	@ (8000408 <SystemInit+0x130>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b2f      	ldr	r3, [pc, #188]	@ (800040c <SystemInit+0x134>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <SystemInit+0x134>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <SystemInit+0x134>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SystemInit+0x134>)
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <SystemInit+0x13c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b29      	ldr	r3, [pc, #164]	@ (800040c <SystemInit+0x134>)
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <SystemInit+0x140>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <SystemInit+0x134>)
 800036e:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <SystemInit+0x144>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <SystemInit+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <SystemInit+0x134>)
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <SystemInit+0x144>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <SystemInit+0x134>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <SystemInit+0x134>)
 8000386:	4a25      	ldr	r2, [pc, #148]	@ (800041c <SystemInit+0x144>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b20      	ldr	r3, [pc, #128]	@ (800040c <SystemInit+0x134>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <SystemInit+0x134>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1d      	ldr	r2, [pc, #116]	@ (800040c <SystemInit+0x134>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <SystemInit+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <SystemInit+0x148>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <SystemInit+0x148>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <SystemInit+0x14c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <SystemInit+0x150>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <SystemInit+0x154>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <SystemInit+0x134>)
 80003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d113      	bne.n	80003f8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <SystemInit+0x134>)
 80003d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d6:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <SystemInit+0x134>)
 80003d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <SystemInit+0x158>)
 80003e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <SystemInit+0x134>)
 80003ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003ee:	4a07      	ldr	r2, [pc, #28]	@ (800040c <SystemInit+0x134>)
 80003f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	52002000 	.word	0x52002000
 800040c:	58024400 	.word	0x58024400
 8000410:	eaf6ed7f 	.word	0xeaf6ed7f
 8000414:	02020200 	.word	0x02020200
 8000418:	01ff0000 	.word	0x01ff0000
 800041c:	01010280 	.word	0x01010280
 8000420:	580000c0 	.word	0x580000c0
 8000424:	5c001000 	.word	0x5c001000
 8000428:	ffff0000 	.word	0xffff0000
 800042c:	51008108 	.word	0x51008108
 8000430:	52004000 	.word	0x52004000

08000434 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 8000438:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <ExitRun0Mode+0x30>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	f023 0306 	bic.w	r3, r3, #6
 8000440:	4a08      	ldr	r2, [pc, #32]	@ (8000464 <ExitRun0Mode+0x30>)
 8000442:	f043 0302 	orr.w	r3, r3, #2
 8000446:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000448:	bf00      	nop
 800044a:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <ExitRun0Mode+0x30>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f9      	beq.n	800044a <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000456:	bf00      	nop
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	58024800 	.word	0x58024800

08000468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800046c:	4b04      	ldr	r3, [pc, #16]	@ (8000480 <__NVIC_GetPriorityGrouping+0x18>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	0a1b      	lsrs	r3, r3, #8
 8000472:	f003 0307 	and.w	r3, r3, #7
}
 8000476:	4618      	mov	r0, r3
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	e000ed00 	.word	0xe000ed00

08000484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800048e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000492:	2b00      	cmp	r3, #0
 8000494:	db0b      	blt.n	80004ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000496:	88fb      	ldrh	r3, [r7, #6]
 8000498:	f003 021f 	and.w	r2, r3, #31
 800049c:	4907      	ldr	r1, [pc, #28]	@ (80004bc <__NVIC_EnableIRQ+0x38>)
 800049e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004a2:	095b      	lsrs	r3, r3, #5
 80004a4:	2001      	movs	r0, #1
 80004a6:	fa00 f202 	lsl.w	r2, r0, r2
 80004aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	e000e100 	.word	0xe000e100

080004c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80004cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	db0a      	blt.n	80004ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	490c      	ldr	r1, [pc, #48]	@ (800050c <__NVIC_SetPriority+0x4c>)
 80004da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004de:	0112      	lsls	r2, r2, #4
 80004e0:	b2d2      	uxtb	r2, r2
 80004e2:	440b      	add	r3, r1
 80004e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004e8:	e00a      	b.n	8000500 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	4908      	ldr	r1, [pc, #32]	@ (8000510 <__NVIC_SetPriority+0x50>)
 80004f0:	88fb      	ldrh	r3, [r7, #6]
 80004f2:	f003 030f 	and.w	r3, r3, #15
 80004f6:	3b04      	subs	r3, #4
 80004f8:	0112      	lsls	r2, r2, #4
 80004fa:	b2d2      	uxtb	r2, r2
 80004fc:	440b      	add	r3, r1
 80004fe:	761a      	strb	r2, [r3, #24]
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	e000e100 	.word	0xe000e100
 8000510:	e000ed00 	.word	0xe000ed00

08000514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000514:	b480      	push	{r7}
 8000516:	b089      	sub	sp, #36	@ 0x24
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f003 0307 	and.w	r3, r3, #7
 8000526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	f1c3 0307 	rsb	r3, r3, #7
 800052e:	2b04      	cmp	r3, #4
 8000530:	bf28      	it	cs
 8000532:	2304      	movcs	r3, #4
 8000534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	3304      	adds	r3, #4
 800053a:	2b06      	cmp	r3, #6
 800053c:	d902      	bls.n	8000544 <NVIC_EncodePriority+0x30>
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	3b03      	subs	r3, #3
 8000542:	e000      	b.n	8000546 <NVIC_EncodePriority+0x32>
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000548:	f04f 32ff 	mov.w	r2, #4294967295
 800054c:	69bb      	ldr	r3, [r7, #24]
 800054e:	fa02 f303 	lsl.w	r3, r2, r3
 8000552:	43da      	mvns	r2, r3
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	401a      	ands	r2, r3
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800055c:	f04f 31ff 	mov.w	r1, #4294967295
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	fa01 f303 	lsl.w	r3, r1, r3
 8000566:	43d9      	mvns	r1, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800056c:	4313      	orrs	r3, r2
         );
}
 800056e:	4618      	mov	r0, r3
 8000570:	3724      	adds	r7, #36	@ 0x24
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f043 0201 	orr.w	r2, r3, #1
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	601a      	str	r2, [r3, #0]
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 800059a:	b480      	push	{r7}
 800059c:	b083      	sub	sp, #12
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	601a      	str	r2, [r3, #0]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b089      	sub	sp, #36	@ 0x24
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3308      	adds	r3, #8
 80005c8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	e853 3f00 	ldrex	r3, [r3]
 80005d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	075b      	lsls	r3, r3, #29
 80005dc:	4313      	orrs	r3, r2
 80005de:	61fb      	str	r3, [r7, #28]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3308      	adds	r3, #8
 80005e4:	69fa      	ldr	r2, [r7, #28]
 80005e6:	61ba      	str	r2, [r7, #24]
 80005e8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80005ea:	6979      	ldr	r1, [r7, #20]
 80005ec:	69ba      	ldr	r2, [r7, #24]
 80005ee:	e841 2300 	strex	r3, r2, [r1]
 80005f2:	613b      	str	r3, [r7, #16]
   return(result);
 80005f4:	693b      	ldr	r3, [r7, #16]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1e4      	bne.n	80005c4 <LL_USART_SetTXFIFOThreshold+0xa>
}
 80005fa:	bf00      	nop
 80005fc:	bf00      	nop
 80005fe:	3724      	adds	r7, #36	@ 0x24
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000608:	b480      	push	{r7}
 800060a:	b089      	sub	sp, #36	@ 0x24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3308      	adds	r3, #8
 8000616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	e853 3f00 	ldrex	r3, [r3]
 800061e:	60bb      	str	r3, [r7, #8]
   return(result);
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	065b      	lsls	r3, r3, #25
 800062a:	4313      	orrs	r3, r2
 800062c:	61fb      	str	r3, [r7, #28]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3308      	adds	r3, #8
 8000632:	69fa      	ldr	r2, [r7, #28]
 8000634:	61ba      	str	r2, [r7, #24]
 8000636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000638:	6979      	ldr	r1, [r7, #20]
 800063a:	69ba      	ldr	r2, [r7, #24]
 800063c:	e841 2300 	strex	r3, r2, [r1]
 8000640:	613b      	str	r3, [r7, #16]
   return(result);
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1e4      	bne.n	8000612 <LL_USART_SetRXFIFOThreshold+0xa>
}
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	3724      	adds	r7, #36	@ 0x24
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	609a      	str	r2, [r3, #8]
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000692:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000696:	d101      	bne.n	800069c <LL_USART_IsActiveFlag_TEACK+0x1a>
 8000698:	2301      	movs	r3, #1
 800069a:	e000      	b.n	800069e <LL_USART_IsActiveFlag_TEACK+0x1c>
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 80006aa:	b480      	push	{r7}
 80006ac:	b083      	sub	sp, #12
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80006be:	d101      	bne.n	80006c4 <LL_USART_IsActiveFlag_REACK+0x1a>
 80006c0:	2301      	movs	r3, #1
 80006c2:	e000      	b.n	80006c6 <LL_USART_IsActiveFlag_REACK+0x1c>
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
	...

080006d4 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 80006dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <LL_AHB4_GRP1_EnableClock+0x34>)
 80006de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80006e2:	4909      	ldr	r1, [pc, #36]	@ (8000708 <LL_AHB4_GRP1_EnableClock+0x34>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <LL_AHB4_GRP1_EnableClock+0x34>)
 80006ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4013      	ands	r3, r2
 80006f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006f8:	68fb      	ldr	r3, [r7, #12]
}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	58024400 	.word	0x58024400

0800070c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000714:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <LL_APB2_GRP1_EnableClock+0x34>)
 8000716:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800071a:	4909      	ldr	r1, [pc, #36]	@ (8000740 <LL_APB2_GRP1_EnableClock+0x34>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4313      	orrs	r3, r2
 8000720:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <LL_APB2_GRP1_EnableClock+0x34>)
 8000726:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4013      	ands	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000730:	68fb      	ldr	r3, [r7, #12]
}
 8000732:	bf00      	nop
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	58024400 	.word	0x58024400

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000748:	f000 f96e 	bl	8000a28 <MPU_Config>

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 fa3e 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f810 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f000 f94e 	bl	80009f4 <MX_GPIO_Init>
  MX_CRC_Init();
 8000758:	f000 f88a 	bl	8000870 <MX_CRC_Init>
  MX_USART1_UART_Init();
 800075c:	f000 f8aa 	bl	80008b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SchedulerInit(1000);
 8000760:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000764:	f005 ffa6 	bl	80066b4 <SchedulerInit>
  USART1_init();
 8000768:	f005 f876 	bl	8005858 <USART1_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SchedulerRun();
 800076c:	f005 ffc4 	bl	80066f8 <SchedulerRun>
 8000770:	e7fc      	b.n	800076c <main+0x28>
	...

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b09c      	sub	sp, #112	@ 0x70
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800077e:	224c      	movs	r2, #76	@ 0x4c
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f006 f812 	bl	80067ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2220      	movs	r2, #32
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f006 f80c 	bl	80067ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000794:	2002      	movs	r0, #2
 8000796:	f001 f891 	bl	80018bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	4b32      	ldr	r3, [pc, #200]	@ (8000868 <SystemClock_Config+0xf4>)
 80007a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007a2:	4a31      	ldr	r2, [pc, #196]	@ (8000868 <SystemClock_Config+0xf4>)
 80007a4:	f023 0301 	bic.w	r3, r3, #1
 80007a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000868 <SystemClock_Config+0xf4>)
 80007ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	4b2d      	ldr	r3, [pc, #180]	@ (800086c <SystemClock_Config+0xf8>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007bc:	4a2b      	ldr	r2, [pc, #172]	@ (800086c <SystemClock_Config+0xf8>)
 80007be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b29      	ldr	r3, [pc, #164]	@ (800086c <SystemClock_Config+0xf8>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007d0:	bf00      	nop
 80007d2:	4b26      	ldr	r3, [pc, #152]	@ (800086c <SystemClock_Config+0xf8>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007de:	d1f8      	bne.n	80007d2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e0:	2302      	movs	r3, #2
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e8:	2340      	movs	r3, #64	@ 0x40
 80007ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f0:	2300      	movs	r3, #0
 80007f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f4:	2304      	movs	r3, #4
 80007f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 80007f8:	2310      	movs	r3, #16
 80007fa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000800:	2302      	movs	r3, #2
 8000802:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000804:	2302      	movs	r3, #2
 8000806:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000808:	230c      	movs	r3, #12
 800080a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800080c:	2300      	movs	r3, #0
 800080e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000818:	4618      	mov	r0, r3
 800081a:	f001 f9d3 	bl	8001bc4 <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000824:	f000 f92c 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	233f      	movs	r3, #63	@ 0x3f
 800082a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2303      	movs	r3, #3
 800082e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000834:	2308      	movs	r3, #8
 8000836:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000844:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2101      	movs	r1, #1
 800084e:	4618      	mov	r0, r3
 8000850:	f001 fe12 	bl	8002478 <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800085a:	f000 f911 	bl	8000a80 <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3770      	adds	r7, #112	@ 0x70
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	58000400 	.word	0x58000400
 800086c:	58024800 	.word	0x58024800

08000870 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000874:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <MX_CRC_Init+0x3c>)
 8000876:	4a0e      	ldr	r2, [pc, #56]	@ (80008b0 <MX_CRC_Init+0x40>)
 8000878:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_CRC_Init+0x3c>)
 800087c:	2200      	movs	r2, #0
 800087e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000880:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <MX_CRC_Init+0x3c>)
 8000882:	2200      	movs	r2, #0
 8000884:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_CRC_Init+0x3c>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <MX_CRC_Init+0x3c>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_CRC_Init+0x3c>)
 8000894:	2201      	movs	r2, #1
 8000896:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_CRC_Init+0x3c>)
 800089a:	f000 fc1b 	bl	80010d4 <HAL_CRC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008a4:	f000 f8ec 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	24000060 	.word	0x24000060
 80008b0:	58024c00 	.word	0x58024c00

080008b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b0be      	sub	sp, #248	@ 0xf8
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80008ba:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80008be:	2220      	movs	r2, #32
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f005 ff72 	bl	80067ac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
 80008d8:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008da:	463b      	mov	r3, r7
 80008dc:	22c0      	movs	r2, #192	@ 0xc0
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f005 ff63 	bl	80067ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008e6:	f04f 0201 	mov.w	r2, #1
 80008ea:	f04f 0300 	mov.w	r3, #0
 80008ee:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80008f2:	2300      	movs	r3, #0
 80008f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 f8ed 	bl	8002ad8 <HAL_RCCEx_PeriphCLKConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000904:	f000 f8bc 	bl	8000a80 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000908:	2010      	movs	r0, #16
 800090a:	f7ff feff 	bl	800070c <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 800090e:	2001      	movs	r0, #1
 8000910:	f7ff fee0 	bl	80006d4 <LL_AHB4_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000914:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000918:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800091c:	2302      	movs	r3, #2
 800091e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000934:	2307      	movs	r3, #7
 8000936:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800093e:	4619      	mov	r1, r3
 8000940:	482a      	ldr	r0, [pc, #168]	@ (80009ec <MX_USART1_UART_Init+0x138>)
 8000942:	f003 fd11 	bl	8004368 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000946:	f7ff fd8f 	bl	8000468 <__NVIC_GetPriorityGrouping>
 800094a:	4603      	mov	r3, r0
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fddf 	bl	8000514 <NVIC_EncodePriority>
 8000956:	4603      	mov	r3, r0
 8000958:	4619      	mov	r1, r3
 800095a:	2025      	movs	r0, #37	@ 0x25
 800095c:	f7ff fdb0 	bl	80004c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000960:	2025      	movs	r0, #37	@ 0x25
 8000962:	f7ff fd8f 	bl	8000484 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.BaudRate = 115200;
 800096c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000970:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000974:	2300      	movs	r3, #0
 8000976:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800097a:	2300      	movs	r3, #0
 800097c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000980:	2300      	movs	r3, #0
 8000982:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000986:	230c      	movs	r3, #12
 8000988:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000992:	2300      	movs	r3, #0
 8000994:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(USART1, &USART_InitStruct);
 8000998:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800099c:	4619      	mov	r1, r3
 800099e:	4814      	ldr	r0, [pc, #80]	@ (80009f0 <MX_USART1_UART_Init+0x13c>)
 80009a0:	f004 fc90 	bl	80052c4 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 80009a4:	2100      	movs	r1, #0
 80009a6:	4812      	ldr	r0, [pc, #72]	@ (80009f0 <MX_USART1_UART_Init+0x13c>)
 80009a8:	f7ff fe07 	bl	80005ba <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 80009ac:	2100      	movs	r1, #0
 80009ae:	4810      	ldr	r0, [pc, #64]	@ (80009f0 <MX_USART1_UART_Init+0x13c>)
 80009b0:	f7ff fe2a 	bl	8000608 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 80009b4:	480e      	ldr	r0, [pc, #56]	@ (80009f0 <MX_USART1_UART_Init+0x13c>)
 80009b6:	f7ff fdf0 	bl	800059a <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 80009ba:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <MX_USART1_UART_Init+0x13c>)
 80009bc:	f7ff fe4b 	bl	8000656 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 80009c0:	480b      	ldr	r0, [pc, #44]	@ (80009f0 <MX_USART1_UART_Init+0x13c>)
 80009c2:	f7ff fdda 	bl	800057a <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 80009c6:	bf00      	nop
 80009c8:	4809      	ldr	r0, [pc, #36]	@ (80009f0 <MX_USART1_UART_Init+0x13c>)
 80009ca:	f7ff fe5a 	bl	8000682 <LL_USART_IsActiveFlag_TEACK>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d0f9      	beq.n	80009c8 <MX_USART1_UART_Init+0x114>
 80009d4:	4806      	ldr	r0, [pc, #24]	@ (80009f0 <MX_USART1_UART_Init+0x13c>)
 80009d6:	f7ff fe68 	bl	80006aa <LL_USART_IsActiveFlag_REACK>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d0f3      	beq.n	80009c8 <MX_USART1_UART_Init+0x114>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	37f8      	adds	r7, #248	@ 0xf8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	58020000 	.word	0x58020000
 80009f0:	40011000 	.word	0x40011000

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <MX_GPIO_Init+0x30>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a00:	4a08      	ldr	r2, [pc, #32]	@ (8000a24 <MX_GPIO_Init+0x30>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_GPIO_Init+0x30>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	58024400 	.word	0x58024400

08000a28 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a2e:	463b      	mov	r3, r7
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a3a:	f000 fad3 	bl	8000fe4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a4a:	231f      	movs	r3, #31
 8000a4c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a4e:	2387      	movs	r3, #135	@ 0x87
 8000a50:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a56:	2300      	movs	r3, #0
 8000a58:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 faf1 	bl	8001054 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a72:	2004      	movs	r0, #4
 8000a74:	f000 face 	bl	8001014 <HAL_MPU_Enable>

}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <Error_Handler+0x8>

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <HAL_MspInit+0x30>)
 8000a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a98:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <HAL_MspInit+0x30>)
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_MspInit+0x30>)
 8000aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	58024400 	.word	0x58024400

08000ac0 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0b      	ldr	r2, [pc, #44]	@ (8000afc <HAL_CRC_MspInit+0x3c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d10e      	bne.n	8000af0 <HAL_CRC_MspInit+0x30>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <HAL_CRC_MspInit+0x40>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad8:	4a09      	ldr	r2, [pc, #36]	@ (8000b00 <HAL_CRC_MspInit+0x40>)
 8000ada:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <HAL_CRC_MspInit+0x40>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	58024c00 	.word	0x58024c00
 8000b00:	58024400 	.word	0x58024400

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <NMI_Handler+0x4>

08000b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SchedulerSysTickIntHandler();
 8000b5a:	f005 fd8d 	bl	8006678 <SchedulerSysTickIntHandler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5e:	f000 f90d 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART1_IRQ();
 8000b6a:	f004 fe05 	bl	8005778 <USART1_IRQ>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b74:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000bb0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000b78:	f7ff fc5c 	bl	8000434 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b7c:	f7ff fbac 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	@ (8000bb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	@ (8000bbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f005 fe09 	bl	80067bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fdcb 	bl	8000744 <main>
  bx  lr
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bb0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bb8:	24000044 	.word	0x24000044
  ldr r2, =_sidata
 8000bbc:	08006980 	.word	0x08006980
  ldr r2, =_sbss
 8000bc0:	24000044 	.word	0x24000044
  ldr r4, =_ebss
 8000bc4:	24000374 	.word	0x24000374

08000bc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC3_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	f000 f9d4 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bd8:	f001 fe04 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <HAL_Init+0x68>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	0a1b      	lsrs	r3, r3, #8
 8000be4:	f003 030f 	and.w	r3, r3, #15
 8000be8:	4913      	ldr	r1, [pc, #76]	@ (8000c38 <HAL_Init+0x6c>)
 8000bea:	5ccb      	ldrb	r3, [r1, r3]
 8000bec:	f003 031f 	and.w	r3, r3, #31
 8000bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <HAL_Init+0x68>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8000c38 <HAL_Init+0x6c>)
 8000c00:	5cd3      	ldrb	r3, [r2, r3]
 8000c02:	f003 031f 	and.w	r3, r3, #31
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	fa22 f303 	lsr.w	r3, r2, r3
 8000c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c3c <HAL_Init+0x70>)
 8000c0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c10:	4a0b      	ldr	r2, [pc, #44]	@ (8000c40 <HAL_Init+0x74>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c16:	200f      	movs	r0, #15
 8000c18:	f000 f87a 	bl	8000d10 <HAL_InitTick>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e002      	b.n	8000c2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c26:	f7ff ff31 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	58024400 	.word	0x58024400
 8000c38:	08006928 	.word	0x08006928
 8000c3c:	24000004 	.word	0x24000004
 8000c40:	24000000 	.word	0x24000000

08000c44 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
 8000c48:	4b26      	ldr	r3, [pc, #152]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000c4a:	4a27      	ldr	r2, [pc, #156]	@ (8000ce8 <HAL_DeInit+0xa4>)
 8000c4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000c4e:	4b25      	ldr	r3, [pc, #148]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
 8000c54:	4b23      	ldr	r3, [pc, #140]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000c56:	4a25      	ldr	r2, [pc, #148]	@ (8000cec <HAL_DeInit+0xa8>)
 8000c58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000c5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
 8000c64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000c66:	f240 2271 	movw	r2, #625	@ 0x271
 8000c6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
 8000c76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000c78:	4a1d      	ldr	r2, [pc, #116]	@ (8000cf0 <HAL_DeInit+0xac>)
 8000c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
 8000c7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_RCC_APB3_FORCE_RESET();
 8000c86:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000c88:	2218      	movs	r2, #24
 8000c8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
 8000c96:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000c98:	4a16      	ldr	r2, [pc, #88]	@ (8000cf4 <HAL_DeInit+0xb0>)
 8000c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000ca8:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8000cac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

   __HAL_RCC_APB2_FORCE_RESET();
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000cba:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf8 <HAL_DeInit+0xb4>)
 8000cbc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  __HAL_RCC_APB4_FORCE_RESET();
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000cca:	4a0c      	ldr	r2, [pc, #48]	@ (8000cfc <HAL_DeInit+0xb8>)
 8000ccc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
 8000cd0:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <HAL_DeInit+0xa0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000cd8:	f000 f812 	bl	8000d00 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	58024400 	.word	0x58024400
 8000ce8:	00015031 	.word	0x00015031
 8000cec:	0a00c023 	.word	0x0a00c023
 8000cf0:	032807ff 	.word	0x032807ff
 8000cf4:	e8ffc3ff 	.word	0xe8ffc3ff
 8000cf8:	31d73033 	.word	0x31d73033
 8000cfc:	0020deaa 	.word	0x0020deaa

08000d00 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d18:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <HAL_InitTick+0x60>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d101      	bne.n	8000d24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e021      	b.n	8000d68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <HAL_InitTick+0x64>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <HAL_InitTick+0x60>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f945 	bl	8000fca <HAL_SYSTICK_Config>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00e      	b.n	8000d68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d80a      	bhi.n	8000d66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d50:	2200      	movs	r2, #0
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f000 f91d 	bl	8000f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d5c:	4a06      	ldr	r2, [pc, #24]	@ (8000d78 <HAL_InitTick+0x68>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e000      	b.n	8000d68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	24000038 	.word	0x24000038
 8000d74:	24000000 	.word	0x24000000
 8000d78:	24000034 	.word	0x24000034

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	24000038 	.word	0x24000038
 8000da0:	24000084 	.word	0x24000084

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	24000084 	.word	0x24000084

08000dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc4:	f7ff ffee 	bl	8000da4 <HAL_GetTick>
 8000dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd4:	d005      	beq.n	8000de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <HAL_Delay+0x44>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de2:	bf00      	nop
 8000de4:	f7ff ffde 	bl	8000da4 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d8f7      	bhi.n	8000de4 <HAL_Delay+0x28>
  {
  }
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	24000038 	.word	0x24000038

08000e04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e08:	4b03      	ldr	r3, [pc, #12]	@ (8000e18 <HAL_GetREVID+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	0c1b      	lsrs	r3, r3, #16
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	5c001000 	.word	0x5c001000

08000e1c <__NVIC_SetPriorityGrouping>:
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <__NVIC_SetPriorityGrouping+0x40>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	@ (8000e5c <__NVIC_SetPriorityGrouping+0x40>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00
 8000e60:	05fa0000 	.word	0x05fa0000

08000e64 <__NVIC_GetPriorityGrouping>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_SetPriority>:
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	@ (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	@ (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	@ 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	@ 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f4c:	d301      	bcc.n	8000f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00f      	b.n	8000f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <SysTick_Config+0x40>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f7ff ff8e 	bl	8000e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <SysTick_Config+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6a:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <SysTick_Config+0x40>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff47 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa4:	f7ff ff5e 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f7ff ff90 	bl	8000ed4 <NVIC_EncodePriority>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff5f 	bl	8000e80 <__NVIC_SetPriority>
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffb2 	bl	8000f3c <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8000fe8:	f3bf 8f5f 	dmb	sy
}
 8000fec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000fee:	4b07      	ldr	r3, [pc, #28]	@ (800100c <HAL_MPU_Disable+0x28>)
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff2:	4a06      	ldr	r2, [pc, #24]	@ (800100c <HAL_MPU_Disable+0x28>)
 8000ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ff8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000ffa:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <HAL_MPU_Disable+0x2c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	605a      	str	r2, [r3, #4]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00
 8001010:	e000ed90 	.word	0xe000ed90

08001014 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800101c:	4a0b      	ldr	r2, [pc, #44]	@ (800104c <HAL_MPU_Enable+0x38>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_MPU_Enable+0x3c>)
 8001028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102a:	4a09      	ldr	r2, [pc, #36]	@ (8001050 <HAL_MPU_Enable+0x3c>)
 800102c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001030:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001032:	f3bf 8f4f 	dsb	sy
}
 8001036:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001038:	f3bf 8f6f 	isb	sy
}
 800103c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed90 	.word	0xe000ed90
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	785a      	ldrb	r2, [r3, #1]
 8001060:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001062:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001064:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	4a19      	ldr	r2, [pc, #100]	@ (80010d0 <HAL_MPU_ConfigRegion+0x7c>)
 800106a:	f023 0301 	bic.w	r3, r3, #1
 800106e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001070:	4a17      	ldr	r2, [pc, #92]	@ (80010d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7b1b      	ldrb	r3, [r3, #12]
 800107c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7adb      	ldrb	r3, [r3, #11]
 8001082:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001084:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7a9b      	ldrb	r3, [r3, #10]
 800108a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800108c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7b5b      	ldrb	r3, [r3, #13]
 8001092:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001094:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7b9b      	ldrb	r3, [r3, #14]
 800109a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800109c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7bdb      	ldrb	r3, [r3, #15]
 80010a2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80010a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7a5b      	ldrb	r3, [r3, #9]
 80010aa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80010ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7a1b      	ldrb	r3, [r3, #8]
 80010b2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80010b4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010bc:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010be:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010c0:	6113      	str	r3, [r2, #16]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed90 	.word	0xe000ed90

080010d4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e054      	b.n	8001190 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7f5b      	ldrb	r3, [r3, #29]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d105      	bne.n	80010fc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fce2 	bl	8000ac0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2202      	movs	r2, #2
 8001100:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	791b      	ldrb	r3, [r3, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10c      	bne.n	8001124 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a22      	ldr	r2, [pc, #136]	@ (8001198 <HAL_CRC_Init+0xc4>)
 8001110:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0218 	bic.w	r2, r2, #24
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	e00c      	b.n	800113e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6899      	ldr	r1, [r3, #8]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	461a      	mov	r2, r3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f834 	bl	800119c <HAL_CRCEx_Polynomial_Set>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e028      	b.n	8001190 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	795b      	ldrb	r3, [r3, #5]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d105      	bne.n	8001152 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f04f 32ff 	mov.w	r2, #4294967295
 800114e:	611a      	str	r2, [r3, #16]
 8001150:	e004      	b.n	800115c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	6912      	ldr	r2, [r2, #16]
 800115a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	695a      	ldr	r2, [r3, #20]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	430a      	orrs	r2, r1
 8001170:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	699a      	ldr	r2, [r3, #24]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	430a      	orrs	r2, r1
 8001186:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	04c11db7 	.word	0x04c11db7

0800119c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80011ac:	231f      	movs	r3, #31
 80011ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d102      	bne.n	80011c0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	75fb      	strb	r3, [r7, #23]
 80011be:	e063      	b.n	8001288 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80011c0:	bf00      	nop
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1e5a      	subs	r2, r3, #1
 80011c6:	613a      	str	r2, [r7, #16]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d009      	beq.n	80011e0 <HAL_CRCEx_Polynomial_Set+0x44>
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	fa22 f303 	lsr.w	r3, r2, r3
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b18      	cmp	r3, #24
 80011e4:	d846      	bhi.n	8001274 <HAL_CRCEx_Polynomial_Set+0xd8>
 80011e6:	a201      	add	r2, pc, #4	@ (adr r2, 80011ec <HAL_CRCEx_Polynomial_Set+0x50>)
 80011e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ec:	0800127b 	.word	0x0800127b
 80011f0:	08001275 	.word	0x08001275
 80011f4:	08001275 	.word	0x08001275
 80011f8:	08001275 	.word	0x08001275
 80011fc:	08001275 	.word	0x08001275
 8001200:	08001275 	.word	0x08001275
 8001204:	08001275 	.word	0x08001275
 8001208:	08001275 	.word	0x08001275
 800120c:	08001269 	.word	0x08001269
 8001210:	08001275 	.word	0x08001275
 8001214:	08001275 	.word	0x08001275
 8001218:	08001275 	.word	0x08001275
 800121c:	08001275 	.word	0x08001275
 8001220:	08001275 	.word	0x08001275
 8001224:	08001275 	.word	0x08001275
 8001228:	08001275 	.word	0x08001275
 800122c:	0800125d 	.word	0x0800125d
 8001230:	08001275 	.word	0x08001275
 8001234:	08001275 	.word	0x08001275
 8001238:	08001275 	.word	0x08001275
 800123c:	08001275 	.word	0x08001275
 8001240:	08001275 	.word	0x08001275
 8001244:	08001275 	.word	0x08001275
 8001248:	08001275 	.word	0x08001275
 800124c:	08001251 	.word	0x08001251
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	2b06      	cmp	r3, #6
 8001254:	d913      	bls.n	800127e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800125a:	e010      	b.n	800127e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	2b07      	cmp	r3, #7
 8001260:	d90f      	bls.n	8001282 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001266:	e00c      	b.n	8001282 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	2b0f      	cmp	r3, #15
 800126c:	d90b      	bls.n	8001286 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001272:	e008      	b.n	8001286 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	75fb      	strb	r3, [r7, #23]
        break;
 8001278:	e006      	b.n	8001288 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800127a:	bf00      	nop
 800127c:	e004      	b.n	8001288 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800127e:	bf00      	nop
 8001280:	e002      	b.n	8001288 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001282:	bf00      	nop
 8001284:	e000      	b.n	8001288 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001286:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001288:	7dfb      	ldrb	r3, [r7, #23]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10d      	bne.n	80012aa <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f023 0118 	bic.w	r1, r3, #24
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	371c      	adds	r7, #28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	@ 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 80012cc:	2308      	movs	r3, #8
 80012ce:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012d0:	4b40      	ldr	r3, [pc, #256]	@ (80013d4 <HAL_FLASH_Program+0x11c>)
 80012d2:	7d1b      	ldrb	r3, [r3, #20]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d101      	bne.n	80012dc <HAL_FLASH_Program+0x24>
 80012d8:	2302      	movs	r3, #2
 80012da:	e076      	b.n	80013ca <HAL_FLASH_Program+0x112>
 80012dc:	4b3d      	ldr	r3, [pc, #244]	@ (80013d4 <HAL_FLASH_Program+0x11c>)
 80012de:	2201      	movs	r2, #1
 80012e0:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80012e8:	d306      	bcc.n	80012f8 <HAL_FLASH_Program+0x40>
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80012f0:	d202      	bcs.n	80012f8 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 80012f6:	e00c      	b.n	8001312 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80012fe:	d306      	bcc.n	800130e <HAL_FLASH_Program+0x56>
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	f1b3 6f02 	cmp.w	r3, #136314880	@ 0x8200000
 8001306:	d202      	bcs.n	800130e <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8001308:	2302      	movs	r3, #2
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	e001      	b.n	8001312 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e05b      	b.n	80013ca <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001312:	4b30      	ldr	r3, [pc, #192]	@ (80013d4 <HAL_FLASH_Program+0x11c>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8001318:	69b9      	ldr	r1, [r7, #24]
 800131a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800131e:	f000 f8c1 	bl	80014a4 <FLASH_WaitForLastOperation>
 8001322:	4603      	mov	r3, r0
 8001324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 8001328:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800132c:	2b00      	cmp	r3, #0
 800132e:	d147      	bne.n	80013c0 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d106      	bne.n	8001344 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8001336:	4b28      	ldr	r3, [pc, #160]	@ (80013d8 <HAL_FLASH_Program+0x120>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	4a27      	ldr	r2, [pc, #156]	@ (80013d8 <HAL_FLASH_Program+0x120>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	60d3      	str	r3, [r2, #12]
 8001342:	e007      	b.n	8001354 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8001344:	4b24      	ldr	r3, [pc, #144]	@ (80013d8 <HAL_FLASH_Program+0x120>)
 8001346:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800134a:	4a23      	ldr	r2, [pc, #140]	@ (80013d8 <HAL_FLASH_Program+0x120>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800135a:	f3bf 8f4f 	dsb	sy
}
 800135e:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8001368:	6a3b      	ldr	r3, [r7, #32]
 800136a:	3304      	adds	r3, #4
 800136c:	623b      	str	r3, [r7, #32]
        src_addr++;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3304      	adds	r3, #4
 8001372:	61fb      	str	r3, [r7, #28]
        row_index--;
 8001374:	7dfb      	ldrb	r3, [r7, #23]
 8001376:	3b01      	subs	r3, #1
 8001378:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800137a:	7dfb      	ldrb	r3, [r7, #23]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1ef      	bne.n	8001360 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 8001380:	f3bf 8f6f 	isb	sy
}
 8001384:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8001386:	f3bf 8f4f 	dsb	sy
}
 800138a:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800138c:	69b9      	ldr	r1, [r7, #24]
 800138e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001392:	f000 f887 	bl	80014a4 <FLASH_WaitForLastOperation>
 8001396:	4603      	mov	r3, r0
 8001398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d106      	bne.n	80013b0 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 80013a2:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <HAL_FLASH_Program+0x120>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	4a0c      	ldr	r2, [pc, #48]	@ (80013d8 <HAL_FLASH_Program+0x120>)
 80013a8:	f023 0302 	bic.w	r3, r3, #2
 80013ac:	60d3      	str	r3, [r2, #12]
 80013ae:	e007      	b.n	80013c0 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <HAL_FLASH_Program+0x120>)
 80013b2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80013b6:	4a08      	ldr	r2, [pc, #32]	@ (80013d8 <HAL_FLASH_Program+0x120>)
 80013b8:	f023 0302 	bic.w	r3, r3, #2
 80013bc:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80013c0:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <HAL_FLASH_Program+0x11c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	751a      	strb	r2, [r3, #20]

  return status;
 80013c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3728      	adds	r7, #40	@ 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	24000088 	.word	0x24000088
 80013d8:	52002000 	.word	0x52002000

080013dc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80013e0:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <HAL_FLASH_Unlock+0x68>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00d      	beq.n	8001408 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 80013ec:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <HAL_FLASH_Unlock+0x68>)
 80013ee:	4a16      	ldr	r2, [pc, #88]	@ (8001448 <HAL_FLASH_Unlock+0x6c>)
 80013f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 80013f2:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <HAL_FLASH_Unlock+0x68>)
 80013f4:	4a15      	ldr	r2, [pc, #84]	@ (800144c <HAL_FLASH_Unlock+0x70>)
 80013f6:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <HAL_FLASH_Unlock+0x68>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e018      	b.n	800143a <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8001408:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <HAL_FLASH_Unlock+0x68>)
 800140a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d010      	beq.n	8001438 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8001416:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <HAL_FLASH_Unlock+0x68>)
 8001418:	4a0b      	ldr	r2, [pc, #44]	@ (8001448 <HAL_FLASH_Unlock+0x6c>)
 800141a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800141e:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <HAL_FLASH_Unlock+0x68>)
 8001420:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <HAL_FLASH_Unlock+0x70>)
 8001422:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8001426:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <HAL_FLASH_Unlock+0x68>)
 8001428:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	52002000 	.word	0x52002000
 8001448:	45670123 	.word	0x45670123
 800144c:	cdef89ab 	.word	0xcdef89ab

08001450 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_FLASH_Lock+0x50>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	4a11      	ldr	r2, [pc, #68]	@ (80014a0 <HAL_FLASH_Lock+0x50>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <HAL_FLASH_Lock+0x50>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e011      	b.n	8001494 <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 8001470:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <HAL_FLASH_Lock+0x50>)
 8001472:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001476:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <HAL_FLASH_Lock+0x50>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <HAL_FLASH_Lock+0x50>)
 8001482:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	52002000 	.word	0x52002000

080014a4 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 80014ae:	2304      	movs	r3, #4
 80014b0:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 80014b6:	f7ff fc75 	bl	8000da4 <HAL_GetTick>
 80014ba:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d113      	bne.n	80014ea <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 80014c2:	4b40      	ldr	r3, [pc, #256]	@ (80015c4 <FLASH_WaitForLastOperation+0x120>)
 80014c4:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80014c6:	e010      	b.n	80014ea <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ce:	d00c      	beq.n	80014ea <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80014d0:	f7ff fc68 	bl	8000da4 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d302      	bcc.n	80014e6 <FLASH_WaitForLastOperation+0x42>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e068      	b.n	80015bc <FLASH_WaitForLastOperation+0x118>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4b36      	ldr	r3, [pc, #216]	@ (80015c8 <FLASH_WaitForLastOperation+0x124>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10a      	bne.n	800150a <FLASH_WaitForLastOperation+0x66>
 80014f4:	4b35      	ldr	r3, [pc, #212]	@ (80015cc <FLASH_WaitForLastOperation+0x128>)
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	4013      	ands	r3, r2
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	429a      	cmp	r2, r3
 8001500:	bf0c      	ite	eq
 8001502:	2301      	moveq	r3, #1
 8001504:	2300      	movne	r3, #0
 8001506:	b2db      	uxtb	r3, r3
 8001508:	e00c      	b.n	8001524 <FLASH_WaitForLastOperation+0x80>
 800150a:	4b30      	ldr	r3, [pc, #192]	@ (80015cc <FLASH_WaitForLastOperation+0x128>)
 800150c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8001510:	43da      	mvns	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	4013      	ands	r3, r2
 8001516:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	bf0c      	ite	eq
 800151e:	2301      	moveq	r3, #1
 8001520:	2300      	movne	r3, #0
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1cf      	bne.n	80014c8 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d105      	bne.n	800153a <FLASH_WaitForLastOperation+0x96>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800152e:	4b27      	ldr	r3, [pc, #156]	@ (80015cc <FLASH_WaitForLastOperation+0x128>)
 8001530:	691a      	ldr	r2, [r3, #16]
 8001532:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <FLASH_WaitForLastOperation+0x12c>)
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	e007      	b.n	800154a <FLASH_WaitForLastOperation+0xa6>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800153a:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <FLASH_WaitForLastOperation+0x128>)
 800153c:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001540:	4b23      	ldr	r3, [pc, #140]	@ (80015d0 <FLASH_WaitForLastOperation+0x12c>)
 8001542:	4013      	ands	r3, r2
 8001544:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001548:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d016      	beq.n	8001582 <FLASH_WaitForLastOperation+0xde>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8001554:	4b1f      	ldr	r3, [pc, #124]	@ (80015d4 <FLASH_WaitForLastOperation+0x130>)
 8001556:	699a      	ldr	r2, [r3, #24]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	4a1d      	ldr	r2, [pc, #116]	@ (80015d4 <FLASH_WaitForLastOperation+0x130>)
 800155e:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <FLASH_WaitForLastOperation+0x124>)
 8001564:	4013      	ands	r3, r2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d103      	bne.n	8001572 <FLASH_WaitForLastOperation+0xce>
 800156a:	4a18      	ldr	r2, [pc, #96]	@ (80015cc <FLASH_WaitForLastOperation+0x128>)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	6153      	str	r3, [r2, #20]
 8001570:	e005      	b.n	800157e <FLASH_WaitForLastOperation+0xda>
 8001572:	4a16      	ldr	r2, [pc, #88]	@ (80015cc <FLASH_WaitForLastOperation+0x128>)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800157a:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e01c      	b.n	80015bc <FLASH_WaitForLastOperation+0x118>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d10b      	bne.n	80015a0 <FLASH_WaitForLastOperation+0xfc>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8001588:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <FLASH_WaitForLastOperation+0x128>)
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001594:	d111      	bne.n	80015ba <FLASH_WaitForLastOperation+0x116>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8001596:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <FLASH_WaitForLastOperation+0x128>)
 8001598:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800159c:	615a      	str	r2, [r3, #20]
 800159e:	e00c      	b.n	80015ba <FLASH_WaitForLastOperation+0x116>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 80015a0:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <FLASH_WaitForLastOperation+0x128>)
 80015a2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80015a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015ae:	d104      	bne.n	80015ba <FLASH_WaitForLastOperation+0x116>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <FLASH_WaitForLastOperation+0x128>)
 80015b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015b6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	80000004 	.word	0x80000004
 80015c8:	e010fff0 	.word	0xe010fff0
 80015cc:	52002000 	.word	0x52002000
 80015d0:	17ee0000 	.word	0x17ee0000
 80015d4:	24000088 	.word	0x24000088

080015d8 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80015e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001760 <HAL_FLASHEx_Erase+0x188>)
 80015e8:	7d1b      	ldrb	r3, [r3, #20]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_FLASHEx_Erase+0x1a>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e0b2      	b.n	8001758 <HAL_FLASHEx_Erase+0x180>
 80015f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001760 <HAL_FLASHEx_Erase+0x188>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015f8:	4b59      	ldr	r3, [pc, #356]	@ (8001760 <HAL_FLASHEx_Erase+0x188>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d009      	beq.n	800161e <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800160a:	2101      	movs	r1, #1
 800160c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001610:	f7ff ff48 	bl	80014a4 <FLASH_WaitForLastOperation>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800162a:	2102      	movs	r1, #2
 800162c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001630:	f7ff ff38 	bl	80014a4 <FLASH_WaitForLastOperation>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f040 8085 	bne.w	8001750 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d136      	bne.n	80016bc <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691a      	ldr	r2, [r3, #16]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4619      	mov	r1, r3
 8001658:	4610      	mov	r0, r2
 800165a:	f000 f887 	bl	800176c <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00f      	beq.n	800168a <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800166a:	2101      	movs	r1, #1
 800166c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001670:	f7ff ff18 	bl	80014a4 <FLASH_WaitForLastOperation>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800167e:	4b39      	ldr	r3, [pc, #228]	@ (8001764 <HAL_FLASHEx_Erase+0x18c>)
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	4a38      	ldr	r2, [pc, #224]	@ (8001764 <HAL_FLASHEx_Erase+0x18c>)
 8001684:	f023 0308 	bic.w	r3, r3, #8
 8001688:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d05c      	beq.n	8001750 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8001696:	2102      	movs	r1, #2
 8001698:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800169c:	f7ff ff02 	bl	80014a4 <FLASH_WaitForLastOperation>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 80016aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001764 <HAL_FLASHEx_Erase+0x18c>)
 80016ac:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80016b0:	4a2c      	ldr	r2, [pc, #176]	@ (8001764 <HAL_FLASHEx_Erase+0x18c>)
 80016b2:	f023 0308 	bic.w	r3, r3, #8
 80016b6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
 80016ba:	e049      	b.n	8001750 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	f04f 32ff 	mov.w	r2, #4294967295
 80016c2:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	e039      	b.n	8001740 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	461a      	mov	r2, r3
 80016d6:	68b8      	ldr	r0, [r7, #8]
 80016d8:	f000 f8b2 	bl	8001840 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00c      	beq.n	8001702 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 80016e8:	2101      	movs	r1, #1
 80016ea:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80016ee:	f7ff fed9 	bl	80014a4 <FLASH_WaitForLastOperation>
 80016f2:	4603      	mov	r3, r0
 80016f4:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80016f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <HAL_FLASHEx_Erase+0x18c>)
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	491a      	ldr	r1, [pc, #104]	@ (8001764 <HAL_FLASHEx_Erase+0x18c>)
 80016fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <HAL_FLASHEx_Erase+0x190>)
 80016fe:	4013      	ands	r3, r2
 8001700:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00e      	beq.n	800172c <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800170e:	2102      	movs	r1, #2
 8001710:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001714:	f7ff fec6 	bl	80014a4 <FLASH_WaitForLastOperation>
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <HAL_FLASHEx_Erase+0x18c>)
 800171e:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8001722:	4910      	ldr	r1, [pc, #64]	@ (8001764 <HAL_FLASHEx_Erase+0x18c>)
 8001724:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <HAL_FLASHEx_Erase+0x190>)
 8001726:	4013      	ands	r3, r2
 8001728:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	601a      	str	r2, [r3, #0]
          break;
 8001738:	e00a      	b.n	8001750 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	3301      	adds	r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4413      	add	r3, r2
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	429a      	cmp	r2, r3
 800174e:	d3bd      	bcc.n	80016cc <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001750:	4b03      	ldr	r3, [pc, #12]	@ (8001760 <HAL_FLASHEx_Erase+0x188>)
 8001752:	2200      	movs	r2, #0
 8001754:	751a      	strb	r2, [r3, #20]

  return status;
 8001756:	7bfb      	ldrb	r3, [r7, #15]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	24000088 	.word	0x24000088
 8001764:	52002000 	.word	0x52002000
 8001768:	fffff8fb 	.word	0xfffff8fb

0800176c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b03      	cmp	r3, #3
 800177e:	d122      	bne.n	80017c6 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8001780:	4b2e      	ldr	r3, [pc, #184]	@ (800183c <FLASH_MassErase+0xd0>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4a2d      	ldr	r2, [pc, #180]	@ (800183c <FLASH_MassErase+0xd0>)
 8001786:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800178a:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800178c:	4b2b      	ldr	r3, [pc, #172]	@ (800183c <FLASH_MassErase+0xd0>)
 800178e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001792:	4a2a      	ldr	r2, [pc, #168]	@ (800183c <FLASH_MassErase+0xd0>)
 8001794:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001798:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800179c:	4b27      	ldr	r3, [pc, #156]	@ (800183c <FLASH_MassErase+0xd0>)
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	4926      	ldr	r1, [pc, #152]	@ (800183c <FLASH_MassErase+0xd0>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 80017a8:	4b24      	ldr	r3, [pc, #144]	@ (800183c <FLASH_MassErase+0xd0>)
 80017aa:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 80017ae:	4923      	ldr	r1, [pc, #140]	@ (800183c <FLASH_MassErase+0xd0>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 80017b8:	4b20      	ldr	r3, [pc, #128]	@ (800183c <FLASH_MassErase+0xd0>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4a1f      	ldr	r2, [pc, #124]	@ (800183c <FLASH_MassErase+0xd0>)
 80017be:	f043 0310 	orr.w	r3, r3, #16
 80017c2:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 80017c4:	e033      	b.n	800182e <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d011      	beq.n	80017f4 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80017d0:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <FLASH_MassErase+0xd0>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a19      	ldr	r2, [pc, #100]	@ (800183c <FLASH_MassErase+0xd0>)
 80017d6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80017da:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 80017dc:	4b17      	ldr	r3, [pc, #92]	@ (800183c <FLASH_MassErase+0xd0>)
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	4916      	ldr	r1, [pc, #88]	@ (800183c <FLASH_MassErase+0xd0>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 80017e8:	4b14      	ldr	r3, [pc, #80]	@ (800183c <FLASH_MassErase+0xd0>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	4a13      	ldr	r2, [pc, #76]	@ (800183c <FLASH_MassErase+0xd0>)
 80017ee:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 80017f2:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d017      	beq.n	800182e <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 80017fe:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <FLASH_MassErase+0xd0>)
 8001800:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001804:	4a0d      	ldr	r2, [pc, #52]	@ (800183c <FLASH_MassErase+0xd0>)
 8001806:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800180a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
      FLASH->CR2 |= VoltageRange;
 800180e:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <FLASH_MassErase+0xd0>)
 8001810:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8001814:	4909      	ldr	r1, [pc, #36]	@ (800183c <FLASH_MassErase+0xd0>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4313      	orrs	r3, r2
 800181a:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800181e:	4b07      	ldr	r3, [pc, #28]	@ (800183c <FLASH_MassErase+0xd0>)
 8001820:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001824:	4a05      	ldr	r2, [pc, #20]	@ (800183c <FLASH_MassErase+0xd0>)
 8001826:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800182a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	52002000 	.word	0x52002000

08001840 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d010      	beq.n	8001878 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8001856:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <FLASH_Erase_Sector+0x78>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	4a17      	ldr	r2, [pc, #92]	@ (80018b8 <FLASH_Erase_Sector+0x78>)
 800185c:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 8001860:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <FLASH_Erase_Sector+0x78>)
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	0219      	lsls	r1, r3, #8
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	430b      	orrs	r3, r1
 800186e:	4313      	orrs	r3, r2
 8001870:	4a11      	ldr	r2, [pc, #68]	@ (80018b8 <FLASH_Erase_Sector+0x78>)
 8001872:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 8001876:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d014      	beq.n	80018ac <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8001882:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <FLASH_Erase_Sector+0x78>)
 8001884:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001888:	4a0b      	ldr	r2, [pc, #44]	@ (80018b8 <FLASH_Erase_Sector+0x78>)
 800188a:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 800188e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8001892:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <FLASH_Erase_Sector+0x78>)
 8001894:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	0219      	lsls	r1, r3, #8
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	430b      	orrs	r3, r1
 80018a0:	4313      	orrs	r3, r2
 80018a2:	4a05      	ldr	r2, [pc, #20]	@ (80018b8 <FLASH_Erase_Sector+0x78>)
 80018a4:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 80018a8:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	52002000 	.word	0x52002000

080018bc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80018c4:	4b29      	ldr	r3, [pc, #164]	@ (800196c <HAL_PWREx_ConfigSupply+0xb0>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	2b06      	cmp	r3, #6
 80018ce:	d00a      	beq.n	80018e6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80018d0:	4b26      	ldr	r3, [pc, #152]	@ (800196c <HAL_PWREx_ConfigSupply+0xb0>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d001      	beq.n	80018e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e040      	b.n	8001964 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e03e      	b.n	8001964 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80018e6:	4b21      	ldr	r3, [pc, #132]	@ (800196c <HAL_PWREx_ConfigSupply+0xb0>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80018ee:	491f      	ldr	r1, [pc, #124]	@ (800196c <HAL_PWREx_ConfigSupply+0xb0>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80018f6:	f7ff fa55 	bl	8000da4 <HAL_GetTick>
 80018fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018fc:	e009      	b.n	8001912 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018fe:	f7ff fa51 	bl	8000da4 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800190c:	d901      	bls.n	8001912 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e028      	b.n	8001964 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001912:	4b16      	ldr	r3, [pc, #88]	@ (800196c <HAL_PWREx_ConfigSupply+0xb0>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800191a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800191e:	d1ee      	bne.n	80018fe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b1e      	cmp	r3, #30
 8001924:	d008      	beq.n	8001938 <HAL_PWREx_ConfigSupply+0x7c>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b2e      	cmp	r3, #46	@ 0x2e
 800192a:	d005      	beq.n	8001938 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b1d      	cmp	r3, #29
 8001930:	d002      	beq.n	8001938 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b2d      	cmp	r3, #45	@ 0x2d
 8001936:	d114      	bne.n	8001962 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001938:	f7ff fa34 	bl	8000da4 <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800193e:	e009      	b.n	8001954 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001940:	f7ff fa30 	bl	8000da4 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800194e:	d901      	bls.n	8001954 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e007      	b.n	8001964 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <HAL_PWREx_ConfigSupply+0xb0>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800195c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001960:	d1ee      	bne.n	8001940 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	58024800 	.word	0x58024800

08001970 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 8001976:	4b89      	ldr	r3, [pc, #548]	@ (8001b9c <HAL_RCC_DeInit+0x22c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	2b06      	cmp	r3, #6
 8001980:	d80f      	bhi.n	80019a2 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8001982:	4b86      	ldr	r3, [pc, #536]	@ (8001b9c <HAL_RCC_DeInit+0x22c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 030f 	bic.w	r3, r3, #15
 800198a:	4a84      	ldr	r2, [pc, #528]	@ (8001b9c <HAL_RCC_DeInit+0x22c>)
 800198c:	f043 0307 	orr.w	r3, r3, #7
 8001990:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8001992:	4b82      	ldr	r3, [pc, #520]	@ (8001b9c <HAL_RCC_DeInit+0x22c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	2b07      	cmp	r3, #7
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e0f7      	b.n	8001b92 <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80019a2:	f7ff f9ff 	bl	8000da4 <HAL_GetTick>
 80019a6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80019a8:	4b7d      	ldr	r3, [pc, #500]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a7c      	ldr	r2, [pc, #496]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff f9f5 	bl	8000da4 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0e4      	b.n	8001b92 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c8:	4b75      	ldr	r3, [pc, #468]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 80019d4:	4b72      	ldr	r3, [pc, #456]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	4a71      	ldr	r2, [pc, #452]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 80019da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80019de:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80019e0:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 80019e6:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba4 <HAL_RCC_DeInit+0x234>)
 80019e8:	4a6f      	ldr	r2, [pc, #444]	@ (8001ba8 <HAL_RCC_DeInit+0x238>)
 80019ea:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 80019ec:	4b6f      	ldr	r3, [pc, #444]	@ (8001bac <HAL_RCC_DeInit+0x23c>)
 80019ee:	4a6e      	ldr	r2, [pc, #440]	@ (8001ba8 <HAL_RCC_DeInit+0x238>)
 80019f0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019f2:	4b6f      	ldr	r3, [pc, #444]	@ (8001bb0 <HAL_RCC_DeInit+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff f98a 	bl	8000d10 <HAL_InitTick>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0c5      	b.n	8001b92 <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001a06:	f7ff f9cd 	bl	8000da4 <HAL_GetTick>
 8001a0a:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001a0c:	e00a      	b.n	8001a24 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0e:	f7ff f9c9 	bl	8000da4 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e0b6      	b.n	8001b92 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001a24:	4b5e      	ldr	r3, [pc, #376]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1ee      	bne.n	8001a0e <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001a30:	f7ff f9b8 	bl	8000da4 <HAL_GetTick>
 8001a34:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 8001a36:	4b5a      	ldr	r3, [pc, #360]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4959      	ldr	r1, [pc, #356]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001a3c:	4b5d      	ldr	r3, [pc, #372]	@ (8001bb4 <HAL_RCC_DeInit+0x244>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff f9ae 	bl	8000da4 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	@ 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e09d      	b.n	8001b92 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a56:	4b52      	ldr	r3, [pc, #328]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001a62:	f7ff f99f 	bl	8000da4 <HAL_GetTick>
 8001a66:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8001a68:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001a6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a72:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a76:	f7ff f995 	bl	8000da4 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e084      	b.n	8001b92 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001a88:	4b45      	ldr	r3, [pc, #276]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1f0      	bne.n	8001a76 <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001a94:	f7ff f986 	bl	8000da4 <HAL_GetTick>
 8001a98:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8001a9a:	4b41      	ldr	r3, [pc, #260]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a40      	ldr	r2, [pc, #256]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001aa0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001aa4:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff f97c 	bl	8000da4 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e06b      	b.n	8001b92 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8001aba:	4b39      	ldr	r3, [pc, #228]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001ac6:	f7ff f96d 	bl	8000da4 <HAL_GetTick>
 8001aca:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 8001acc:	4b34      	ldr	r3, [pc, #208]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a33      	ldr	r2, [pc, #204]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001ad2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ad6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff f963 	bl	8000da4 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e052      	b.n	8001b92 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8001aec:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 8001af8:	4b29      	ldr	r3, [pc, #164]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 8001afe:	4b28      	ldr	r3, [pc, #160]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 8001b04:	4b26      	ldr	r3, [pc, #152]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 8001b0a:	4b25      	ldr	r3, [pc, #148]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb8 <HAL_RCC_DeInit+0x248>)
 8001b0e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 8001b10:	4b23      	ldr	r3, [pc, #140]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001b12:	4a2a      	ldr	r2, [pc, #168]	@ (8001bbc <HAL_RCC_DeInit+0x24c>)
 8001b14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 8001b16:	4b22      	ldr	r3, [pc, #136]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001b18:	4a29      	ldr	r2, [pc, #164]	@ (8001bc0 <HAL_RCC_DeInit+0x250>)
 8001b1a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8001b1c:	4b20      	ldr	r3, [pc, #128]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 8001b22:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001b24:	4a26      	ldr	r2, [pc, #152]	@ (8001bc0 <HAL_RCC_DeInit+0x250>)
 8001b26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 8001b28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001b30:	4a23      	ldr	r2, [pc, #140]	@ (8001bc0 <HAL_RCC_DeInit+0x250>)
 8001b32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8001b34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001b3a:	4b19      	ldr	r3, [pc, #100]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a18      	ldr	r2, [pc, #96]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001b40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b44:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8001b46:	4b16      	ldr	r3, [pc, #88]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8001b4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b52:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001b56:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001b5a:	4a11      	ldr	r2, [pc, #68]	@ (8001ba0 <HAL_RCC_DeInit+0x230>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b60:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8001b64:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <HAL_RCC_DeInit+0x22c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00f      	beq.n	8001b90 <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8001b70:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <HAL_RCC_DeInit+0x22c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 030f 	bic.w	r3, r3, #15
 8001b78:	4a08      	ldr	r2, [pc, #32]	@ (8001b9c <HAL_RCC_DeInit+0x22c>)
 8001b7a:	f043 0307 	orr.w	r3, r3, #7
 8001b7e:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_RCC_DeInit+0x22c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	2b07      	cmp	r3, #7
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	52002000 	.word	0x52002000
 8001ba0:	58024400 	.word	0x58024400
 8001ba4:	24000000 	.word	0x24000000
 8001ba8:	03d09000 	.word	0x03d09000
 8001bac:	24000004 	.word	0x24000004
 8001bb0:	24000034 	.word	0x24000034
 8001bb4:	fff6ed45 	.word	0xfff6ed45
 8001bb8:	02020200 	.word	0x02020200
 8001bbc:	01ff0000 	.word	0x01ff0000
 8001bc0:	01010280 	.word	0x01010280

08001bc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	@ 0x30
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f000 bc48 	b.w	8002468 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8088 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be6:	4b99      	ldr	r3, [pc, #612]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bf0:	4b96      	ldr	r3, [pc, #600]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf8:	2b10      	cmp	r3, #16
 8001bfa:	d007      	beq.n	8001c0c <HAL_RCC_OscConfig+0x48>
 8001bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bfe:	2b18      	cmp	r3, #24
 8001c00:	d111      	bne.n	8001c26 <HAL_RCC_OscConfig+0x62>
 8001c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d10c      	bne.n	8001c26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	4b8f      	ldr	r3, [pc, #572]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d06d      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x130>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d169      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f000 bc21 	b.w	8002468 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x7a>
 8001c30:	4b86      	ldr	r3, [pc, #536]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a85      	ldr	r2, [pc, #532]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	e02e      	b.n	8001c9c <HAL_RCC_OscConfig+0xd8>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x9c>
 8001c46:	4b81      	ldr	r3, [pc, #516]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a80      	ldr	r2, [pc, #512]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001c4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b7e      	ldr	r3, [pc, #504]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a7d      	ldr	r2, [pc, #500]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001c58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e01d      	b.n	8001c9c <HAL_RCC_OscConfig+0xd8>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0xc0>
 8001c6a:	4b78      	ldr	r3, [pc, #480]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a77      	ldr	r2, [pc, #476]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001c70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b75      	ldr	r3, [pc, #468]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a74      	ldr	r2, [pc, #464]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e00b      	b.n	8001c9c <HAL_RCC_OscConfig+0xd8>
 8001c84:	4b71      	ldr	r3, [pc, #452]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a70      	ldr	r2, [pc, #448]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b6e      	ldr	r3, [pc, #440]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a6d      	ldr	r2, [pc, #436]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001c96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d013      	beq.n	8001ccc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f87e 	bl	8000da4 <HAL_GetTick>
 8001ca8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff f87a 	bl	8000da4 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	@ 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e3d4      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cbe:	4b63      	ldr	r3, [pc, #396]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0xe8>
 8001cca:	e014      	b.n	8001cf6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f86a 	bl	8000da4 <HAL_GetTick>
 8001cd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f866 	bl	8000da4 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b64      	cmp	r3, #100	@ 0x64
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e3c0      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ce6:	4b59      	ldr	r3, [pc, #356]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x110>
 8001cf2:	e000      	b.n	8001cf6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80ca 	beq.w	8001e98 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d04:	4b51      	ldr	r3, [pc, #324]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d0c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d12:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d007      	beq.n	8001d2a <HAL_RCC_OscConfig+0x166>
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	2b18      	cmp	r3, #24
 8001d1e:	d156      	bne.n	8001dce <HAL_RCC_OscConfig+0x20a>
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d151      	bne.n	8001dce <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d2a:	4b48      	ldr	r3, [pc, #288]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_RCC_OscConfig+0x17e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e392      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d42:	4b42      	ldr	r3, [pc, #264]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 0219 	bic.w	r2, r3, #25
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	493f      	ldr	r1, [pc, #252]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff f826 	bl	8000da4 <HAL_GetTick>
 8001d58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5c:	f7ff f822 	bl	8000da4 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e37c      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d6e:	4b37      	ldr	r3, [pc, #220]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7a:	f7ff f843 	bl	8000e04 <HAL_GetREVID>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d817      	bhi.n	8001db8 <HAL_RCC_OscConfig+0x1f4>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	2b40      	cmp	r3, #64	@ 0x40
 8001d8e:	d108      	bne.n	8001da2 <HAL_RCC_OscConfig+0x1de>
 8001d90:	4b2e      	ldr	r3, [pc, #184]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d98:	4a2c      	ldr	r2, [pc, #176]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d9e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da0:	e07a      	b.n	8001e98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	031b      	lsls	r3, r3, #12
 8001db0:	4926      	ldr	r1, [pc, #152]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db6:	e06f      	b.n	8001e98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	061b      	lsls	r3, r3, #24
 8001dc6:	4921      	ldr	r1, [pc, #132]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dcc:	e064      	b.n	8001e98 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d047      	beq.n	8001e66 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0219 	bic.w	r2, r3, #25
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	491a      	ldr	r1, [pc, #104]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7fe ffdc 	bl	8000da4 <HAL_GetTick>
 8001dec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df0:	f7fe ffd8 	bl	8000da4 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e332      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0e:	f7fe fff9 	bl	8000e04 <HAL_GetREVID>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d819      	bhi.n	8001e50 <HAL_RCC_OscConfig+0x28c>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	2b40      	cmp	r3, #64	@ 0x40
 8001e22:	d108      	bne.n	8001e36 <HAL_RCC_OscConfig+0x272>
 8001e24:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001e2c:	4a07      	ldr	r2, [pc, #28]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e32:	6053      	str	r3, [r2, #4]
 8001e34:	e030      	b.n	8001e98 <HAL_RCC_OscConfig+0x2d4>
 8001e36:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	031b      	lsls	r3, r3, #12
 8001e44:	4901      	ldr	r1, [pc, #4]	@ (8001e4c <HAL_RCC_OscConfig+0x288>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
 8001e4a:	e025      	b.n	8001e98 <HAL_RCC_OscConfig+0x2d4>
 8001e4c:	58024400 	.word	0x58024400
 8001e50:	4b9a      	ldr	r3, [pc, #616]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	4997      	ldr	r1, [pc, #604]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
 8001e64:	e018      	b.n	8001e98 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e66:	4b95      	ldr	r3, [pc, #596]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a94      	ldr	r2, [pc, #592]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e72:	f7fe ff97 	bl	8000da4 <HAL_GetTick>
 8001e76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e7a:	f7fe ff93 	bl	8000da4 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e2ed      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e8c:	4b8b      	ldr	r3, [pc, #556]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f0      	bne.n	8001e7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80a9 	beq.w	8001ff8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea6:	4b85      	ldr	r3, [pc, #532]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001eae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001eb0:	4b82      	ldr	r3, [pc, #520]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d007      	beq.n	8001ecc <HAL_RCC_OscConfig+0x308>
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2b18      	cmp	r3, #24
 8001ec0:	d13a      	bne.n	8001f38 <HAL_RCC_OscConfig+0x374>
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d135      	bne.n	8001f38 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ecc:	4b7b      	ldr	r3, [pc, #492]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x320>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	2b80      	cmp	r3, #128	@ 0x80
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e2c1      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ee4:	f7fe ff8e 	bl	8000e04 <HAL_GetREVID>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d817      	bhi.n	8001f22 <HAL_RCC_OscConfig+0x35e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	d108      	bne.n	8001f0c <HAL_RCC_OscConfig+0x348>
 8001efa:	4b70      	ldr	r3, [pc, #448]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f02:	4a6e      	ldr	r2, [pc, #440]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001f04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f08:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f0a:	e075      	b.n	8001ff8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f0c:	4b6b      	ldr	r3, [pc, #428]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	069b      	lsls	r3, r3, #26
 8001f1a:	4968      	ldr	r1, [pc, #416]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f20:	e06a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f22:	4b66      	ldr	r3, [pc, #408]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	061b      	lsls	r3, r3, #24
 8001f30:	4962      	ldr	r1, [pc, #392]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f36:	e05f      	b.n	8001ff8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d042      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f40:	4b5e      	ldr	r3, [pc, #376]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a5d      	ldr	r2, [pc, #372]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7fe ff2a 	bl	8000da4 <HAL_GetTick>
 8001f50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f54:	f7fe ff26 	bl	8000da4 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e280      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f66:	4b55      	ldr	r3, [pc, #340]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f72:	f7fe ff47 	bl	8000e04 <HAL_GetREVID>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d817      	bhi.n	8001fb0 <HAL_RCC_OscConfig+0x3ec>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d108      	bne.n	8001f9a <HAL_RCC_OscConfig+0x3d6>
 8001f88:	4b4c      	ldr	r3, [pc, #304]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f90:	4a4a      	ldr	r2, [pc, #296]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001f92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f96:	6053      	str	r3, [r2, #4]
 8001f98:	e02e      	b.n	8001ff8 <HAL_RCC_OscConfig+0x434>
 8001f9a:	4b48      	ldr	r3, [pc, #288]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	069b      	lsls	r3, r3, #26
 8001fa8:	4944      	ldr	r1, [pc, #272]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
 8001fae:	e023      	b.n	8001ff8 <HAL_RCC_OscConfig+0x434>
 8001fb0:	4b42      	ldr	r3, [pc, #264]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	061b      	lsls	r3, r3, #24
 8001fbe:	493f      	ldr	r1, [pc, #252]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60cb      	str	r3, [r1, #12]
 8001fc4:	e018      	b.n	8001ff8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001fc6:	4b3d      	ldr	r3, [pc, #244]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a3c      	ldr	r2, [pc, #240]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001fcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd2:	f7fe fee7 	bl	8000da4 <HAL_GetTick>
 8001fd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001fda:	f7fe fee3 	bl	8000da4 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e23d      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fec:	4b33      	ldr	r3, [pc, #204]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f0      	bne.n	8001fda <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d036      	beq.n	8002072 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d019      	beq.n	8002040 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200c:	4b2b      	ldr	r3, [pc, #172]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 800200e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002010:	4a2a      	ldr	r2, [pc, #168]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7fe fec4 	bl	8000da4 <HAL_GetTick>
 800201c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002020:	f7fe fec0 	bl	8000da4 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e21a      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002032:	4b22      	ldr	r3, [pc, #136]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8002034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x45c>
 800203e:	e018      	b.n	8002072 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002040:	4b1e      	ldr	r3, [pc, #120]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8002042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002044:	4a1d      	ldr	r2, [pc, #116]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8002046:	f023 0301 	bic.w	r3, r3, #1
 800204a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7fe feaa 	bl	8000da4 <HAL_GetTick>
 8002050:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002054:	f7fe fea6 	bl	8000da4 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e200      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002066:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8002068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b00      	cmp	r3, #0
 800207c:	d039      	beq.n	80020f2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d01c      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002086:	4b0d      	ldr	r3, [pc, #52]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a0c      	ldr	r2, [pc, #48]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 800208c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002090:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002092:	f7fe fe87 	bl	8000da4 <HAL_GetTick>
 8002096:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800209a:	f7fe fe83 	bl	8000da4 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e1dd      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020ac:	4b03      	ldr	r3, [pc, #12]	@ (80020bc <HAL_RCC_OscConfig+0x4f8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x4d6>
 80020b8:	e01b      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
 80020ba:	bf00      	nop
 80020bc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020c0:	4b9b      	ldr	r3, [pc, #620]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a9a      	ldr	r2, [pc, #616]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80020c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020cc:	f7fe fe6a 	bl	8000da4 <HAL_GetTick>
 80020d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d4:	f7fe fe66 	bl	8000da4 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1c0      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020e6:	4b92      	ldr	r3, [pc, #584]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8081 	beq.w	8002202 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002100:	4b8c      	ldr	r3, [pc, #560]	@ (8002334 <HAL_RCC_OscConfig+0x770>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a8b      	ldr	r2, [pc, #556]	@ (8002334 <HAL_RCC_OscConfig+0x770>)
 8002106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800210a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800210c:	f7fe fe4a 	bl	8000da4 <HAL_GetTick>
 8002110:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002114:	f7fe fe46 	bl	8000da4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	@ 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1a0      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002126:	4b83      	ldr	r3, [pc, #524]	@ (8002334 <HAL_RCC_OscConfig+0x770>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d106      	bne.n	8002148 <HAL_RCC_OscConfig+0x584>
 800213a:	4b7d      	ldr	r3, [pc, #500]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800213e:	4a7c      	ldr	r2, [pc, #496]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6713      	str	r3, [r2, #112]	@ 0x70
 8002146:	e02d      	b.n	80021a4 <HAL_RCC_OscConfig+0x5e0>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10c      	bne.n	800216a <HAL_RCC_OscConfig+0x5a6>
 8002150:	4b77      	ldr	r3, [pc, #476]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002154:	4a76      	ldr	r2, [pc, #472]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	6713      	str	r3, [r2, #112]	@ 0x70
 800215c:	4b74      	ldr	r3, [pc, #464]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002160:	4a73      	ldr	r2, [pc, #460]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 8002162:	f023 0304 	bic.w	r3, r3, #4
 8002166:	6713      	str	r3, [r2, #112]	@ 0x70
 8002168:	e01c      	b.n	80021a4 <HAL_RCC_OscConfig+0x5e0>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b05      	cmp	r3, #5
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x5c8>
 8002172:	4b6f      	ldr	r3, [pc, #444]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002176:	4a6e      	ldr	r2, [pc, #440]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	6713      	str	r3, [r2, #112]	@ 0x70
 800217e:	4b6c      	ldr	r3, [pc, #432]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002182:	4a6b      	ldr	r2, [pc, #428]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6713      	str	r3, [r2, #112]	@ 0x70
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0x5e0>
 800218c:	4b68      	ldr	r3, [pc, #416]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002190:	4a67      	ldr	r2, [pc, #412]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	6713      	str	r3, [r2, #112]	@ 0x70
 8002198:	4b65      	ldr	r3, [pc, #404]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219c:	4a64      	ldr	r2, [pc, #400]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 800219e:	f023 0304 	bic.w	r3, r3, #4
 80021a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d015      	beq.n	80021d8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7fe fdfa 	bl	8000da4 <HAL_GetTick>
 80021b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7fe fdf6 	bl	8000da4 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e14e      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021ca:	4b59      	ldr	r3, [pc, #356]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0ee      	beq.n	80021b4 <HAL_RCC_OscConfig+0x5f0>
 80021d6:	e014      	b.n	8002202 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d8:	f7fe fde4 	bl	8000da4 <HAL_GetTick>
 80021dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f7fe fde0 	bl	8000da4 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e138      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ee      	bne.n	80021e0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 812d 	beq.w	8002466 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800220c:	4b48      	ldr	r3, [pc, #288]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002214:	2b18      	cmp	r3, #24
 8002216:	f000 80bd 	beq.w	8002394 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	2b02      	cmp	r3, #2
 8002220:	f040 809e 	bne.w	8002360 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002224:	4b42      	ldr	r3, [pc, #264]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a41      	ldr	r2, [pc, #260]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 800222a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800222e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fdb8 	bl	8000da4 <HAL_GetTick>
 8002234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002238:	f7fe fdb4 	bl	8000da4 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e10e      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800224a:	4b39      	ldr	r3, [pc, #228]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002256:	4b36      	ldr	r3, [pc, #216]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 8002258:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800225a:	4b37      	ldr	r3, [pc, #220]	@ (8002338 <HAL_RCC_OscConfig+0x774>)
 800225c:	4013      	ands	r3, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002266:	0112      	lsls	r2, r2, #4
 8002268:	430a      	orrs	r2, r1
 800226a:	4931      	ldr	r1, [pc, #196]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 800226c:	4313      	orrs	r3, r2
 800226e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002274:	3b01      	subs	r3, #1
 8002276:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800227e:	3b01      	subs	r3, #1
 8002280:	025b      	lsls	r3, r3, #9
 8002282:	b29b      	uxth	r3, r3
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800228a:	3b01      	subs	r3, #1
 800228c:	041b      	lsls	r3, r3, #16
 800228e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002298:	3b01      	subs	r3, #1
 800229a:	061b      	lsls	r3, r3, #24
 800229c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80022a0:	4923      	ldr	r1, [pc, #140]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80022a6:	4b22      	ldr	r3, [pc, #136]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80022a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022aa:	4a21      	ldr	r2, [pc, #132]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80022b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022b6:	4b21      	ldr	r3, [pc, #132]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022be:	00d2      	lsls	r2, r2, #3
 80022c0:	491b      	ldr	r1, [pc, #108]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80022c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ca:	f023 020c 	bic.w	r2, r3, #12
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	4917      	ldr	r1, [pc, #92]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80022d8:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80022da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022dc:	f023 0202 	bic.w	r2, r3, #2
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e4:	4912      	ldr	r1, [pc, #72]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022ea:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80022ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ee:	4a10      	ldr	r2, [pc, #64]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80022f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80022f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fa:	4a0d      	ldr	r2, [pc, #52]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 80022fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002300:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002302:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 8002304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002306:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 8002308:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800230c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800230e:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002312:	4a07      	ldr	r2, [pc, #28]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800231a:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a04      	ldr	r2, [pc, #16]	@ (8002330 <HAL_RCC_OscConfig+0x76c>)
 8002320:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002326:	f7fe fd3d 	bl	8000da4 <HAL_GetTick>
 800232a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800232c:	e011      	b.n	8002352 <HAL_RCC_OscConfig+0x78e>
 800232e:	bf00      	nop
 8002330:	58024400 	.word	0x58024400
 8002334:	58024800 	.word	0x58024800
 8002338:	fffffc0c 	.word	0xfffffc0c
 800233c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002340:	f7fe fd30 	bl	8000da4 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e08a      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002352:	4b47      	ldr	r3, [pc, #284]	@ (8002470 <HAL_RCC_OscConfig+0x8ac>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x77c>
 800235e:	e082      	b.n	8002466 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002360:	4b43      	ldr	r3, [pc, #268]	@ (8002470 <HAL_RCC_OscConfig+0x8ac>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a42      	ldr	r2, [pc, #264]	@ (8002470 <HAL_RCC_OscConfig+0x8ac>)
 8002366:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800236a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7fe fd1a 	bl	8000da4 <HAL_GetTick>
 8002370:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002374:	f7fe fd16 	bl	8000da4 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e070      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002386:	4b3a      	ldr	r3, [pc, #232]	@ (8002470 <HAL_RCC_OscConfig+0x8ac>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x7b0>
 8002392:	e068      	b.n	8002466 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002394:	4b36      	ldr	r3, [pc, #216]	@ (8002470 <HAL_RCC_OscConfig+0x8ac>)
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800239a:	4b35      	ldr	r3, [pc, #212]	@ (8002470 <HAL_RCC_OscConfig+0x8ac>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d031      	beq.n	800240c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	f003 0203 	and.w	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d12a      	bne.n	800240c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d122      	bne.n	800240c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d11a      	bne.n	800240c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	0a5b      	lsrs	r3, r3, #9
 80023da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d111      	bne.n	800240c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	0c1b      	lsrs	r3, r3, #16
 80023ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d108      	bne.n	800240c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	0e1b      	lsrs	r3, r3, #24
 80023fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002406:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e02b      	b.n	8002468 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002410:	4b17      	ldr	r3, [pc, #92]	@ (8002470 <HAL_RCC_OscConfig+0x8ac>)
 8002412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002414:	08db      	lsrs	r3, r3, #3
 8002416:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800241a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	429a      	cmp	r2, r3
 8002424:	d01f      	beq.n	8002466 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002426:	4b12      	ldr	r3, [pc, #72]	@ (8002470 <HAL_RCC_OscConfig+0x8ac>)
 8002428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242a:	4a11      	ldr	r2, [pc, #68]	@ (8002470 <HAL_RCC_OscConfig+0x8ac>)
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002432:	f7fe fcb7 	bl	8000da4 <HAL_GetTick>
 8002436:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002438:	bf00      	nop
 800243a:	f7fe fcb3 	bl	8000da4 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	4293      	cmp	r3, r2
 8002444:	d0f9      	beq.n	800243a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002446:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <HAL_RCC_OscConfig+0x8ac>)
 8002448:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800244a:	4b0a      	ldr	r3, [pc, #40]	@ (8002474 <HAL_RCC_OscConfig+0x8b0>)
 800244c:	4013      	ands	r3, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002452:	00d2      	lsls	r2, r2, #3
 8002454:	4906      	ldr	r1, [pc, #24]	@ (8002470 <HAL_RCC_OscConfig+0x8ac>)
 8002456:	4313      	orrs	r3, r2
 8002458:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800245a:	4b05      	ldr	r3, [pc, #20]	@ (8002470 <HAL_RCC_OscConfig+0x8ac>)
 800245c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245e:	4a04      	ldr	r2, [pc, #16]	@ (8002470 <HAL_RCC_OscConfig+0x8ac>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3730      	adds	r7, #48	@ 0x30
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	58024400 	.word	0x58024400
 8002474:	ffff0007 	.word	0xffff0007

08002478 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e19c      	b.n	80027c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800248c:	4b8a      	ldr	r3, [pc, #552]	@ (80026b8 <HAL_RCC_ClockConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d910      	bls.n	80024bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b87      	ldr	r3, [pc, #540]	@ (80026b8 <HAL_RCC_ClockConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 020f 	bic.w	r2, r3, #15
 80024a2:	4985      	ldr	r1, [pc, #532]	@ (80026b8 <HAL_RCC_ClockConfig+0x240>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b83      	ldr	r3, [pc, #524]	@ (80026b8 <HAL_RCC_ClockConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e184      	b.n	80027c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d010      	beq.n	80024ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	4b7b      	ldr	r3, [pc, #492]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d908      	bls.n	80024ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024d8:	4b78      	ldr	r3, [pc, #480]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	4975      	ldr	r1, [pc, #468]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d010      	beq.n	8002518 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	4b70      	ldr	r3, [pc, #448]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002502:	429a      	cmp	r2, r3
 8002504:	d908      	bls.n	8002518 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002506:	4b6d      	ldr	r3, [pc, #436]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	496a      	ldr	r1, [pc, #424]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 8002514:	4313      	orrs	r3, r2
 8002516:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	d010      	beq.n	8002546 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	4b64      	ldr	r3, [pc, #400]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002530:	429a      	cmp	r2, r3
 8002532:	d908      	bls.n	8002546 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002534:	4b61      	ldr	r3, [pc, #388]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	495e      	ldr	r1, [pc, #376]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 8002542:	4313      	orrs	r3, r2
 8002544:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	d010      	beq.n	8002574 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	4b59      	ldr	r3, [pc, #356]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800255e:	429a      	cmp	r2, r3
 8002560:	d908      	bls.n	8002574 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002562:	4b56      	ldr	r3, [pc, #344]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	4953      	ldr	r1, [pc, #332]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 8002570:	4313      	orrs	r3, r2
 8002572:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d010      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	4b4d      	ldr	r3, [pc, #308]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	429a      	cmp	r2, r3
 800258e:	d908      	bls.n	80025a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002590:	4b4a      	ldr	r3, [pc, #296]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f023 020f 	bic.w	r2, r3, #15
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4947      	ldr	r1, [pc, #284]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d055      	beq.n	800265a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80025ae:	4b43      	ldr	r3, [pc, #268]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	4940      	ldr	r1, [pc, #256]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d107      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025c8:	4b3c      	ldr	r3, [pc, #240]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d121      	bne.n	8002618 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0f6      	b.n	80027c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025e0:	4b36      	ldr	r3, [pc, #216]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d115      	bne.n	8002618 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0ea      	b.n	80027c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025f8:	4b30      	ldr	r3, [pc, #192]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d109      	bne.n	8002618 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0de      	b.n	80027c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002608:	4b2c      	ldr	r3, [pc, #176]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0d6      	b.n	80027c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002618:	4b28      	ldr	r3, [pc, #160]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f023 0207 	bic.w	r2, r3, #7
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4925      	ldr	r1, [pc, #148]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 8002626:	4313      	orrs	r3, r2
 8002628:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800262a:	f7fe fbbb 	bl	8000da4 <HAL_GetTick>
 800262e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002630:	e00a      	b.n	8002648 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002632:	f7fe fbb7 	bl	8000da4 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e0be      	b.n	80027c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002648:	4b1c      	ldr	r3, [pc, #112]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	429a      	cmp	r2, r3
 8002658:	d1eb      	bne.n	8002632 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d010      	beq.n	8002688 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	429a      	cmp	r2, r3
 8002674:	d208      	bcs.n	8002688 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002676:	4b11      	ldr	r3, [pc, #68]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f023 020f 	bic.w	r2, r3, #15
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	490e      	ldr	r1, [pc, #56]	@ (80026bc <HAL_RCC_ClockConfig+0x244>)
 8002684:	4313      	orrs	r3, r2
 8002686:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002688:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <HAL_RCC_ClockConfig+0x240>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d214      	bcs.n	80026c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <HAL_RCC_ClockConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 020f 	bic.w	r2, r3, #15
 800269e:	4906      	ldr	r1, [pc, #24]	@ (80026b8 <HAL_RCC_ClockConfig+0x240>)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b04      	ldr	r3, [pc, #16]	@ (80026b8 <HAL_RCC_ClockConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e086      	b.n	80027c6 <HAL_RCC_ClockConfig+0x34e>
 80026b8:	52002000 	.word	0x52002000
 80026bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d010      	beq.n	80026ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	4b3f      	ldr	r3, [pc, #252]	@ (80027d0 <HAL_RCC_ClockConfig+0x358>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026d8:	429a      	cmp	r2, r3
 80026da:	d208      	bcs.n	80026ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026dc:	4b3c      	ldr	r3, [pc, #240]	@ (80027d0 <HAL_RCC_ClockConfig+0x358>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	4939      	ldr	r1, [pc, #228]	@ (80027d0 <HAL_RCC_ClockConfig+0x358>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d010      	beq.n	800271c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	4b34      	ldr	r3, [pc, #208]	@ (80027d0 <HAL_RCC_ClockConfig+0x358>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002706:	429a      	cmp	r2, r3
 8002708:	d208      	bcs.n	800271c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800270a:	4b31      	ldr	r3, [pc, #196]	@ (80027d0 <HAL_RCC_ClockConfig+0x358>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	492e      	ldr	r1, [pc, #184]	@ (80027d0 <HAL_RCC_ClockConfig+0x358>)
 8002718:	4313      	orrs	r3, r2
 800271a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	d010      	beq.n	800274a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699a      	ldr	r2, [r3, #24]
 800272c:	4b28      	ldr	r3, [pc, #160]	@ (80027d0 <HAL_RCC_ClockConfig+0x358>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002734:	429a      	cmp	r2, r3
 8002736:	d208      	bcs.n	800274a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002738:	4b25      	ldr	r3, [pc, #148]	@ (80027d0 <HAL_RCC_ClockConfig+0x358>)
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	4922      	ldr	r1, [pc, #136]	@ (80027d0 <HAL_RCC_ClockConfig+0x358>)
 8002746:	4313      	orrs	r3, r2
 8002748:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b00      	cmp	r3, #0
 8002754:	d010      	beq.n	8002778 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	4b1d      	ldr	r3, [pc, #116]	@ (80027d0 <HAL_RCC_ClockConfig+0x358>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002762:	429a      	cmp	r2, r3
 8002764:	d208      	bcs.n	8002778 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002766:	4b1a      	ldr	r3, [pc, #104]	@ (80027d0 <HAL_RCC_ClockConfig+0x358>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	4917      	ldr	r1, [pc, #92]	@ (80027d0 <HAL_RCC_ClockConfig+0x358>)
 8002774:	4313      	orrs	r3, r2
 8002776:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002778:	f000 f834 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 800277c:	4602      	mov	r2, r0
 800277e:	4b14      	ldr	r3, [pc, #80]	@ (80027d0 <HAL_RCC_ClockConfig+0x358>)
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	4912      	ldr	r1, [pc, #72]	@ (80027d4 <HAL_RCC_ClockConfig+0x35c>)
 800278a:	5ccb      	ldrb	r3, [r1, r3]
 800278c:	f003 031f 	and.w	r3, r3, #31
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
 8002794:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002796:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <HAL_RCC_ClockConfig+0x358>)
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	4a0d      	ldr	r2, [pc, #52]	@ (80027d4 <HAL_RCC_ClockConfig+0x35c>)
 80027a0:	5cd3      	ldrb	r3, [r2, r3]
 80027a2:	f003 031f 	and.w	r3, r3, #31
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ac:	4a0a      	ldr	r2, [pc, #40]	@ (80027d8 <HAL_RCC_ClockConfig+0x360>)
 80027ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027b0:	4a0a      	ldr	r2, [pc, #40]	@ (80027dc <HAL_RCC_ClockConfig+0x364>)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80027b6:	4b0a      	ldr	r3, [pc, #40]	@ (80027e0 <HAL_RCC_ClockConfig+0x368>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe faa8 	bl	8000d10 <HAL_InitTick>
 80027c0:	4603      	mov	r3, r0
 80027c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	58024400 	.word	0x58024400
 80027d4:	08006928 	.word	0x08006928
 80027d8:	24000004 	.word	0x24000004
 80027dc:	24000000 	.word	0x24000000
 80027e0:	24000034 	.word	0x24000034

080027e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	@ 0x24
 80027e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ea:	4bb3      	ldr	r3, [pc, #716]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027f2:	2b18      	cmp	r3, #24
 80027f4:	f200 8155 	bhi.w	8002aa2 <HAL_RCC_GetSysClockFreq+0x2be>
 80027f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002800 <HAL_RCC_GetSysClockFreq+0x1c>)
 80027fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fe:	bf00      	nop
 8002800:	08002865 	.word	0x08002865
 8002804:	08002aa3 	.word	0x08002aa3
 8002808:	08002aa3 	.word	0x08002aa3
 800280c:	08002aa3 	.word	0x08002aa3
 8002810:	08002aa3 	.word	0x08002aa3
 8002814:	08002aa3 	.word	0x08002aa3
 8002818:	08002aa3 	.word	0x08002aa3
 800281c:	08002aa3 	.word	0x08002aa3
 8002820:	0800288b 	.word	0x0800288b
 8002824:	08002aa3 	.word	0x08002aa3
 8002828:	08002aa3 	.word	0x08002aa3
 800282c:	08002aa3 	.word	0x08002aa3
 8002830:	08002aa3 	.word	0x08002aa3
 8002834:	08002aa3 	.word	0x08002aa3
 8002838:	08002aa3 	.word	0x08002aa3
 800283c:	08002aa3 	.word	0x08002aa3
 8002840:	08002891 	.word	0x08002891
 8002844:	08002aa3 	.word	0x08002aa3
 8002848:	08002aa3 	.word	0x08002aa3
 800284c:	08002aa3 	.word	0x08002aa3
 8002850:	08002aa3 	.word	0x08002aa3
 8002854:	08002aa3 	.word	0x08002aa3
 8002858:	08002aa3 	.word	0x08002aa3
 800285c:	08002aa3 	.word	0x08002aa3
 8002860:	08002897 	.word	0x08002897
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002864:	4b94      	ldr	r3, [pc, #592]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	d009      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002870:	4b91      	ldr	r3, [pc, #580]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	08db      	lsrs	r3, r3, #3
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	4a90      	ldr	r2, [pc, #576]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
 8002880:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002882:	e111      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002884:	4b8d      	ldr	r3, [pc, #564]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002886:	61bb      	str	r3, [r7, #24]
      break;
 8002888:	e10e      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800288a:	4b8d      	ldr	r3, [pc, #564]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800288c:	61bb      	str	r3, [r7, #24]
      break;
 800288e:	e10b      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002890:	4b8c      	ldr	r3, [pc, #560]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002892:	61bb      	str	r3, [r7, #24]
      break;
 8002894:	e108      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002896:	4b88      	ldr	r3, [pc, #544]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80028a0:	4b85      	ldr	r3, [pc, #532]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80028ac:	4b82      	ldr	r3, [pc, #520]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80028b6:	4b80      	ldr	r3, [pc, #512]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ba:	08db      	lsrs	r3, r3, #3
 80028bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	fb02 f303 	mul.w	r3, r2, r3
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80e1 	beq.w	8002a9c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	f000 8083 	beq.w	80029e8 <HAL_RCC_GetSysClockFreq+0x204>
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	f200 80a1 	bhi.w	8002a2c <HAL_RCC_GetSysClockFreq+0x248>
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0x114>
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d056      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80028f6:	e099      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028f8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d02d      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002904:	4b6c      	ldr	r3, [pc, #432]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	08db      	lsrs	r3, r3, #3
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	4a6b      	ldr	r2, [pc, #428]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
 8002914:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	ee07 3a90 	vmov	s15, r3
 800291c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	ee07 3a90 	vmov	s15, r3
 8002926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800292a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800292e:	4b62      	ldr	r3, [pc, #392]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002936:	ee07 3a90 	vmov	s15, r3
 800293a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800293e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002942:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002ac8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800294a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800294e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800295a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800295e:	e087      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800296a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002acc <HAL_RCC_GetSysClockFreq+0x2e8>
 800296e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002972:	4b51      	ldr	r3, [pc, #324]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002982:	ed97 6a02 	vldr	s12, [r7, #8]
 8002986:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002ac8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800298a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800298e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800299a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029a2:	e065      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	ee07 3a90 	vmov	s15, r3
 80029aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002ad0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029b6:	4b40      	ldr	r3, [pc, #256]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029be:	ee07 3a90 	vmov	s15, r3
 80029c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80029ca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002ac8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029e6:	e043      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002ad4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80029f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029fa:	4b2f      	ldr	r3, [pc, #188]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a0e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002ac8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a2a:	e021      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a36:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002ad0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a52:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002ac8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a6e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a70:	4b11      	ldr	r3, [pc, #68]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a74:	0a5b      	lsrs	r3, r3, #9
 8002a76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	ee07 3a90 	vmov	s15, r3
 8002a84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a88:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a94:	ee17 3a90 	vmov	r3, s15
 8002a98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002a9a:	e005      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61bb      	str	r3, [r7, #24]
      break;
 8002aa0:	e002      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002aa2:	4b07      	ldr	r3, [pc, #28]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002aa4:	61bb      	str	r3, [r7, #24]
      break;
 8002aa6:	bf00      	nop
  }

  return sysclockfreq;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3724      	adds	r7, #36	@ 0x24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	58024400 	.word	0x58024400
 8002abc:	03d09000 	.word	0x03d09000
 8002ac0:	003d0900 	.word	0x003d0900
 8002ac4:	017d7840 	.word	0x017d7840
 8002ac8:	46000000 	.word	0x46000000
 8002acc:	4c742400 	.word	0x4c742400
 8002ad0:	4a742400 	.word	0x4a742400
 8002ad4:	4bbebc20 	.word	0x4bbebc20

08002ad8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002adc:	b0ca      	sub	sp, #296	@ 0x128
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002aea:	2300      	movs	r3, #0
 8002aec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002afc:	2500      	movs	r5, #0
 8002afe:	ea54 0305 	orrs.w	r3, r4, r5
 8002b02:	d049      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b0e:	d02f      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002b10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b14:	d828      	bhi.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b1a:	d01a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b20:	d822      	bhi.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b2a:	d007      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b2c:	e01c      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b2e:	4bb8      	ldr	r3, [pc, #736]	@ (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b32:	4ab7      	ldr	r2, [pc, #732]	@ (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b3a:	e01a      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b40:	3308      	adds	r3, #8
 8002b42:	2102      	movs	r1, #2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f001 f9d1 	bl	8003eec <RCCEx_PLL2_Config>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b50:	e00f      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b56:	3328      	adds	r3, #40	@ 0x28
 8002b58:	2102      	movs	r1, #2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f001 fa78 	bl	8004050 <RCCEx_PLL3_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b66:	e004      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b6e:	e000      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10a      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b7a:	4ba5      	ldr	r3, [pc, #660]	@ (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b88:	4aa1      	ldr	r2, [pc, #644]	@ (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b8e:	e003      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002ba4:	f04f 0900 	mov.w	r9, #0
 8002ba8:	ea58 0309 	orrs.w	r3, r8, r9
 8002bac:	d047      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d82a      	bhi.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbe:	bf00      	nop
 8002bc0:	08002bd5 	.word	0x08002bd5
 8002bc4:	08002be3 	.word	0x08002be3
 8002bc8:	08002bf9 	.word	0x08002bf9
 8002bcc:	08002c17 	.word	0x08002c17
 8002bd0:	08002c17 	.word	0x08002c17
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bd4:	4b8e      	ldr	r3, [pc, #568]	@ (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd8:	4a8d      	ldr	r2, [pc, #564]	@ (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002be0:	e01a      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be6:	3308      	adds	r3, #8
 8002be8:	2100      	movs	r1, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	f001 f97e 	bl	8003eec <RCCEx_PLL2_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bf6:	e00f      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bfc:	3328      	adds	r3, #40	@ 0x28
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f001 fa25 	bl	8004050 <RCCEx_PLL3_Config>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c0c:	e004      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c14:	e000      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10a      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c20:	4b7b      	ldr	r3, [pc, #492]	@ (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c24:	f023 0107 	bic.w	r1, r3, #7
 8002c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2e:	4a78      	ldr	r2, [pc, #480]	@ (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c30:	430b      	orrs	r3, r1
 8002c32:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c34:	e003      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002c4a:	f04f 0b00 	mov.w	fp, #0
 8002c4e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002c52:	d04c      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c5e:	d030      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c64:	d829      	bhi.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c66:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c68:	d02d      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002c6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c6c:	d825      	bhi.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c6e:	2b80      	cmp	r3, #128	@ 0x80
 8002c70:	d018      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002c72:	2b80      	cmp	r3, #128	@ 0x80
 8002c74:	d821      	bhi.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002c7a:	2b40      	cmp	r3, #64	@ 0x40
 8002c7c:	d007      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002c7e:	e01c      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c80:	4b63      	ldr	r3, [pc, #396]	@ (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c84:	4a62      	ldr	r2, [pc, #392]	@ (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c8c:	e01c      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c92:	3308      	adds	r3, #8
 8002c94:	2100      	movs	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f001 f928 	bl	8003eec <RCCEx_PLL2_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ca2:	e011      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca8:	3328      	adds	r3, #40	@ 0x28
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f001 f9cf 	bl	8004050 <RCCEx_PLL3_Config>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002cb8:	e006      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cc0:	e002      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002cc2:	bf00      	nop
 8002cc4:	e000      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002cd0:	4b4f      	ldr	r3, [pc, #316]	@ (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cde:	4a4c      	ldr	r2, [pc, #304]	@ (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ce4:	e003      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002cfa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002d04:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	d053      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d1a:	d035      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002d1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d20:	d82e      	bhi.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d22:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d26:	d031      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002d28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d2c:	d828      	bhi.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d32:	d01a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002d34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d38:	d822      	bhi.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002d3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d42:	d007      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002d44:	e01c      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d46:	4b32      	ldr	r3, [pc, #200]	@ (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4a:	4a31      	ldr	r2, [pc, #196]	@ (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d52:	e01c      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d58:	3308      	adds	r3, #8
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f001 f8c5 	bl	8003eec <RCCEx_PLL2_Config>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d68:	e011      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d6e:	3328      	adds	r3, #40	@ 0x28
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 f96c 	bl	8004050 <RCCEx_PLL3_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d7e:	e006      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d86:	e002      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d88:	bf00      	nop
 8002d8a:	e000      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10b      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002d96:	4b1e      	ldr	r3, [pc, #120]	@ (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002da6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dac:	e003      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002db2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002dc2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002dcc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	d056      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002dde:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002de2:	d038      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002de4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002de8:	d831      	bhi.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002dea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002dee:	d034      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002df0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002df4:	d82b      	bhi.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002df6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002dfa:	d01d      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002dfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e00:	d825      	bhi.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d006      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002e06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002e0c:	e01f      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e0e:	bf00      	nop
 8002e10:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e14:	4ba2      	ldr	r3, [pc, #648]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e18:	4aa1      	ldr	r2, [pc, #644]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e20:	e01c      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e26:	3308      	adds	r3, #8
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f001 f85e 	bl	8003eec <RCCEx_PLL2_Config>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e36:	e011      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3c:	3328      	adds	r3, #40	@ 0x28
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f001 f905 	bl	8004050 <RCCEx_PLL3_Config>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e4c:	e006      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e54:	e002      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e56:	bf00      	nop
 8002e58:	e000      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10b      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002e64:	4b8e      	ldr	r3, [pc, #568]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e68:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002e74:	4a8a      	ldr	r2, [pc, #552]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e76:	430b      	orrs	r3, r1
 8002e78:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e7a:	e003      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002e90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002e94:	2300      	movs	r3, #0
 8002e96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002e9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	d03a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eaa:	2b30      	cmp	r3, #48	@ 0x30
 8002eac:	d01f      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002eae:	2b30      	cmp	r3, #48	@ 0x30
 8002eb0:	d819      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d00c      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d815      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d019      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002ebe:	2b10      	cmp	r3, #16
 8002ec0:	d111      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec2:	4b77      	ldr	r3, [pc, #476]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec6:	4a76      	ldr	r2, [pc, #472]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002ece:	e011      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	2102      	movs	r1, #2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f001 f807 	bl	8003eec <RCCEx_PLL2_Config>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002ee4:	e006      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002eec:	e002      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002eee:	bf00      	nop
 8002ef0:	e000      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10a      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002efc:	4b68      	ldr	r3, [pc, #416]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f00:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0a:	4a65      	ldr	r2, [pc, #404]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f10:	e003      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f22:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002f26:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002f30:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4313      	orrs	r3, r2
 8002f38:	d051      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f44:	d035      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002f46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f4a:	d82e      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f50:	d031      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002f52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f56:	d828      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f5c:	d01a      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f62:	d822      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002f68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f6c:	d007      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002f6e:	e01c      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f70:	4b4b      	ldr	r3, [pc, #300]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f74:	4a4a      	ldr	r2, [pc, #296]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f7c:	e01c      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f82:	3308      	adds	r3, #8
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 ffb0 	bl	8003eec <RCCEx_PLL2_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f92:	e011      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f98:	3328      	adds	r3, #40	@ 0x28
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 f857 	bl	8004050 <RCCEx_PLL3_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fa8:	e006      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fb0:	e002      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002fb2:	bf00      	nop
 8002fb4:	e000      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10a      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002fc0:	4b37      	ldr	r3, [pc, #220]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fc4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fce:	4a34      	ldr	r2, [pc, #208]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fd4:	e003      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002fea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002ff4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	d056      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003002:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003008:	d033      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800300a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800300e:	d82c      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003010:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003014:	d02f      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003016:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800301a:	d826      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800301c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003020:	d02b      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003022:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003026:	d820      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003028:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800302c:	d012      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800302e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003032:	d81a      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d022      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800303c:	d115      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800303e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003042:	3308      	adds	r3, #8
 8003044:	2101      	movs	r1, #1
 8003046:	4618      	mov	r0, r3
 8003048:	f000 ff50 	bl	8003eec <RCCEx_PLL2_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003052:	e015      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003058:	3328      	adds	r3, #40	@ 0x28
 800305a:	2101      	movs	r1, #1
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fff7 	bl	8004050 <RCCEx_PLL3_Config>
 8003062:	4603      	mov	r3, r0
 8003064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003068:	e00a      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003070:	e006      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003072:	bf00      	nop
 8003074:	e004      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003076:	bf00      	nop
 8003078:	e002      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800307a:	bf00      	nop
 800307c:	e000      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800307e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10d      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003088:	4b05      	ldr	r3, [pc, #20]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800308a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800308c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003096:	4a02      	ldr	r2, [pc, #8]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003098:	430b      	orrs	r3, r1
 800309a:	6513      	str	r3, [r2, #80]	@ 0x50
 800309c:	e006      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800309e:	bf00      	nop
 80030a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80030ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80030b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030c2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4313      	orrs	r3, r2
 80030ca:	d055      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80030cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80030d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030d8:	d033      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80030da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030de:	d82c      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030e4:	d02f      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ea:	d826      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80030f0:	d02b      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80030f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80030f6:	d820      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030fc:	d012      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80030fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003102:	d81a      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003104:	2b00      	cmp	r3, #0
 8003106:	d022      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003108:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800310c:	d115      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800310e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003112:	3308      	adds	r3, #8
 8003114:	2101      	movs	r1, #1
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fee8 	bl	8003eec <RCCEx_PLL2_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003122:	e015      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003128:	3328      	adds	r3, #40	@ 0x28
 800312a:	2101      	movs	r1, #1
 800312c:	4618      	mov	r0, r3
 800312e:	f000 ff8f 	bl	8004050 <RCCEx_PLL3_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003138:	e00a      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003140:	e006      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003142:	bf00      	nop
 8003144:	e004      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003146:	bf00      	nop
 8003148:	e002      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800314e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10b      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003158:	4ba3      	ldr	r3, [pc, #652]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003164:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003168:	4a9f      	ldr	r2, [pc, #636]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800316a:	430b      	orrs	r3, r1
 800316c:	6593      	str	r3, [r2, #88]	@ 0x58
 800316e:	e003      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003174:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003184:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003188:	2300      	movs	r3, #0
 800318a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800318e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003192:	460b      	mov	r3, r1
 8003194:	4313      	orrs	r3, r2
 8003196:	d037      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800319c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031a2:	d00e      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80031a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031a8:	d816      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d018      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80031ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031b2:	d111      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031b4:	4b8c      	ldr	r3, [pc, #560]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b8:	4a8b      	ldr	r2, [pc, #556]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031c0:	e00f      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c6:	3308      	adds	r3, #8
 80031c8:	2101      	movs	r1, #1
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fe8e 	bl	8003eec <RCCEx_PLL2_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031d6:	e004      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031de:	e000      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80031e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031ea:	4b7f      	ldr	r3, [pc, #508]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80031f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f8:	4a7b      	ldr	r2, [pc, #492]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031fa:	430b      	orrs	r3, r1
 80031fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80031fe:	e003      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003200:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003204:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003214:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003218:	2300      	movs	r3, #0
 800321a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800321e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003222:	460b      	mov	r3, r1
 8003224:	4313      	orrs	r3, r2
 8003226:	d039      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800322c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800322e:	2b03      	cmp	r3, #3
 8003230:	d81c      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003232:	a201      	add	r2, pc, #4	@ (adr r2, 8003238 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	08003275 	.word	0x08003275
 800323c:	08003249 	.word	0x08003249
 8003240:	08003257 	.word	0x08003257
 8003244:	08003275 	.word	0x08003275
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003248:	4b67      	ldr	r3, [pc, #412]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800324a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324c:	4a66      	ldr	r2, [pc, #408]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800324e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003254:	e00f      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800325a:	3308      	adds	r3, #8
 800325c:	2102      	movs	r1, #2
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fe44 	bl	8003eec <RCCEx_PLL2_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800326a:	e004      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003272:	e000      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10a      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800327e:	4b5a      	ldr	r3, [pc, #360]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003282:	f023 0103 	bic.w	r1, r3, #3
 8003286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800328a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800328c:	4a56      	ldr	r2, [pc, #344]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800328e:	430b      	orrs	r3, r1
 8003290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003292:	e003      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003298:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800329c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80032a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032ac:	2300      	movs	r3, #0
 80032ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80032b6:	460b      	mov	r3, r1
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f000 809f 	beq.w	80033fc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032be:	4b4b      	ldr	r3, [pc, #300]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a4a      	ldr	r2, [pc, #296]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032ca:	f7fd fd6b 	bl	8000da4 <HAL_GetTick>
 80032ce:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032d2:	e00b      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d4:	f7fd fd66 	bl	8000da4 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b64      	cmp	r3, #100	@ 0x64
 80032e2:	d903      	bls.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032ea:	e005      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032ec:	4b3f      	ldr	r3, [pc, #252]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ed      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80032f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d179      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003300:	4b39      	ldr	r3, [pc, #228]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003302:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003308:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800330c:	4053      	eors	r3, r2
 800330e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003312:	2b00      	cmp	r3, #0
 8003314:	d015      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003316:	4b34      	ldr	r3, [pc, #208]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800331e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003322:	4b31      	ldr	r3, [pc, #196]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003326:	4a30      	ldr	r2, [pc, #192]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800332c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800332e:	4b2e      	ldr	r3, [pc, #184]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003332:	4a2d      	ldr	r2, [pc, #180]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003338:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800333a:	4a2b      	ldr	r2, [pc, #172]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800333c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003340:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003346:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800334a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800334e:	d118      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fd fd28 	bl	8000da4 <HAL_GetTick>
 8003354:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003358:	e00d      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335a:	f7fd fd23 	bl	8000da4 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003364:	1ad2      	subs	r2, r2, r3
 8003366:	f241 3388 	movw	r3, #5000	@ 0x1388
 800336a:	429a      	cmp	r2, r3
 800336c:	d903      	bls.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003374:	e005      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003376:	4b1c      	ldr	r3, [pc, #112]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0eb      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003386:	2b00      	cmp	r3, #0
 8003388:	d129      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800338a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003396:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800339a:	d10e      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800339c:	4b12      	ldr	r3, [pc, #72]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80033a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033ac:	091a      	lsrs	r2, r3, #4
 80033ae:	4b10      	ldr	r3, [pc, #64]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	4a0d      	ldr	r2, [pc, #52]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033b4:	430b      	orrs	r3, r1
 80033b6:	6113      	str	r3, [r2, #16]
 80033b8:	e005      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80033ba:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	4a0a      	ldr	r2, [pc, #40]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033c4:	6113      	str	r3, [r2, #16]
 80033c6:	4b08      	ldr	r3, [pc, #32]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033c8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80033ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d6:	4a04      	ldr	r2, [pc, #16]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033d8:	430b      	orrs	r3, r1
 80033da:	6713      	str	r3, [r2, #112]	@ 0x70
 80033dc:	e00e      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80033e6:	e009      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80033e8:	58024400 	.word	0x58024400
 80033ec:	58024800 	.word	0x58024800
 80033f0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80033fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	f002 0301 	and.w	r3, r2, #1
 8003408:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800340c:	2300      	movs	r3, #0
 800340e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003412:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003416:	460b      	mov	r3, r1
 8003418:	4313      	orrs	r3, r2
 800341a:	f000 8089 	beq.w	8003530 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800341e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003422:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003424:	2b28      	cmp	r3, #40	@ 0x28
 8003426:	d86b      	bhi.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003428:	a201      	add	r2, pc, #4	@ (adr r2, 8003430 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342e:	bf00      	nop
 8003430:	08003509 	.word	0x08003509
 8003434:	08003501 	.word	0x08003501
 8003438:	08003501 	.word	0x08003501
 800343c:	08003501 	.word	0x08003501
 8003440:	08003501 	.word	0x08003501
 8003444:	08003501 	.word	0x08003501
 8003448:	08003501 	.word	0x08003501
 800344c:	08003501 	.word	0x08003501
 8003450:	080034d5 	.word	0x080034d5
 8003454:	08003501 	.word	0x08003501
 8003458:	08003501 	.word	0x08003501
 800345c:	08003501 	.word	0x08003501
 8003460:	08003501 	.word	0x08003501
 8003464:	08003501 	.word	0x08003501
 8003468:	08003501 	.word	0x08003501
 800346c:	08003501 	.word	0x08003501
 8003470:	080034eb 	.word	0x080034eb
 8003474:	08003501 	.word	0x08003501
 8003478:	08003501 	.word	0x08003501
 800347c:	08003501 	.word	0x08003501
 8003480:	08003501 	.word	0x08003501
 8003484:	08003501 	.word	0x08003501
 8003488:	08003501 	.word	0x08003501
 800348c:	08003501 	.word	0x08003501
 8003490:	08003509 	.word	0x08003509
 8003494:	08003501 	.word	0x08003501
 8003498:	08003501 	.word	0x08003501
 800349c:	08003501 	.word	0x08003501
 80034a0:	08003501 	.word	0x08003501
 80034a4:	08003501 	.word	0x08003501
 80034a8:	08003501 	.word	0x08003501
 80034ac:	08003501 	.word	0x08003501
 80034b0:	08003509 	.word	0x08003509
 80034b4:	08003501 	.word	0x08003501
 80034b8:	08003501 	.word	0x08003501
 80034bc:	08003501 	.word	0x08003501
 80034c0:	08003501 	.word	0x08003501
 80034c4:	08003501 	.word	0x08003501
 80034c8:	08003501 	.word	0x08003501
 80034cc:	08003501 	.word	0x08003501
 80034d0:	08003509 	.word	0x08003509
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d8:	3308      	adds	r3, #8
 80034da:	2101      	movs	r1, #1
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fd05 	bl	8003eec <RCCEx_PLL2_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80034e8:	e00f      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ee:	3328      	adds	r3, #40	@ 0x28
 80034f0:	2101      	movs	r1, #1
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fdac 	bl	8004050 <RCCEx_PLL3_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80034fe:	e004      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003506:	e000      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800350a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10a      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003512:	4bbf      	ldr	r3, [pc, #764]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003516:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800351a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003520:	4abb      	ldr	r2, [pc, #748]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003522:	430b      	orrs	r3, r1
 8003524:	6553      	str	r3, [r2, #84]	@ 0x54
 8003526:	e003      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800352c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f002 0302 	and.w	r3, r2, #2
 800353c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003540:	2300      	movs	r3, #0
 8003542:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003546:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800354a:	460b      	mov	r3, r1
 800354c:	4313      	orrs	r3, r2
 800354e:	d041      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003554:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003556:	2b05      	cmp	r3, #5
 8003558:	d824      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800355a:	a201      	add	r2, pc, #4	@ (adr r2, 8003560 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003560:	080035ad 	.word	0x080035ad
 8003564:	08003579 	.word	0x08003579
 8003568:	0800358f 	.word	0x0800358f
 800356c:	080035ad 	.word	0x080035ad
 8003570:	080035ad 	.word	0x080035ad
 8003574:	080035ad 	.word	0x080035ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800357c:	3308      	adds	r3, #8
 800357e:	2101      	movs	r1, #1
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fcb3 	bl	8003eec <RCCEx_PLL2_Config>
 8003586:	4603      	mov	r3, r0
 8003588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800358c:	e00f      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800358e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003592:	3328      	adds	r3, #40	@ 0x28
 8003594:	2101      	movs	r1, #1
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fd5a 	bl	8004050 <RCCEx_PLL3_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80035a2:	e004      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035aa:	e000      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80035ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10a      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80035b6:	4b96      	ldr	r3, [pc, #600]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ba:	f023 0107 	bic.w	r1, r3, #7
 80035be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035c4:	4a92      	ldr	r2, [pc, #584]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035c6:	430b      	orrs	r3, r1
 80035c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80035ca:	e003      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	f002 0304 	and.w	r3, r2, #4
 80035e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035e4:	2300      	movs	r3, #0
 80035e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4313      	orrs	r3, r2
 80035f2:	d044      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80035f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035fc:	2b05      	cmp	r3, #5
 80035fe:	d825      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003600:	a201      	add	r2, pc, #4	@ (adr r2, 8003608 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003606:	bf00      	nop
 8003608:	08003655 	.word	0x08003655
 800360c:	08003621 	.word	0x08003621
 8003610:	08003637 	.word	0x08003637
 8003614:	08003655 	.word	0x08003655
 8003618:	08003655 	.word	0x08003655
 800361c:	08003655 	.word	0x08003655
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003624:	3308      	adds	r3, #8
 8003626:	2101      	movs	r1, #1
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fc5f 	bl	8003eec <RCCEx_PLL2_Config>
 800362e:	4603      	mov	r3, r0
 8003630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003634:	e00f      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363a:	3328      	adds	r3, #40	@ 0x28
 800363c:	2101      	movs	r1, #1
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fd06 	bl	8004050 <RCCEx_PLL3_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800364a:	e004      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003652:	e000      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10b      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800365e:	4b6c      	ldr	r3, [pc, #432]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003662:	f023 0107 	bic.w	r1, r3, #7
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800366e:	4a68      	ldr	r2, [pc, #416]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003670:	430b      	orrs	r3, r1
 8003672:	6593      	str	r3, [r2, #88]	@ 0x58
 8003674:	e003      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800367a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800367e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	f002 0320 	and.w	r3, r2, #32
 800368a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800368e:	2300      	movs	r3, #0
 8003690:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003694:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003698:	460b      	mov	r3, r1
 800369a:	4313      	orrs	r3, r2
 800369c:	d055      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800369e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036aa:	d033      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80036ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036b0:	d82c      	bhi.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b6:	d02f      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036bc:	d826      	bhi.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036c2:	d02b      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80036c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036c8:	d820      	bhi.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036ce:	d012      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80036d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036d4:	d81a      	bhi.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d022      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80036da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036de:	d115      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e4:	3308      	adds	r3, #8
 80036e6:	2100      	movs	r1, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fbff 	bl	8003eec <RCCEx_PLL2_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80036f4:	e015      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fa:	3328      	adds	r3, #40	@ 0x28
 80036fc:	2102      	movs	r1, #2
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fca6 	bl	8004050 <RCCEx_PLL3_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800370a:	e00a      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003712:	e006      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003714:	bf00      	nop
 8003716:	e004      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003718:	bf00      	nop
 800371a:	e002      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800371c:	bf00      	nop
 800371e:	e000      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10b      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800372a:	4b39      	ldr	r3, [pc, #228]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800372c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373a:	4a35      	ldr	r2, [pc, #212]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800373c:	430b      	orrs	r3, r1
 800373e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003740:	e003      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003746:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800374a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003756:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800375a:	2300      	movs	r3, #0
 800375c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003760:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003764:	460b      	mov	r3, r1
 8003766:	4313      	orrs	r3, r2
 8003768:	d058      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800376a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003772:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003776:	d033      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003778:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800377c:	d82c      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800377e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003782:	d02f      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003788:	d826      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800378a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800378e:	d02b      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003790:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003794:	d820      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003796:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800379a:	d012      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800379c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037a0:	d81a      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d022      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037aa:	d115      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b0:	3308      	adds	r3, #8
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fb99 	bl	8003eec <RCCEx_PLL2_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037c0:	e015      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c6:	3328      	adds	r3, #40	@ 0x28
 80037c8:	2102      	movs	r1, #2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fc40 	bl	8004050 <RCCEx_PLL3_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037d6:	e00a      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037de:	e006      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037e0:	bf00      	nop
 80037e2:	e004      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037e4:	bf00      	nop
 80037e6:	e002      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037e8:	bf00      	nop
 80037ea:	e000      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10e      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037f6:	4b06      	ldr	r3, [pc, #24]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80037fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003802:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003806:	4a02      	ldr	r2, [pc, #8]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003808:	430b      	orrs	r3, r1
 800380a:	6593      	str	r3, [r2, #88]	@ 0x58
 800380c:	e006      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800380e:	bf00      	nop
 8003810:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003818:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800382c:	2300      	movs	r3, #0
 800382e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003832:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003836:	460b      	mov	r3, r1
 8003838:	4313      	orrs	r3, r2
 800383a:	d055      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800383c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003840:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003844:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003848:	d033      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800384a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800384e:	d82c      	bhi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003854:	d02f      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003856:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800385a:	d826      	bhi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800385c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003860:	d02b      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003862:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003866:	d820      	bhi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003868:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800386c:	d012      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800386e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003872:	d81a      	bhi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d022      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800387c:	d115      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800387e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003882:	3308      	adds	r3, #8
 8003884:	2100      	movs	r1, #0
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fb30 	bl	8003eec <RCCEx_PLL2_Config>
 800388c:	4603      	mov	r3, r0
 800388e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003892:	e015      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003898:	3328      	adds	r3, #40	@ 0x28
 800389a:	2102      	movs	r1, #2
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fbd7 	bl	8004050 <RCCEx_PLL3_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80038a8:	e00a      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038b0:	e006      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038b2:	bf00      	nop
 80038b4:	e004      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038b6:	bf00      	nop
 80038b8:	e002      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038ba:	bf00      	nop
 80038bc:	e000      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10b      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80038c8:	4ba1      	ldr	r3, [pc, #644]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038cc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80038d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038d8:	4a9d      	ldr	r2, [pc, #628]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038da:	430b      	orrs	r3, r1
 80038dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80038de:	e003      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f002 0308 	and.w	r3, r2, #8
 80038f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80038f8:	2300      	movs	r3, #0
 80038fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003902:	460b      	mov	r3, r1
 8003904:	4313      	orrs	r3, r2
 8003906:	d01e      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003914:	d10c      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391a:	3328      	adds	r3, #40	@ 0x28
 800391c:	2102      	movs	r1, #2
 800391e:	4618      	mov	r0, r3
 8003920:	f000 fb96 	bl	8004050 <RCCEx_PLL3_Config>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003930:	4b87      	ldr	r3, [pc, #540]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003934:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003940:	4a83      	ldr	r2, [pc, #524]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003942:	430b      	orrs	r3, r1
 8003944:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	f002 0310 	and.w	r3, r2, #16
 8003952:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003956:	2300      	movs	r3, #0
 8003958:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800395c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003960:	460b      	mov	r3, r1
 8003962:	4313      	orrs	r3, r2
 8003964:	d01e      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800396e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003972:	d10c      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003978:	3328      	adds	r3, #40	@ 0x28
 800397a:	2102      	movs	r1, #2
 800397c:	4618      	mov	r0, r3
 800397e:	f000 fb67 	bl	8004050 <RCCEx_PLL3_Config>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800398e:	4b70      	ldr	r3, [pc, #448]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003992:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800399e:	4a6c      	ldr	r2, [pc, #432]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80039b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039b4:	2300      	movs	r3, #0
 80039b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039ba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80039be:	460b      	mov	r3, r1
 80039c0:	4313      	orrs	r3, r2
 80039c2:	d03e      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80039c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80039cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039d0:	d022      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80039d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039d6:	d81b      	bhi.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80039dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e0:	d00b      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80039e2:	e015      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e8:	3308      	adds	r3, #8
 80039ea:	2100      	movs	r1, #0
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fa7d 	bl	8003eec <RCCEx_PLL2_Config>
 80039f2:	4603      	mov	r3, r0
 80039f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80039f8:	e00f      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fe:	3328      	adds	r3, #40	@ 0x28
 8003a00:	2102      	movs	r1, #2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fb24 	bl	8004050 <RCCEx_PLL3_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a0e:	e004      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a16:	e000      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10b      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a22:	4b4b      	ldr	r3, [pc, #300]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a26:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a32:	4a47      	ldr	r2, [pc, #284]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a38:	e003      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003a4e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a50:	2300      	movs	r3, #0
 8003a52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a54:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	d03b      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a6a:	d01f      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003a6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a70:	d818      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a76:	d003      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003a78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a7c:	d007      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003a7e:	e011      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a80:	4b33      	ldr	r3, [pc, #204]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a84:	4a32      	ldr	r2, [pc, #200]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003a8c:	e00f      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a92:	3328      	adds	r3, #40	@ 0x28
 8003a94:	2101      	movs	r1, #1
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fada 	bl	8004050 <RCCEx_PLL3_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003aa2:	e004      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aaa:	e000      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10b      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ab6:	4b26      	ldr	r3, [pc, #152]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac6:	4a22      	ldr	r2, [pc, #136]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	6553      	str	r3, [r2, #84]	@ 0x54
 8003acc:	e003      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ade:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003ae2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ae8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003aec:	460b      	mov	r3, r1
 8003aee:	4313      	orrs	r3, r2
 8003af0:	d034      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b00:	d007      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003b02:	e011      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b04:	4b12      	ldr	r3, [pc, #72]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b08:	4a11      	ldr	r2, [pc, #68]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b10:	e00e      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b16:	3308      	adds	r3, #8
 8003b18:	2102      	movs	r1, #2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 f9e6 	bl	8003eec <RCCEx_PLL2_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b26:	e003      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10d      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b38:	4b05      	ldr	r3, [pc, #20]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b46:	4a02      	ldr	r2, [pc, #8]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b4c:	e006      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003b4e:	bf00      	nop
 8003b50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003b68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b6e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003b72:	460b      	mov	r3, r1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	d00c      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7c:	3328      	adds	r3, #40	@ 0x28
 8003b7e:	2102      	movs	r1, #2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fa65 	bl	8004050 <RCCEx_PLL3_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003b9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ba4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4313      	orrs	r3, r2
 8003bac:	d038      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bba:	d018      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003bbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bc0:	d811      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003bc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc6:	d014      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bcc:	d80b      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d011      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bd6:	d106      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd8:	4bc3      	ldr	r3, [pc, #780]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bdc:	4ac2      	ldr	r2, [pc, #776]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003be2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003be4:	e008      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bec:	e004      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003bee:	bf00      	nop
 8003bf0:	e002      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003bf2:	bf00      	nop
 8003bf4:	e000      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003bf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10b      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c00:	4bb9      	ldr	r3, [pc, #740]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c04:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c10:	4ab5      	ldr	r2, [pc, #724]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c12:	430b      	orrs	r3, r1
 8003c14:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c16:	e003      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c28:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003c2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c2e:	2300      	movs	r3, #0
 8003c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c32:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003c36:	460b      	mov	r3, r1
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	d009      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c3c:	4baa      	ldr	r3, [pc, #680]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c4a:	4aa7      	ldr	r2, [pc, #668]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003c5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c5e:	2300      	movs	r3, #0
 8003c60:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003c66:	460b      	mov	r3, r1
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003c6c:	4b9e      	ldr	r3, [pc, #632]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003c7c:	4a9a      	ldr	r2, [pc, #616]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c90:	2300      	movs	r3, #0
 8003c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c94:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	d009      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c9e:	4b92      	ldr	r3, [pc, #584]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cac:	4a8e      	ldr	r2, [pc, #568]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003cbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cc4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	d00e      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cce:	4b86      	ldr	r3, [pc, #536]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	4a85      	ldr	r2, [pc, #532]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cd4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003cd8:	6113      	str	r3, [r2, #16]
 8003cda:	4b83      	ldr	r3, [pc, #524]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cdc:	6919      	ldr	r1, [r3, #16]
 8003cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003ce6:	4a80      	ldr	r2, [pc, #512]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cfe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003d02:	460b      	mov	r3, r1
 8003d04:	4313      	orrs	r3, r2
 8003d06:	d009      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003d08:	4b77      	ldr	r3, [pc, #476]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d0c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d16:	4a74      	ldr	r2, [pc, #464]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003d28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d2e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003d32:	460b      	mov	r3, r1
 8003d34:	4313      	orrs	r3, r2
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d38:	4b6b      	ldr	r3, [pc, #428]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d48:	4a67      	ldr	r2, [pc, #412]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d4a:	430b      	orrs	r3, r1
 8003d4c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	2100      	movs	r1, #0
 8003d58:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d60:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003d64:	460b      	mov	r3, r1
 8003d66:	4313      	orrs	r3, r2
 8003d68:	d011      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6e:	3308      	adds	r3, #8
 8003d70:	2100      	movs	r1, #0
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 f8ba 	bl	8003eec <RCCEx_PLL2_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	2100      	movs	r1, #0
 8003d98:	6239      	str	r1, [r7, #32]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003da4:	460b      	mov	r3, r1
 8003da6:	4313      	orrs	r3, r2
 8003da8:	d011      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	3308      	adds	r3, #8
 8003db0:	2101      	movs	r1, #1
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 f89a 	bl	8003eec <RCCEx_PLL2_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	61b9      	str	r1, [r7, #24]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	61fb      	str	r3, [r7, #28]
 8003de0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003de4:	460b      	mov	r3, r1
 8003de6:	4313      	orrs	r3, r2
 8003de8:	d011      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dee:	3308      	adds	r3, #8
 8003df0:	2102      	movs	r1, #2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f87a 	bl	8003eec <RCCEx_PLL2_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	2100      	movs	r1, #0
 8003e18:	6139      	str	r1, [r7, #16]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e24:	460b      	mov	r3, r1
 8003e26:	4313      	orrs	r3, r2
 8003e28:	d011      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2e:	3328      	adds	r3, #40	@ 0x28
 8003e30:	2100      	movs	r1, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 f90c 	bl	8004050 <RCCEx_PLL3_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e56:	2100      	movs	r1, #0
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e64:	460b      	mov	r3, r1
 8003e66:	4313      	orrs	r3, r2
 8003e68:	d011      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6e:	3328      	adds	r3, #40	@ 0x28
 8003e70:	2101      	movs	r1, #1
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 f8ec 	bl	8004050 <RCCEx_PLL3_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	2100      	movs	r1, #0
 8003e98:	6039      	str	r1, [r7, #0]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	607b      	str	r3, [r7, #4]
 8003ea0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	d011      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eae:	3328      	adds	r3, #40	@ 0x28
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f8cc 	bl	8004050 <RCCEx_PLL3_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003ece:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e000      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee8:	58024400 	.word	0x58024400

08003eec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003efa:	4b53      	ldr	r3, [pc, #332]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d101      	bne.n	8003f0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e099      	b.n	800403e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f0a:	4b4f      	ldr	r3, [pc, #316]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a4e      	ldr	r2, [pc, #312]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f10:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f16:	f7fc ff45 	bl	8000da4 <HAL_GetTick>
 8003f1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f1c:	e008      	b.n	8003f30 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f1e:	f7fc ff41 	bl	8000da4 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e086      	b.n	800403e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f30:	4b45      	ldr	r3, [pc, #276]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f0      	bne.n	8003f1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f3c:	4b42      	ldr	r3, [pc, #264]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f40:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	031b      	lsls	r3, r3, #12
 8003f4a:	493f      	ldr	r1, [pc, #252]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	025b      	lsls	r3, r3, #9
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	041b      	lsls	r3, r3, #16
 8003f6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	061b      	lsls	r3, r3, #24
 8003f7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f80:	4931      	ldr	r1, [pc, #196]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003f86:	4b30      	ldr	r3, [pc, #192]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	492d      	ldr	r1, [pc, #180]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003f98:	4b2b      	ldr	r3, [pc, #172]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	f023 0220 	bic.w	r2, r3, #32
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	4928      	ldr	r1, [pc, #160]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003faa:	4b27      	ldr	r3, [pc, #156]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fae:	4a26      	ldr	r2, [pc, #152]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fb0:	f023 0310 	bic.w	r3, r3, #16
 8003fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003fb6:	4b24      	ldr	r3, [pc, #144]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fba:	4b24      	ldr	r3, [pc, #144]	@ (800404c <RCCEx_PLL2_Config+0x160>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	69d2      	ldr	r2, [r2, #28]
 8003fc2:	00d2      	lsls	r2, r2, #3
 8003fc4:	4920      	ldr	r1, [pc, #128]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003fca:	4b1f      	ldr	r3, [pc, #124]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fce:	4a1e      	ldr	r2, [pc, #120]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fd0:	f043 0310 	orr.w	r3, r3, #16
 8003fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d106      	bne.n	8003fea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	4a19      	ldr	r2, [pc, #100]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fe2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003fe8:	e00f      	b.n	800400a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d106      	bne.n	8003ffe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ff0:	4b15      	ldr	r3, [pc, #84]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	4a14      	ldr	r2, [pc, #80]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003ffc:	e005      	b.n	800400a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ffe:	4b12      	ldr	r3, [pc, #72]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8004000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004002:	4a11      	ldr	r2, [pc, #68]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8004004:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004008:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800400a:	4b0f      	ldr	r3, [pc, #60]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a0e      	ldr	r2, [pc, #56]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8004010:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004016:	f7fc fec5 	bl	8000da4 <HAL_GetTick>
 800401a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800401c:	e008      	b.n	8004030 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800401e:	f7fc fec1 	bl	8000da4 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e006      	b.n	800403e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004030:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0f0      	beq.n	800401e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800403c:	7bfb      	ldrb	r3, [r7, #15]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	58024400 	.word	0x58024400
 800404c:	ffff0007 	.word	0xffff0007

08004050 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800405e:	4b53      	ldr	r3, [pc, #332]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b03      	cmp	r3, #3
 8004068:	d101      	bne.n	800406e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e099      	b.n	80041a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800406e:	4b4f      	ldr	r3, [pc, #316]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a4e      	ldr	r2, [pc, #312]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004074:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407a:	f7fc fe93 	bl	8000da4 <HAL_GetTick>
 800407e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004080:	e008      	b.n	8004094 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004082:	f7fc fe8f 	bl	8000da4 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e086      	b.n	80041a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004094:	4b45      	ldr	r3, [pc, #276]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f0      	bne.n	8004082 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80040a0:	4b42      	ldr	r3, [pc, #264]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 80040a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	051b      	lsls	r3, r3, #20
 80040ae:	493f      	ldr	r1, [pc, #252]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	025b      	lsls	r3, r3, #9
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	041b      	lsls	r3, r3, #16
 80040d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	3b01      	subs	r3, #1
 80040de:	061b      	lsls	r3, r3, #24
 80040e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040e4:	4931      	ldr	r1, [pc, #196]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80040ea:	4b30      	ldr	r3, [pc, #192]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 80040ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	492d      	ldr	r1, [pc, #180]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80040fc:	4b2b      	ldr	r3, [pc, #172]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 80040fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004100:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	4928      	ldr	r1, [pc, #160]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 800410a:	4313      	orrs	r3, r2
 800410c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800410e:	4b27      	ldr	r3, [pc, #156]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004112:	4a26      	ldr	r2, [pc, #152]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004118:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800411a:	4b24      	ldr	r3, [pc, #144]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 800411c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800411e:	4b24      	ldr	r3, [pc, #144]	@ (80041b0 <RCCEx_PLL3_Config+0x160>)
 8004120:	4013      	ands	r3, r2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	69d2      	ldr	r2, [r2, #28]
 8004126:	00d2      	lsls	r2, r2, #3
 8004128:	4920      	ldr	r1, [pc, #128]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 800412a:	4313      	orrs	r3, r2
 800412c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800412e:	4b1f      	ldr	r3, [pc, #124]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004132:	4a1e      	ldr	r2, [pc, #120]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004138:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d106      	bne.n	800414e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004140:	4b1a      	ldr	r3, [pc, #104]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	4a19      	ldr	r2, [pc, #100]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004146:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800414a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800414c:	e00f      	b.n	800416e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d106      	bne.n	8004162 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004154:	4b15      	ldr	r3, [pc, #84]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004158:	4a14      	ldr	r2, [pc, #80]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 800415a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800415e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004160:	e005      	b.n	800416e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004162:	4b12      	ldr	r3, [pc, #72]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004166:	4a11      	ldr	r2, [pc, #68]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004168:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800416c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800416e:	4b0f      	ldr	r3, [pc, #60]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a0e      	ldr	r2, [pc, #56]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417a:	f7fc fe13 	bl	8000da4 <HAL_GetTick>
 800417e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004180:	e008      	b.n	8004194 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004182:	f7fc fe0f 	bl	8000da4 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e006      	b.n	80041a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0f0      	beq.n	8004182 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	58024400 	.word	0x58024400
 80041b0:	ffff0007 	.word	0xffff0007

080041b4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6819      	ldr	r1, [r3, #0]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	fb03 f203 	mul.w	r2, r3, r3
 80041ca:	4613      	mov	r3, r2
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	4413      	add	r3, r2
 80041d0:	43db      	mvns	r3, r3
 80041d2:	ea01 0203 	and.w	r2, r1, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	fb03 f303 	mul.w	r3, r3, r3
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	fb01 f303 	mul.w	r3, r1, r3
 80041e2:	431a      	orrs	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	601a      	str	r2, [r3, #0]
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	43db      	mvns	r3, r3
 8004208:	401a      	ands	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	fb01 f303 	mul.w	r3, r1, r3
 8004212:	431a      	orrs	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	605a      	str	r2, [r3, #4]
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6899      	ldr	r1, [r3, #8]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	fb03 f203 	mul.w	r2, r3, r3
 800423a:	4613      	mov	r3, r2
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	4413      	add	r3, r2
 8004240:	43db      	mvns	r3, r3
 8004242:	ea01 0203 	and.w	r2, r1, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	fb03 f303 	mul.w	r3, r3, r3
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	fb01 f303 	mul.w	r3, r1, r3
 8004252:	431a      	orrs	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	609a      	str	r2, [r3, #8]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	68d9      	ldr	r1, [r3, #12]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	fb03 f203 	mul.w	r2, r3, r3
 800427a:	4613      	mov	r3, r2
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	4413      	add	r3, r2
 8004280:	43db      	mvns	r3, r3
 8004282:	ea01 0203 	and.w	r2, r1, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	fb03 f303 	mul.w	r3, r3, r3
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	431a      	orrs	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	60da      	str	r2, [r3, #12]
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a19      	ldr	r1, [r3, #32]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	fb03 f303 	mul.w	r3, r3, r3
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	fb02 f303 	mul.w	r3, r2, r3
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	fb03 f202 	mul.w	r2, r3, r2
 80042c6:	4613      	mov	r3, r2
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	43db      	mvns	r3, r3
 80042ce:	ea01 0203 	and.w	r2, r1, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	fb03 f303 	mul.w	r3, r3, r3
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	fb01 f303 	mul.w	r3, r1, r3
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	fb01 f303 	mul.w	r3, r1, r3
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	fb01 f303 	mul.w	r3, r1, r3
 80042ea:	431a      	orrs	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	0a1b      	lsrs	r3, r3, #8
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	0a12      	lsrs	r2, r2, #8
 8004314:	fb02 f303 	mul.w	r3, r2, r3
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	0a12      	lsrs	r2, r2, #8
 800431c:	fb02 f303 	mul.w	r3, r2, r3
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	0a12      	lsrs	r2, r2, #8
 8004324:	fb03 f202 	mul.w	r2, r3, r2
 8004328:	4613      	mov	r3, r2
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	43db      	mvns	r3, r3
 8004330:	ea01 0203 	and.w	r2, r1, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	0a09      	lsrs	r1, r1, #8
 800433c:	fb01 f303 	mul.w	r3, r1, r3
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	0a09      	lsrs	r1, r1, #8
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	0a09      	lsrs	r1, r1, #8
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	fb01 f303 	mul.w	r3, r1, r3
 8004356:	431a      	orrs	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	fa93 f3a3 	rbit	r3, r3
 800437e:	60fb      	str	r3, [r7, #12]
  return result;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <LL_GPIO_Init+0x26>
    return 32U;
 800438a:	2320      	movs	r3, #32
 800438c:	e003      	b.n	8004396 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	fab3 f383 	clz	r3, r3
 8004394:	b2db      	uxtb	r3, r3
 8004396:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004398:	e048      	b.n	800442c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	2101      	movs	r1, #1
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	fa01 f303 	lsl.w	r3, r1, r3
 80043a6:	4013      	ands	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d03a      	beq.n	8004426 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d003      	beq.n	80043c0 <LL_GPIO_Init+0x58>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d10e      	bne.n	80043de <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	461a      	mov	r2, r3
 80043c6:	69b9      	ldr	r1, [r7, #24]
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff ff2b 	bl	8004224 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6819      	ldr	r1, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	461a      	mov	r2, r3
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff ff0b 	bl	80041f4 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	461a      	mov	r2, r3
 80043e4:	69b9      	ldr	r1, [r7, #24]
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff ff3c 	bl	8004264 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d111      	bne.n	8004418 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	2bff      	cmp	r3, #255	@ 0xff
 80043f8:	d807      	bhi.n	800440a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	461a      	mov	r2, r3
 8004400:	69b9      	ldr	r1, [r7, #24]
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7ff ff4e 	bl	80042a4 <LL_GPIO_SetAFPin_0_7>
 8004408:	e006      	b.n	8004418 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	461a      	mov	r2, r3
 8004410:	69b9      	ldr	r1, [r7, #24]
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff ff72 	bl	80042fc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	461a      	mov	r2, r3
 800441e:	69b9      	ldr	r1, [r7, #24]
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff fec7 	bl	80041b4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	3301      	adds	r3, #1
 800442a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	fa22 f303 	lsr.w	r3, r2, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1af      	bne.n	800439a <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3720      	adds	r7, #32
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004448:	4b07      	ldr	r3, [pc, #28]	@ (8004468 <LL_RCC_HSE_IsReady+0x24>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004450:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004454:	d101      	bne.n	800445a <LL_RCC_HSE_IsReady+0x16>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <LL_RCC_HSE_IsReady+0x18>
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	58024400 	.word	0x58024400

0800446c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004470:	4b06      	ldr	r3, [pc, #24]	@ (800448c <LL_RCC_HSI_IsReady+0x20>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b04      	cmp	r3, #4
 800447a:	d101      	bne.n	8004480 <LL_RCC_HSI_IsReady+0x14>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <LL_RCC_HSI_IsReady+0x16>
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	58024400 	.word	0x58024400

08004490 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8004494:	4b04      	ldr	r3, [pc, #16]	@ (80044a8 <LL_RCC_HSI_GetDivider+0x18>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0318 	and.w	r3, r3, #24
}
 800449c:	4618      	mov	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	58024400 	.word	0x58024400

080044ac <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 80044b0:	4b07      	ldr	r3, [pc, #28]	@ (80044d0 <LL_RCC_CSI_IsReady+0x24>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044bc:	d101      	bne.n	80044c2 <LL_RCC_CSI_IsReady+0x16>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <LL_RCC_CSI_IsReady+0x18>
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	58024400 	.word	0x58024400

080044d4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80044d8:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <LL_RCC_LSE_IsReady+0x20>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d101      	bne.n	80044e8 <LL_RCC_LSE_IsReady+0x14>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <LL_RCC_LSE_IsReady+0x16>
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	58024400 	.word	0x58024400

080044f8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80044fc:	4b04      	ldr	r3, [pc, #16]	@ (8004510 <LL_RCC_GetSysClkSource+0x18>)
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 8004504:	4618      	mov	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	58024400 	.word	0x58024400

08004514 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 8004518:	4b04      	ldr	r3, [pc, #16]	@ (800452c <LL_RCC_GetSysPrescaler+0x18>)
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 8004520:	4618      	mov	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	58024400 	.word	0x58024400

08004530 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8004534:	4b04      	ldr	r3, [pc, #16]	@ (8004548 <LL_RCC_GetAHBPrescaler+0x18>)
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 800453c:	4618      	mov	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	58024400 	.word	0x58024400

0800454c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 8004550:	4b04      	ldr	r3, [pc, #16]	@ (8004564 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 8004558:	4618      	mov	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	58024400 	.word	0x58024400

08004568 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 800456c:	4b04      	ldr	r3, [pc, #16]	@ (8004580 <LL_RCC_GetAPB2Prescaler+0x18>)
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 8004574:	4618      	mov	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	58024400 	.word	0x58024400

08004584 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	b2da      	uxtb	r2, r3
 8004590:	4b0e      	ldr	r3, [pc, #56]	@ (80045cc <LL_RCC_GetClockSource+0x48>)
 8004592:	4413      	add	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	0e19      	lsrs	r1, r3, #24
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	0a1b      	lsrs	r3, r3, #8
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	fa01 f303 	lsl.w	r3, r1, r3
 80045aa:	401a      	ands	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	0a1b      	lsrs	r3, r3, #8
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	fa22 f303 	lsr.w	r3, r2, r3
 80045b8:	041a      	lsls	r2, r3, #16
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4313      	orrs	r3, r2
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	5802444c 	.word	0x5802444c

080045d0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff ffd3 	bl	8004584 <LL_RCC_GetClockSource>
 80045de:	4603      	mov	r3, r0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 80045ec:	4b04      	ldr	r3, [pc, #16]	@ (8004600 <LL_RCC_PLL_GetSource+0x18>)
 80045ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f0:	f003 0303 	and.w	r3, r3, #3
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	58024400 	.word	0x58024400

08004604 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 8004608:	4b07      	ldr	r3, [pc, #28]	@ (8004628 <LL_RCC_PLL1P_IsEnabled+0x24>)
 800460a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004614:	d101      	bne.n	800461a <LL_RCC_PLL1P_IsEnabled+0x16>
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <LL_RCC_PLL1P_IsEnabled+0x18>
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	58024400 	.word	0x58024400

0800462c <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 8004630:	4b07      	ldr	r3, [pc, #28]	@ (8004650 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 8004632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004638:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800463c:	d101      	bne.n	8004642 <LL_RCC_PLL1Q_IsEnabled+0x16>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <LL_RCC_PLL1Q_IsEnabled+0x18>
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	58024400 	.word	0x58024400

08004654 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 8004658:	4b07      	ldr	r3, [pc, #28]	@ (8004678 <LL_RCC_PLL1R_IsEnabled+0x24>)
 800465a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004660:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004664:	d101      	bne.n	800466a <LL_RCC_PLL1R_IsEnabled+0x16>
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <LL_RCC_PLL1R_IsEnabled+0x18>
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	58024400 	.word	0x58024400

0800467c <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 8004680:	4b06      	ldr	r3, [pc, #24]	@ (800469c <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	58024400 	.word	0x58024400

080046a0 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 80046a4:	4b04      	ldr	r3, [pc, #16]	@ (80046b8 <LL_RCC_PLL1_GetN+0x18>)
 80046a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ac:	3301      	adds	r3, #1
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	58024400 	.word	0x58024400

080046bc <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 80046c0:	4b04      	ldr	r3, [pc, #16]	@ (80046d4 <LL_RCC_PLL1_GetM+0x18>)
 80046c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c4:	091b      	lsrs	r3, r3, #4
 80046c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	58024400 	.word	0x58024400

080046d8 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 80046dc:	4b05      	ldr	r3, [pc, #20]	@ (80046f4 <LL_RCC_PLL1_GetP+0x1c>)
 80046de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e0:	0a5b      	lsrs	r3, r3, #9
 80046e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046e6:	3301      	adds	r3, #1
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	58024400 	.word	0x58024400

080046f8 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 80046fc:	4b05      	ldr	r3, [pc, #20]	@ (8004714 <LL_RCC_PLL1_GetQ+0x1c>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004700:	0c1b      	lsrs	r3, r3, #16
 8004702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004706:	3301      	adds	r3, #1
}
 8004708:	4618      	mov	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	58024400 	.word	0x58024400

08004718 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 800471c:	4b05      	ldr	r3, [pc, #20]	@ (8004734 <LL_RCC_PLL1_GetR+0x1c>)
 800471e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004720:	0e1b      	lsrs	r3, r3, #24
 8004722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004726:	3301      	adds	r3, #1
}
 8004728:	4618      	mov	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	58024400 	.word	0x58024400

08004738 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 800473c:	4b04      	ldr	r3, [pc, #16]	@ (8004750 <LL_RCC_PLL1_GetFRACN+0x18>)
 800473e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004740:	08db      	lsrs	r3, r3, #3
 8004742:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8004746:	4618      	mov	r0, r3
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	58024400 	.word	0x58024400

08004754 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8004758:	4b07      	ldr	r3, [pc, #28]	@ (8004778 <LL_RCC_PLL2_IsReady+0x24>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004760:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004764:	d101      	bne.n	800476a <LL_RCC_PLL2_IsReady+0x16>
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <LL_RCC_PLL2_IsReady+0x18>
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	58024400 	.word	0x58024400

0800477c <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 8004780:	4b07      	ldr	r3, [pc, #28]	@ (80047a0 <LL_RCC_PLL2P_IsEnabled+0x24>)
 8004782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004784:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004788:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800478c:	d101      	bne.n	8004792 <LL_RCC_PLL2P_IsEnabled+0x16>
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <LL_RCC_PLL2P_IsEnabled+0x18>
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	58024400 	.word	0x58024400

080047a4 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 80047a8:	4b07      	ldr	r3, [pc, #28]	@ (80047c8 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 80047aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047b4:	d101      	bne.n	80047ba <LL_RCC_PLL2Q_IsEnabled+0x16>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <LL_RCC_PLL2Q_IsEnabled+0x18>
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	58024400 	.word	0x58024400

080047cc <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 80047d0:	4b07      	ldr	r3, [pc, #28]	@ (80047f0 <LL_RCC_PLL2R_IsEnabled+0x24>)
 80047d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047dc:	d101      	bne.n	80047e2 <LL_RCC_PLL2R_IsEnabled+0x16>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <LL_RCC_PLL2R_IsEnabled+0x18>
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	58024400 	.word	0x58024400

080047f4 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 80047f8:	4b06      	ldr	r3, [pc, #24]	@ (8004814 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 80047fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b10      	cmp	r3, #16
 8004802:	d101      	bne.n	8004808 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	58024400 	.word	0x58024400

08004818 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 800481c:	4b04      	ldr	r3, [pc, #16]	@ (8004830 <LL_RCC_PLL2_GetN+0x18>)
 800481e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004824:	3301      	adds	r3, #1
}
 8004826:	4618      	mov	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	58024400 	.word	0x58024400

08004834 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 8004838:	4b04      	ldr	r3, [pc, #16]	@ (800484c <LL_RCC_PLL2_GetM+0x18>)
 800483a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483c:	0b1b      	lsrs	r3, r3, #12
 800483e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8004842:	4618      	mov	r0, r3
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	58024400 	.word	0x58024400

08004850 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8004854:	4b05      	ldr	r3, [pc, #20]	@ (800486c <LL_RCC_PLL2_GetP+0x1c>)
 8004856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004858:	0a5b      	lsrs	r3, r3, #9
 800485a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800485e:	3301      	adds	r3, #1
}
 8004860:	4618      	mov	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	58024400 	.word	0x58024400

08004870 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8004874:	4b05      	ldr	r3, [pc, #20]	@ (800488c <LL_RCC_PLL2_GetQ+0x1c>)
 8004876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004878:	0c1b      	lsrs	r3, r3, #16
 800487a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800487e:	3301      	adds	r3, #1
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	58024400 	.word	0x58024400

08004890 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 8004894:	4b05      	ldr	r3, [pc, #20]	@ (80048ac <LL_RCC_PLL2_GetR+0x1c>)
 8004896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004898:	0e1b      	lsrs	r3, r3, #24
 800489a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800489e:	3301      	adds	r3, #1
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	58024400 	.word	0x58024400

080048b0 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 80048b4:	4b04      	ldr	r3, [pc, #16]	@ (80048c8 <LL_RCC_PLL2_GetFRACN+0x18>)
 80048b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b8:	08db      	lsrs	r3, r3, #3
 80048ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 80048be:	4618      	mov	r0, r3
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	58024400 	.word	0x58024400

080048cc <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 80048d0:	4b07      	ldr	r3, [pc, #28]	@ (80048f0 <LL_RCC_PLL3_IsReady+0x24>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048dc:	d101      	bne.n	80048e2 <LL_RCC_PLL3_IsReady+0x16>
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <LL_RCC_PLL3_IsReady+0x18>
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	58024400 	.word	0x58024400

080048f4 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 80048f8:	4b07      	ldr	r3, [pc, #28]	@ (8004918 <LL_RCC_PLL3P_IsEnabled+0x24>)
 80048fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004900:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004904:	d101      	bne.n	800490a <LL_RCC_PLL3P_IsEnabled+0x16>
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <LL_RCC_PLL3P_IsEnabled+0x18>
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	58024400 	.word	0x58024400

0800491c <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 8004920:	4b07      	ldr	r3, [pc, #28]	@ (8004940 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004928:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800492c:	d101      	bne.n	8004932 <LL_RCC_PLL3Q_IsEnabled+0x16>
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <LL_RCC_PLL3Q_IsEnabled+0x18>
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	58024400 	.word	0x58024400

08004944 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 8004948:	4b07      	ldr	r3, [pc, #28]	@ (8004968 <LL_RCC_PLL3R_IsEnabled+0x24>)
 800494a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004954:	d101      	bne.n	800495a <LL_RCC_PLL3R_IsEnabled+0x16>
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <LL_RCC_PLL3R_IsEnabled+0x18>
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	58024400 	.word	0x58024400

0800496c <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 8004970:	4b07      	ldr	r3, [pc, #28]	@ (8004990 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 8004972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800497c:	d101      	bne.n	8004982 <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	58024400 	.word	0x58024400

08004994 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8004998:	4b04      	ldr	r3, [pc, #16]	@ (80049ac <LL_RCC_PLL3_GetN+0x18>)
 800499a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a0:	3301      	adds	r3, #1
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	58024400 	.word	0x58024400

080049b0 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 80049b4:	4b04      	ldr	r3, [pc, #16]	@ (80049c8 <LL_RCC_PLL3_GetM+0x18>)
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	0d1b      	lsrs	r3, r3, #20
 80049ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80049be:	4618      	mov	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	58024400 	.word	0x58024400

080049cc <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 80049d0:	4b05      	ldr	r3, [pc, #20]	@ (80049e8 <LL_RCC_PLL3_GetP+0x1c>)
 80049d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d4:	0a5b      	lsrs	r3, r3, #9
 80049d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049da:	3301      	adds	r3, #1
}
 80049dc:	4618      	mov	r0, r3
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	58024400 	.word	0x58024400

080049ec <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 80049f0:	4b05      	ldr	r3, [pc, #20]	@ (8004a08 <LL_RCC_PLL3_GetQ+0x1c>)
 80049f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049fa:	3301      	adds	r3, #1
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	58024400 	.word	0x58024400

08004a0c <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 8004a10:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <LL_RCC_PLL3_GetR+0x1c>)
 8004a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a14:	0e1b      	lsrs	r3, r3, #24
 8004a16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a1a:	3301      	adds	r3, #1
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	58024400 	.word	0x58024400

08004a2c <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 8004a30:	4b04      	ldr	r3, [pc, #16]	@ (8004a44 <LL_RCC_PLL3_GetFRACN+0x18>)
 8004a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a34:	08db      	lsrs	r3, r3, #3
 8004a36:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	58024400 	.word	0x58024400

08004a48 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	@ 0x28
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8004a58:	f7ff fdc6 	bl	80045e8 <LL_RCC_PLL_GetSource>
 8004a5c:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d01f      	beq.n	8004aa4 <LL_RCC_GetPLL1ClockFreq+0x5c>
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d824      	bhi.n	8004ab4 <LL_RCC_GetPLL1ClockFreq+0x6c>
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <LL_RCC_GetPLL1ClockFreq+0x30>
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d00e      	beq.n	8004a94 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8004a76:	e01d      	b.n	8004ab4 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8004a78:	f7ff fcf8 	bl	800446c <LL_RCC_HSI_IsReady>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01a      	beq.n	8004ab8 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8004a82:	f7ff fd05 	bl	8004490 <LL_RCC_HSI_GetDivider>
 8004a86:	4603      	mov	r3, r0
 8004a88:	08db      	lsrs	r3, r3, #3
 8004a8a:	4a38      	ldr	r2, [pc, #224]	@ (8004b6c <LL_RCC_GetPLL1ClockFreq+0x124>)
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a90:	61fb      	str	r3, [r7, #28]
      break;
 8004a92:	e011      	b.n	8004ab8 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8004a94:	f7ff fd0a 	bl	80044ac <LL_RCC_CSI_IsReady>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00e      	beq.n	8004abc <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8004a9e:	4b34      	ldr	r3, [pc, #208]	@ (8004b70 <LL_RCC_GetPLL1ClockFreq+0x128>)
 8004aa0:	61fb      	str	r3, [r7, #28]
      break;
 8004aa2:	e00b      	b.n	8004abc <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8004aa4:	f7ff fcce 	bl	8004444 <LL_RCC_HSE_IsReady>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d008      	beq.n	8004ac0 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8004aae:	4b31      	ldr	r3, [pc, #196]	@ (8004b74 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 8004ab0:	61fb      	str	r3, [r7, #28]
      break;
 8004ab2:	e005      	b.n	8004ac0 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 8004ab4:	bf00      	nop
 8004ab6:	e004      	b.n	8004ac2 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8004ab8:	bf00      	nop
 8004aba:	e002      	b.n	8004ac2 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8004abc:	bf00      	nop
 8004abe:	e000      	b.n	8004ac2 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8004ac0:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 8004ad4:	f7ff fdf2 	bl	80046bc <LL_RCC_PLL1_GetM>
 8004ad8:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 8004ada:	f7ff fde1 	bl	80046a0 <LL_RCC_PLL1_GetN>
 8004ade:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 8004ae0:	f7ff fdcc 	bl	800467c <LL_RCC_PLL1FRACN_IsEnabled>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 8004aea:	f7ff fe25 	bl	8004738 <LL_RCC_PLL1_GetFRACN>
 8004aee:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d035      	beq.n	8004b62 <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 8004af6:	f7ff fd85 	bl	8004604 <LL_RCC_PLL1P_IsEnabled>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00c      	beq.n	8004b1a <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 8004b00:	f7ff fdea 	bl	80046d8 <LL_RCC_PLL1_GetP>
 8004b04:	4603      	mov	r3, r0
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	6939      	ldr	r1, [r7, #16]
 8004b0e:	69f8      	ldr	r0, [r7, #28]
 8004b10:	f000 f964 	bl	8004ddc <LL_RCC_CalcPLLClockFreq>
 8004b14:	4602      	mov	r2, r0
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 8004b1a:	f7ff fd87 	bl	800462c <LL_RCC_PLL1Q_IsEnabled>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00c      	beq.n	8004b3e <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 8004b24:	f7ff fde8 	bl	80046f8 <LL_RCC_PLL1_GetQ>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	6939      	ldr	r1, [r7, #16]
 8004b32:	69f8      	ldr	r0, [r7, #28]
 8004b34:	f000 f952 	bl	8004ddc <LL_RCC_CalcPLLClockFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 8004b3e:	f7ff fd89 	bl	8004654 <LL_RCC_PLL1R_IsEnabled>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00c      	beq.n	8004b62 <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 8004b48:	f7ff fde6 	bl	8004718 <LL_RCC_PLL1_GetR>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	6939      	ldr	r1, [r7, #16]
 8004b56:	69f8      	ldr	r0, [r7, #28]
 8004b58:	f000 f940 	bl	8004ddc <LL_RCC_CalcPLLClockFreq>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	609a      	str	r2, [r3, #8]
    }
  }
}
 8004b62:	bf00      	nop
 8004b64:	3720      	adds	r7, #32
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	03d09000 	.word	0x03d09000
 8004b70:	003d0900 	.word	0x003d0900
 8004b74:	017d7840 	.word	0x017d7840

08004b78 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08a      	sub	sp, #40	@ 0x28
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8004b88:	f7ff fd2e 	bl	80045e8 <LL_RCC_PLL_GetSource>
 8004b8c:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d01f      	beq.n	8004bd4 <LL_RCC_GetPLL2ClockFreq+0x5c>
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d824      	bhi.n	8004be4 <LL_RCC_GetPLL2ClockFreq+0x6c>
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <LL_RCC_GetPLL2ClockFreq+0x30>
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d00e      	beq.n	8004bc4 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8004ba6:	e01d      	b.n	8004be4 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8004ba8:	f7ff fc60 	bl	800446c <LL_RCC_HSI_IsReady>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01a      	beq.n	8004be8 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8004bb2:	f7ff fc6d 	bl	8004490 <LL_RCC_HSI_GetDivider>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	08db      	lsrs	r3, r3, #3
 8004bba:	4a38      	ldr	r2, [pc, #224]	@ (8004c9c <LL_RCC_GetPLL2ClockFreq+0x124>)
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc0:	61fb      	str	r3, [r7, #28]
      break;
 8004bc2:	e011      	b.n	8004be8 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8004bc4:	f7ff fc72 	bl	80044ac <LL_RCC_CSI_IsReady>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00e      	beq.n	8004bec <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8004bce:	4b34      	ldr	r3, [pc, #208]	@ (8004ca0 <LL_RCC_GetPLL2ClockFreq+0x128>)
 8004bd0:	61fb      	str	r3, [r7, #28]
      break;
 8004bd2:	e00b      	b.n	8004bec <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8004bd4:	f7ff fc36 	bl	8004444 <LL_RCC_HSE_IsReady>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d008      	beq.n	8004bf0 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8004bde:	4b31      	ldr	r3, [pc, #196]	@ (8004ca4 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 8004be0:	61fb      	str	r3, [r7, #28]
      break;
 8004be2:	e005      	b.n	8004bf0 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 8004be4:	bf00      	nop
 8004be6:	e004      	b.n	8004bf2 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8004be8:	bf00      	nop
 8004bea:	e002      	b.n	8004bf2 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8004bec:	bf00      	nop
 8004bee:	e000      	b.n	8004bf2 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8004bf0:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 8004c04:	f7ff fe16 	bl	8004834 <LL_RCC_PLL2_GetM>
 8004c08:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 8004c0a:	f7ff fe05 	bl	8004818 <LL_RCC_PLL2_GetN>
 8004c0e:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 8004c10:	f7ff fdf0 	bl	80047f4 <LL_RCC_PLL2FRACN_IsEnabled>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 8004c1a:	f7ff fe49 	bl	80048b0 <LL_RCC_PLL2_GetFRACN>
 8004c1e:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d035      	beq.n	8004c92 <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 8004c26:	f7ff fda9 	bl	800477c <LL_RCC_PLL2P_IsEnabled>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00c      	beq.n	8004c4a <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 8004c30:	f7ff fe0e 	bl	8004850 <LL_RCC_PLL2_GetP>
 8004c34:	4603      	mov	r3, r0
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	6939      	ldr	r1, [r7, #16]
 8004c3e:	69f8      	ldr	r0, [r7, #28]
 8004c40:	f000 f8cc 	bl	8004ddc <LL_RCC_CalcPLLClockFreq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8004c4a:	f7ff fdab 	bl	80047a4 <LL_RCC_PLL2Q_IsEnabled>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00c      	beq.n	8004c6e <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 8004c54:	f7ff fe0c 	bl	8004870 <LL_RCC_PLL2_GetQ>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	6939      	ldr	r1, [r7, #16]
 8004c62:	69f8      	ldr	r0, [r7, #28]
 8004c64:	f000 f8ba 	bl	8004ddc <LL_RCC_CalcPLLClockFreq>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 8004c6e:	f7ff fdad 	bl	80047cc <LL_RCC_PLL2R_IsEnabled>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00c      	beq.n	8004c92 <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 8004c78:	f7ff fe0a 	bl	8004890 <LL_RCC_PLL2_GetR>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	6939      	ldr	r1, [r7, #16]
 8004c86:	69f8      	ldr	r0, [r7, #28]
 8004c88:	f000 f8a8 	bl	8004ddc <LL_RCC_CalcPLLClockFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	609a      	str	r2, [r3, #8]
    }
  }
}
 8004c92:	bf00      	nop
 8004c94:	3720      	adds	r7, #32
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	03d09000 	.word	0x03d09000
 8004ca0:	003d0900 	.word	0x003d0900
 8004ca4:	017d7840 	.word	0x017d7840

08004ca8 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	@ 0x28
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8004cb8:	f7ff fc96 	bl	80045e8 <LL_RCC_PLL_GetSource>
 8004cbc:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d01f      	beq.n	8004d04 <LL_RCC_GetPLL3ClockFreq+0x5c>
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d824      	bhi.n	8004d14 <LL_RCC_GetPLL3ClockFreq+0x6c>
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <LL_RCC_GetPLL3ClockFreq+0x30>
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d00e      	beq.n	8004cf4 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8004cd6:	e01d      	b.n	8004d14 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8004cd8:	f7ff fbc8 	bl	800446c <LL_RCC_HSI_IsReady>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d01a      	beq.n	8004d18 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8004ce2:	f7ff fbd5 	bl	8004490 <LL_RCC_HSI_GetDivider>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	08db      	lsrs	r3, r3, #3
 8004cea:	4a39      	ldr	r2, [pc, #228]	@ (8004dd0 <LL_RCC_GetPLL3ClockFreq+0x128>)
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf0:	61fb      	str	r3, [r7, #28]
      break;
 8004cf2:	e011      	b.n	8004d18 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8004cf4:	f7ff fbda 	bl	80044ac <LL_RCC_CSI_IsReady>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00e      	beq.n	8004d1c <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8004cfe:	4b35      	ldr	r3, [pc, #212]	@ (8004dd4 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 8004d00:	61fb      	str	r3, [r7, #28]
      break;
 8004d02:	e00b      	b.n	8004d1c <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8004d04:	f7ff fb9e 	bl	8004444 <LL_RCC_HSE_IsReady>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d008      	beq.n	8004d20 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8004d0e:	4b32      	ldr	r3, [pc, #200]	@ (8004dd8 <LL_RCC_GetPLL3ClockFreq+0x130>)
 8004d10:	61fb      	str	r3, [r7, #28]
      break;
 8004d12:	e005      	b.n	8004d20 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 8004d14:	bf00      	nop
 8004d16:	e004      	b.n	8004d22 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8004d18:	bf00      	nop
 8004d1a:	e002      	b.n	8004d22 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8004d1c:	bf00      	nop
 8004d1e:	e000      	b.n	8004d22 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8004d20:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 8004d34:	f7ff fe3c 	bl	80049b0 <LL_RCC_PLL3_GetM>
 8004d38:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 8004d3a:	f7ff fe2b 	bl	8004994 <LL_RCC_PLL3_GetN>
 8004d3e:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 8004d40:	f7ff fe14 	bl	800496c <LL_RCC_PLL3FRACN_IsEnabled>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 8004d4a:	f7ff fe6f 	bl	8004a2c <LL_RCC_PLL3_GetFRACN>
 8004d4e:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d038      	beq.n	8004dc8 <LL_RCC_GetPLL3ClockFreq+0x120>
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d035      	beq.n	8004dc8 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 8004d5c:	f7ff fdca 	bl	80048f4 <LL_RCC_PLL3P_IsEnabled>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00c      	beq.n	8004d80 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 8004d66:	f7ff fe31 	bl	80049cc <LL_RCC_PLL3_GetP>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	6939      	ldr	r1, [r7, #16]
 8004d74:	69f8      	ldr	r0, [r7, #28]
 8004d76:	f000 f831 	bl	8004ddc <LL_RCC_CalcPLLClockFreq>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8004d80:	f7ff fdcc 	bl	800491c <LL_RCC_PLL3Q_IsEnabled>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00c      	beq.n	8004da4 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 8004d8a:	f7ff fe2f 	bl	80049ec <LL_RCC_PLL3_GetQ>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	6939      	ldr	r1, [r7, #16]
 8004d98:	69f8      	ldr	r0, [r7, #28]
 8004d9a:	f000 f81f 	bl	8004ddc <LL_RCC_CalcPLLClockFreq>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8004da4:	f7ff fdce 	bl	8004944 <LL_RCC_PLL3R_IsEnabled>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00c      	beq.n	8004dc8 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 8004dae:	f7ff fe2d 	bl	8004a0c <LL_RCC_PLL3_GetR>
 8004db2:	4603      	mov	r3, r0
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	6939      	ldr	r1, [r7, #16]
 8004dbc:	69f8      	ldr	r0, [r7, #28]
 8004dbe:	f000 f80d 	bl	8004ddc <LL_RCC_CalcPLLClockFreq>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	609a      	str	r2, [r3, #8]
    }
  }
}
 8004dc8:	bf00      	nop
 8004dca:	3720      	adds	r7, #32
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	03d09000 	.word	0x03d09000
 8004dd4:	003d0900 	.word	0x003d0900
 8004dd8:	017d7840 	.word	0x017d7840

08004ddc <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8004e16:	eddf 5a10 	vldr	s11, [pc, #64]	@ 8004e58 <LL_RCC_CalcPLLClockFreq+0x7c>
 8004e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e26:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e34:	edd7 6a05 	vldr	s13, [r7, #20]
 8004e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e3c:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 8004e40:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e48:	ee17 3a90 	vmov	r3, s15
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	46000000 	.word	0x46000000

08004e5c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8004e5c:	b590      	push	{r4, r7, lr}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004e64:	2300      	movs	r3, #0
 8004e66:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff fbb1 	bl	80045d0 <LL_RCC_GetUSARTClockSource>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	4a62      	ldr	r2, [pc, #392]	@ (8004ffc <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	f000 80a9 	beq.w	8004fca <LL_RCC_GetUSARTClockFreq+0x16e>
 8004e78:	4a60      	ldr	r2, [pc, #384]	@ (8004ffc <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	f200 80ae 	bhi.w	8004fdc <LL_RCC_GetUSARTClockFreq+0x180>
 8004e80:	4a5f      	ldr	r2, [pc, #380]	@ (8005000 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	f000 80a1 	beq.w	8004fca <LL_RCC_GetUSARTClockFreq+0x16e>
 8004e88:	4a5d      	ldr	r2, [pc, #372]	@ (8005000 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	f200 80a6 	bhi.w	8004fdc <LL_RCC_GetUSARTClockFreq+0x180>
 8004e90:	4a5c      	ldr	r2, [pc, #368]	@ (8005004 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	f000 8091 	beq.w	8004fba <LL_RCC_GetUSARTClockFreq+0x15e>
 8004e98:	4a5a      	ldr	r2, [pc, #360]	@ (8005004 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	f200 809e 	bhi.w	8004fdc <LL_RCC_GetUSARTClockFreq+0x180>
 8004ea0:	4a59      	ldr	r2, [pc, #356]	@ (8005008 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	f000 8089 	beq.w	8004fba <LL_RCC_GetUSARTClockFreq+0x15e>
 8004ea8:	4a57      	ldr	r2, [pc, #348]	@ (8005008 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	f200 8096 	bhi.w	8004fdc <LL_RCC_GetUSARTClockFreq+0x180>
 8004eb0:	4a56      	ldr	r2, [pc, #344]	@ (800500c <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d073      	beq.n	8004f9e <LL_RCC_GetUSARTClockFreq+0x142>
 8004eb6:	4a55      	ldr	r2, [pc, #340]	@ (800500c <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	f200 808f 	bhi.w	8004fdc <LL_RCC_GetUSARTClockFreq+0x180>
 8004ebe:	4a54      	ldr	r2, [pc, #336]	@ (8005010 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d06c      	beq.n	8004f9e <LL_RCC_GetUSARTClockFreq+0x142>
 8004ec4:	4a52      	ldr	r2, [pc, #328]	@ (8005010 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	f200 8088 	bhi.w	8004fdc <LL_RCC_GetUSARTClockFreq+0x180>
 8004ecc:	4a51      	ldr	r2, [pc, #324]	@ (8005014 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d058      	beq.n	8004f84 <LL_RCC_GetUSARTClockFreq+0x128>
 8004ed2:	4a50      	ldr	r2, [pc, #320]	@ (8005014 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	f200 8081 	bhi.w	8004fdc <LL_RCC_GetUSARTClockFreq+0x180>
 8004eda:	4a4f      	ldr	r2, [pc, #316]	@ (8005018 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d051      	beq.n	8004f84 <LL_RCC_GetUSARTClockFreq+0x128>
 8004ee0:	4a4d      	ldr	r2, [pc, #308]	@ (8005018 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d87a      	bhi.n	8004fdc <LL_RCC_GetUSARTClockFreq+0x180>
 8004ee6:	4a4d      	ldr	r2, [pc, #308]	@ (800501c <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d03e      	beq.n	8004f6a <LL_RCC_GetUSARTClockFreq+0x10e>
 8004eec:	4a4b      	ldr	r2, [pc, #300]	@ (800501c <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d874      	bhi.n	8004fdc <LL_RCC_GetUSARTClockFreq+0x180>
 8004ef2:	4a4b      	ldr	r2, [pc, #300]	@ (8005020 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d038      	beq.n	8004f6a <LL_RCC_GetUSARTClockFreq+0x10e>
 8004ef8:	4a49      	ldr	r2, [pc, #292]	@ (8005020 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d86e      	bhi.n	8004fdc <LL_RCC_GetUSARTClockFreq+0x180>
 8004efe:	4a49      	ldr	r2, [pc, #292]	@ (8005024 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d01a      	beq.n	8004f3a <LL_RCC_GetUSARTClockFreq+0xde>
 8004f04:	4a48      	ldr	r2, [pc, #288]	@ (8005028 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d168      	bne.n	8004fdc <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8004f0a:	f000 f895 	bl	8005038 <RCC_GetSystemClockFreq>
 8004f0e:	4604      	mov	r4, r0
 8004f10:	f7ff fb00 	bl	8004514 <LL_RCC_GetSysPrescaler>
 8004f14:	4603      	mov	r3, r0
 8004f16:	0a1b      	lsrs	r3, r3, #8
 8004f18:	f003 030f 	and.w	r3, r3, #15
 8004f1c:	4a43      	ldr	r2, [pc, #268]	@ (800502c <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8004f1e:	5cd3      	ldrb	r3, [r2, r3]
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	fa24 f303 	lsr.w	r3, r4, r3
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 f8e7 	bl	80050fc <RCC_GetHCLKClockFreq>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 f911 	bl	8005158 <RCC_GetPCLK2ClockFreq>
 8004f36:	6178      	str	r0, [r7, #20]
      break;
 8004f38:	e05b      	b.n	8004ff2 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8004f3a:	f000 f87d 	bl	8005038 <RCC_GetSystemClockFreq>
 8004f3e:	4604      	mov	r4, r0
 8004f40:	f7ff fae8 	bl	8004514 <LL_RCC_GetSysPrescaler>
 8004f44:	4603      	mov	r3, r0
 8004f46:	0a1b      	lsrs	r3, r3, #8
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	4a37      	ldr	r2, [pc, #220]	@ (800502c <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8004f4e:	5cd3      	ldrb	r3, [r2, r3]
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	fa24 f303 	lsr.w	r3, r4, r3
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 f8cf 	bl	80050fc <RCC_GetHCLKClockFreq>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 f8e1 	bl	8005128 <RCC_GetPCLK1ClockFreq>
 8004f66:	6178      	str	r0, [r7, #20]
      break;
 8004f68:	e043      	b.n	8004ff2 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 8004f6a:	f7ff fbf3 	bl	8004754 <LL_RCC_PLL2_IsReady>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d035      	beq.n	8004fe0 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8004f74:	f107 0308 	add.w	r3, r7, #8
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff fdfd 	bl	8004b78 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	617b      	str	r3, [r7, #20]
      }
      break;
 8004f82:	e02d      	b.n	8004fe0 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 8004f84:	f7ff fca2 	bl	80048cc <LL_RCC_PLL3_IsReady>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d02a      	beq.n	8004fe4 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8004f8e:	f107 0308 	add.w	r3, r7, #8
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fe88 	bl	8004ca8 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	617b      	str	r3, [r7, #20]
      }
      break;
 8004f9c:	e022      	b.n	8004fe4 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 8004f9e:	f7ff fa65 	bl	800446c <LL_RCC_HSI_IsReady>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01f      	beq.n	8004fe8 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8004fa8:	f7ff fa72 	bl	8004490 <LL_RCC_HSI_GetDivider>
 8004fac:	4603      	mov	r3, r0
 8004fae:	08db      	lsrs	r3, r3, #3
 8004fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8005030 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8004fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb6:	617b      	str	r3, [r7, #20]
      }
      break;
 8004fb8:	e016      	b.n	8004fe8 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 8004fba:	f7ff fa77 	bl	80044ac <LL_RCC_CSI_IsReady>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d013      	beq.n	8004fec <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8005034 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8004fc6:	617b      	str	r3, [r7, #20]
      }
      break;
 8004fc8:	e010      	b.n	8004fec <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 8004fca:	f7ff fa83 	bl	80044d4 <LL_RCC_LSE_IsReady>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00d      	beq.n	8004ff0 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 8004fd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fd8:	617b      	str	r3, [r7, #20]
      }
      break;
 8004fda:	e009      	b.n	8004ff0 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 8004fdc:	bf00      	nop
 8004fde:	e008      	b.n	8004ff2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8004fe0:	bf00      	nop
 8004fe2:	e006      	b.n	8004ff2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8004fe4:	bf00      	nop
 8004fe6:	e004      	b.n	8004ff2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8004fe8:	bf00      	nop
 8004fea:	e002      	b.n	8004ff2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8004fec:	bf00      	nop
 8004fee:	e000      	b.n	8004ff2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8004ff0:	bf00      	nop
  }

  return usart_frequency;
 8004ff2:	697b      	ldr	r3, [r7, #20]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd90      	pop	{r4, r7, pc}
 8004ffc:	07050308 	.word	0x07050308
 8005000:	07050008 	.word	0x07050008
 8005004:	07040308 	.word	0x07040308
 8005008:	07040008 	.word	0x07040008
 800500c:	07030308 	.word	0x07030308
 8005010:	07030008 	.word	0x07030008
 8005014:	07020308 	.word	0x07020308
 8005018:	07020008 	.word	0x07020008
 800501c:	07010308 	.word	0x07010308
 8005020:	07010008 	.word	0x07010008
 8005024:	07000008 	.word	0x07000008
 8005028:	07000308 	.word	0x07000308
 800502c:	08006938 	.word	0x08006938
 8005030:	03d09000 	.word	0x03d09000
 8005034:	003d0900 	.word	0x003d0900

08005038 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005042:	f7ff fa59 	bl	80044f8 <LL_RCC_GetSysClkSource>
 8005046:	4603      	mov	r3, r0
 8005048:	2b18      	cmp	r3, #24
 800504a:	d84b      	bhi.n	80050e4 <RCC_GetSystemClockFreq+0xac>
 800504c:	a201      	add	r2, pc, #4	@ (adr r2, 8005054 <RCC_GetSystemClockFreq+0x1c>)
 800504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005052:	bf00      	nop
 8005054:	080050b9 	.word	0x080050b9
 8005058:	080050e5 	.word	0x080050e5
 800505c:	080050e5 	.word	0x080050e5
 8005060:	080050e5 	.word	0x080050e5
 8005064:	080050e5 	.word	0x080050e5
 8005068:	080050e5 	.word	0x080050e5
 800506c:	080050e5 	.word	0x080050e5
 8005070:	080050e5 	.word	0x080050e5
 8005074:	080050cb 	.word	0x080050cb
 8005078:	080050e5 	.word	0x080050e5
 800507c:	080050e5 	.word	0x080050e5
 8005080:	080050e5 	.word	0x080050e5
 8005084:	080050e5 	.word	0x080050e5
 8005088:	080050e5 	.word	0x080050e5
 800508c:	080050e5 	.word	0x080050e5
 8005090:	080050e5 	.word	0x080050e5
 8005094:	080050d1 	.word	0x080050d1
 8005098:	080050e5 	.word	0x080050e5
 800509c:	080050e5 	.word	0x080050e5
 80050a0:	080050e5 	.word	0x080050e5
 80050a4:	080050e5 	.word	0x080050e5
 80050a8:	080050e5 	.word	0x080050e5
 80050ac:	080050e5 	.word	0x080050e5
 80050b0:	080050e5 	.word	0x080050e5
 80050b4:	080050d7 	.word	0x080050d7
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80050b8:	f7ff f9ea 	bl	8004490 <LL_RCC_HSI_GetDivider>
 80050bc:	4603      	mov	r3, r0
 80050be:	08db      	lsrs	r3, r3, #3
 80050c0:	4a0b      	ldr	r2, [pc, #44]	@ (80050f0 <RCC_GetSystemClockFreq+0xb8>)
 80050c2:	fa22 f303 	lsr.w	r3, r2, r3
 80050c6:	60fb      	str	r3, [r7, #12]
      break;
 80050c8:	e00d      	b.n	80050e6 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 80050ca:	4b0a      	ldr	r3, [pc, #40]	@ (80050f4 <RCC_GetSystemClockFreq+0xbc>)
 80050cc:	60fb      	str	r3, [r7, #12]
      break;
 80050ce:	e00a      	b.n	80050e6 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 80050d0:	4b09      	ldr	r3, [pc, #36]	@ (80050f8 <RCC_GetSystemClockFreq+0xc0>)
 80050d2:	60fb      	str	r3, [r7, #12]
      break;
 80050d4:	e007      	b.n	80050e6 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 80050d6:	463b      	mov	r3, r7
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff fcb5 	bl	8004a48 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	60fb      	str	r3, [r7, #12]
      break;
 80050e2:	e000      	b.n	80050e6 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 80050e4:	bf00      	nop
  }

  return frequency;
 80050e6:	68fb      	ldr	r3, [r7, #12]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	03d09000 	.word	0x03d09000
 80050f4:	003d0900 	.word	0x003d0900
 80050f8:	017d7840 	.word	0x017d7840

080050fc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005104:	f7ff fa14 	bl	8004530 <LL_RCC_GetAHBPrescaler>
 8005108:	4603      	mov	r3, r0
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	4a05      	ldr	r2, [pc, #20]	@ (8005124 <RCC_GetHCLKClockFreq+0x28>)
 8005110:	5cd3      	ldrb	r3, [r2, r3]
 8005112:	f003 031f 	and.w	r3, r3, #31
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	08006938 	.word	0x08006938

08005128 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005130:	f7ff fa0c 	bl	800454c <LL_RCC_GetAPB1Prescaler>
 8005134:	4603      	mov	r3, r0
 8005136:	091b      	lsrs	r3, r3, #4
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	4a05      	ldr	r2, [pc, #20]	@ (8005154 <RCC_GetPCLK1ClockFreq+0x2c>)
 800513e:	5cd3      	ldrb	r3, [r2, r3]
 8005140:	f003 031f 	and.w	r3, r3, #31
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	fa22 f303 	lsr.w	r3, r2, r3
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	08006938 	.word	0x08006938

08005158 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005160:	f7ff fa02 	bl	8004568 <LL_RCC_GetAPB2Prescaler>
 8005164:	4603      	mov	r3, r0
 8005166:	0a1b      	lsrs	r3, r3, #8
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	4a05      	ldr	r2, [pc, #20]	@ (8005184 <RCC_GetPCLK2ClockFreq+0x2c>)
 800516e:	5cd3      	ldrb	r3, [r2, r3]
 8005170:	f003 031f 	and.w	r3, r3, #31
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	fa22 f303 	lsr.w	r3, r2, r3
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	08006938 	.word	0x08006938

08005188 <LL_USART_IsEnabled>:
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <LL_USART_IsEnabled+0x18>
 800519c:	2301      	movs	r3, #1
 800519e:	e000      	b.n	80051a2 <LL_USART_IsEnabled+0x1a>
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <LL_USART_SetPrescaler>:
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051bc:	f023 030f 	bic.w	r3, r3, #15
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	b292      	uxth	r2, r2
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <LL_USART_SetStopBitsLength>:
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	605a      	str	r2, [r3, #4]
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <LL_USART_SetHWFlowCtrl>:
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	609a      	str	r2, [r3, #8]
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
	...

08005224 <LL_USART_SetBaudRate>:
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b0b      	cmp	r3, #11
 8005236:	d83c      	bhi.n	80052b2 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d039      	beq.n	80052b2 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005244:	d122      	bne.n	800528c <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	461a      	mov	r2, r3
 800524c:	4b1c      	ldr	r3, [pc, #112]	@ (80052c0 <LL_USART_SetBaudRate+0x9c>)
 800524e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	005a      	lsls	r2, r3, #1
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	085b      	lsrs	r3, r3, #1
 800525e:	441a      	add	r2, r3
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	fbb2 f3f3 	udiv	r3, r2, r3
 8005266:	b29b      	uxth	r3, r3
 8005268:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8005270:	4013      	ands	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	085b      	lsrs	r3, r3, #1
 8005278:	b29b      	uxth	r3, r3
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	60da      	str	r2, [r3, #12]
}
 800528a:	e012      	b.n	80052b2 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	b2db      	uxtb	r3, r3
 8005290:	461a      	mov	r2, r3
 8005292:	4b0b      	ldr	r3, [pc, #44]	@ (80052c0 <LL_USART_SetBaudRate+0x9c>)
 8005294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	fbb2 f2f3 	udiv	r2, r2, r3
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	085b      	lsrs	r3, r3, #1
 80052a2:	441a      	add	r2, r3
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	60da      	str	r2, [r3, #12]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	08006948 	.word	0x08006948

080052c4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff ff56 	bl	8005188 <LL_USART_IsEnabled>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d17f      	bne.n	80053e2 <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	4b41      	ldr	r3, [pc, #260]	@ (80053ec <LL_USART_Init+0x128>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	6891      	ldr	r1, [r2, #8]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	6912      	ldr	r2, [r2, #16]
 80052f2:	4311      	orrs	r1, r2
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	6952      	ldr	r2, [r2, #20]
 80052f8:	4311      	orrs	r1, r2
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	69d2      	ldr	r2, [r2, #28]
 80052fe:	430a      	orrs	r2, r1
 8005300:	431a      	orrs	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	4619      	mov	r1, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff ff62 	bl	80051d6 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	4619      	mov	r1, r3
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7ff ff6f 	bl	80051fc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a33      	ldr	r2, [pc, #204]	@ (80053f0 <LL_USART_Init+0x12c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d104      	bne.n	8005330 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8005326:	4833      	ldr	r0, [pc, #204]	@ (80053f4 <LL_USART_Init+0x130>)
 8005328:	f7ff fd98 	bl	8004e5c <LL_RCC_GetUSARTClockFreq>
 800532c:	60b8      	str	r0, [r7, #8]
 800532e:	e03d      	b.n	80053ac <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a31      	ldr	r2, [pc, #196]	@ (80053f8 <LL_USART_Init+0x134>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d104      	bne.n	8005342 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8005338:	4830      	ldr	r0, [pc, #192]	@ (80053fc <LL_USART_Init+0x138>)
 800533a:	f7ff fd8f 	bl	8004e5c <LL_RCC_GetUSARTClockFreq>
 800533e:	60b8      	str	r0, [r7, #8]
 8005340:	e034      	b.n	80053ac <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a2e      	ldr	r2, [pc, #184]	@ (8005400 <LL_USART_Init+0x13c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d104      	bne.n	8005354 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800534a:	482c      	ldr	r0, [pc, #176]	@ (80053fc <LL_USART_Init+0x138>)
 800534c:	f7ff fd86 	bl	8004e5c <LL_RCC_GetUSARTClockFreq>
 8005350:	60b8      	str	r0, [r7, #8]
 8005352:	e02b      	b.n	80053ac <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a2b      	ldr	r2, [pc, #172]	@ (8005404 <LL_USART_Init+0x140>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d104      	bne.n	8005366 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800535c:	4827      	ldr	r0, [pc, #156]	@ (80053fc <LL_USART_Init+0x138>)
 800535e:	f7ff fd7d 	bl	8004e5c <LL_RCC_GetUSARTClockFreq>
 8005362:	60b8      	str	r0, [r7, #8]
 8005364:	e022      	b.n	80053ac <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a27      	ldr	r2, [pc, #156]	@ (8005408 <LL_USART_Init+0x144>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d104      	bne.n	8005378 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800536e:	4823      	ldr	r0, [pc, #140]	@ (80053fc <LL_USART_Init+0x138>)
 8005370:	f7ff fd74 	bl	8004e5c <LL_RCC_GetUSARTClockFreq>
 8005374:	60b8      	str	r0, [r7, #8]
 8005376:	e019      	b.n	80053ac <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a24      	ldr	r2, [pc, #144]	@ (800540c <LL_USART_Init+0x148>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d104      	bne.n	800538a <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8005380:	481c      	ldr	r0, [pc, #112]	@ (80053f4 <LL_USART_Init+0x130>)
 8005382:	f7ff fd6b 	bl	8004e5c <LL_RCC_GetUSARTClockFreq>
 8005386:	60b8      	str	r0, [r7, #8]
 8005388:	e010      	b.n	80053ac <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a20      	ldr	r2, [pc, #128]	@ (8005410 <LL_USART_Init+0x14c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d104      	bne.n	800539c <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8005392:	481a      	ldr	r0, [pc, #104]	@ (80053fc <LL_USART_Init+0x138>)
 8005394:	f7ff fd62 	bl	8004e5c <LL_RCC_GetUSARTClockFreq>
 8005398:	60b8      	str	r0, [r7, #8]
 800539a:	e007      	b.n	80053ac <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a1d      	ldr	r2, [pc, #116]	@ (8005414 <LL_USART_Init+0x150>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d103      	bne.n	80053ac <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80053a4:	4815      	ldr	r0, [pc, #84]	@ (80053fc <LL_USART_Init+0x138>)
 80053a6:	f7ff fd59 	bl	8004e5c <LL_RCC_GetUSARTClockFreq>
 80053aa:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d011      	beq.n	80053d6 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00d      	beq.n	80053d6 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 80053ba:	2300      	movs	r3, #0
 80053bc:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	460b      	mov	r3, r1
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff ff27 	bl	8005224 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4619      	mov	r1, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff fee6 	bl	80051ae <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	efff69f3 	.word	0xefff69f3
 80053f0:	40011000 	.word	0x40011000
 80053f4:	07000308 	.word	0x07000308
 80053f8:	40004400 	.word	0x40004400
 80053fc:	07000008 	.word	0x07000008
 8005400:	40004800 	.word	0x40004800
 8005404:	40004c00 	.word	0x40004c00
 8005408:	40005000 	.word	0x40005000
 800540c:	40011400 	.word	0x40011400
 8005410:	40007800 	.word	0x40007800
 8005414:	40007c00 	.word	0x40007c00

08005418 <rbuffer_init>:
 */

// RINGBUFFER FUNCTIONS
#include "RingBuffer.h"

void rbuffer_init(volatile ringbuffer_t *rb) {
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8005420:	b672      	cpsid	i
}
 8005422:	bf00      	nop
	__disable_irq();
	rb->in = 0;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	rb->out = 0;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	rb->count = 0;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 800543c:	b662      	cpsie	i
}
 800543e:	bf00      	nop
	__enable_irq();
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <rbuffer_full>:

uint8_t rbuffer_count(volatile ringbuffer_t *rb) {
	return rb->count;
}

bool rbuffer_full(volatile ringbuffer_t *rb) {
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	return (rb->count == (uint16_t) RingBufferSize);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800545a:	b29b      	uxth	r3, r3
 800545c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005460:	bf0c      	ite	eq
 8005462:	2301      	moveq	r3, #1
 8005464:	2300      	movne	r3, #0
 8005466:	b2db      	uxtb	r3, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <rbuffer_empty>:

bool rbuffer_empty(volatile ringbuffer_t *rb) {
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	return (rb->count == 0);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	bf0c      	ite	eq
 8005488:	2301      	moveq	r3, #1
 800548a:	2300      	movne	r3, #0
 800548c:	b2db      	uxtb	r3, r3
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <rbuffer_insert>:

void rbuffer_insert(char data, volatile ringbuffer_t *rb) {
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	4603      	mov	r3, r0
 80054a2:	6039      	str	r1, [r7, #0]
 80054a4:	71fb      	strb	r3, [r7, #7]
	*(rb->buffer + rb->in) = data;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	f8b2 2100 	ldrh.w	r2, [r2, #256]	@ 0x100
 80054ae:	b292      	uxth	r2, r2
 80054b0:	4413      	add	r3, r2
 80054b2:	79fa      	ldrb	r2, [r7, #7]
 80054b4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80054b6:	b672      	cpsid	i
}
 80054b8:	bf00      	nop
	__disable_irq();
	rb->in = (rb->in + 1) & ((uint16_t) RingBufferSize - 1);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3301      	adds	r3, #1
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	rb->count++;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3301      	adds	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 80054e2:	b662      	cpsie	i
}
 80054e4:	bf00      	nop
	__enable_irq();
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <rbuffer_remove>:

char rbuffer_remove(volatile ringbuffer_t *rb) {
 80054f2:	b480      	push	{r7}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
	char data = *(rb->buffer + rb->out);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 8005502:	b292      	uxth	r2, r2
 8005504:	4413      	add	r3, r2
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 800550a:	b672      	cpsid	i
}
 800550c:	bf00      	nop
	__disable_irq();
	rb->out = (rb->out + 1) & ((uint16_t) RingBufferSize - 1);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8005514:	b29b      	uxth	r3, r3
 8005516:	3301      	adds	r3, #1
 8005518:	b29b      	uxth	r3, r3
 800551a:	b2db      	uxtb	r3, r3
 800551c:	b29a      	uxth	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	rb->count--;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800552a:	b29b      	uxth	r3, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 8005536:	b662      	cpsie	i
}
 8005538:	bf00      	nop
	__enable_irq();
	return data;
 800553a:	7bfb      	ldrb	r3, [r7, #15]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <LL_USART_IsActiveFlag_FE>:
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b02      	cmp	r3, #2
 800555a:	d101      	bne.n	8005560 <LL_USART_IsActiveFlag_FE+0x18>
 800555c:	2301      	movs	r3, #1
 800555e:	e000      	b.n	8005562 <LL_USART_IsActiveFlag_FE+0x1a>
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <LL_USART_IsActiveFlag_NE>:
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b04      	cmp	r3, #4
 8005580:	d101      	bne.n	8005586 <LL_USART_IsActiveFlag_NE+0x18>
 8005582:	2301      	movs	r3, #1
 8005584:	e000      	b.n	8005588 <LL_USART_IsActiveFlag_NE+0x1a>
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <LL_USART_IsActiveFlag_ORE>:
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d101      	bne.n	80055ac <LL_USART_IsActiveFlag_ORE+0x18>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <LL_USART_IsActiveFlag_ORE+0x1a>
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d101      	bne.n	80055d2 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f0:	2b80      	cmp	r3, #128	@ 0x80
 80055f2:	d101      	bne.n	80055f8 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	621a      	str	r2, [r3, #32]
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2204      	movs	r2, #4
 800562c:	621a      	str	r2, [r3, #32]
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2208      	movs	r2, #8
 8005646:	621a      	str	r2, [r3, #32]
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8005654:	b480      	push	{r7}
 8005656:	b089      	sub	sp, #36	@ 0x24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	e853 3f00 	ldrex	r3, [r3]
 8005666:	60bb      	str	r3, [r7, #8]
   return(result);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f043 0320 	orr.w	r3, r3, #32
 800566e:	61fb      	str	r3, [r7, #28]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	61ba      	str	r2, [r7, #24]
 8005676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6979      	ldr	r1, [r7, #20]
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	613b      	str	r3, [r7, #16]
   return(result);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e9      	bne.n	800565c <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	3724      	adds	r7, #36	@ 0x24
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <LL_USART_EnableIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8005696:	b480      	push	{r7}
 8005698:	b089      	sub	sp, #36	@ 0x24
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056b0:	61fb      	str	r3, [r7, #28]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	61ba      	str	r2, [r7, #24]
 80056b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	6979      	ldr	r1, [r7, #20]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	613b      	str	r3, [r7, #16]
   return(result);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e9      	bne.n	800569e <LL_USART_EnableIT_TXE_TXFNF+0x8>
}
 80056ca:	bf00      	nop
 80056cc:	bf00      	nop
 80056ce:	3724      	adds	r7, #36	@ 0x24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <LL_USART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 80056d8:	b480      	push	{r7}
 80056da:	b089      	sub	sp, #36	@ 0x24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056f2:	61fb      	str	r3, [r7, #28]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	61ba      	str	r2, [r7, #24]
 80056fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	6979      	ldr	r1, [r7, #20]
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	e841 2300 	strex	r3, r2, [r1]
 8005704:	613b      	str	r3, [r7, #16]
   return(result);
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1e9      	bne.n	80056e0 <LL_USART_DisableIT_TXE_TXFNF+0x8>
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	3724      	adds	r7, #36	@ 0x24
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <LL_USART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0320 	and.w	r3, r3, #32
 800572a:	2b20      	cmp	r3, #32
 800572c:	d101      	bne.n	8005732 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574c:	b2db      	uxtb	r3, r3
}
 800574e:	4618      	mov	r0, r3
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	460b      	mov	r3, r1
 8005764:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8005766:	78fa      	ldrb	r2, [r7, #3]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <USART1_IRQ>:
usart_meta_t *p_USART1_meta = &USART1_meta;

// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
// USART FUNCTIONS

void USART1_IRQ(void) {
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
    uint8_t data;
    if (LL_USART_IsActiveFlag_TXE(USART1)) {
 800577e:	4834      	ldr	r0, [pc, #208]	@ (8005850 <USART1_IRQ+0xd8>)
 8005780:	f7ff ff2e 	bl	80055e0 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01e      	beq.n	80057c8 <USART1_IRQ+0x50>
        if (!rbuffer_empty(&p_USART1_meta->rb_tx)) {
 800578a:	4b32      	ldr	r3, [pc, #200]	@ (8005854 <USART1_IRQ+0xdc>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff fe6e 	bl	8005474 <rbuffer_empty>
 8005798:	4603      	mov	r3, r0
 800579a:	f083 0301 	eor.w	r3, r3, #1
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00e      	beq.n	80057c2 <USART1_IRQ+0x4a>
            data = rbuffer_remove(&p_USART1_meta->rb_tx);
 80057a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005854 <USART1_IRQ+0xdc>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff fea0 	bl	80054f2 <rbuffer_remove>
 80057b2:	4603      	mov	r3, r0
 80057b4:	71fb      	strb	r3, [r7, #7]
            LL_USART_TransmitData8(USART1, (uint8_t)data);
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	4619      	mov	r1, r3
 80057ba:	4825      	ldr	r0, [pc, #148]	@ (8005850 <USART1_IRQ+0xd8>)
 80057bc:	f7ff ffcd 	bl	800575a <LL_USART_TransmitData8>
 80057c0:	e002      	b.n	80057c8 <USART1_IRQ+0x50>
        } else {
            LL_USART_DisableIT_TXE(USART1);
 80057c2:	4823      	ldr	r0, [pc, #140]	@ (8005850 <USART1_IRQ+0xd8>)
 80057c4:	f7ff ff88 	bl	80056d8 <LL_USART_DisableIT_TXE_TXFNF>
        }
    }
    if ((LL_USART_IsActiveFlag_RXNE(USART1) != RESET) && (LL_USART_IsEnabledIT_RXNE(USART1) != RESET)) {
 80057c8:	4821      	ldr	r0, [pc, #132]	@ (8005850 <USART1_IRQ+0xd8>)
 80057ca:	f7ff fef6 	bl	80055ba <LL_USART_IsActiveFlag_RXNE_RXFNE>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d03a      	beq.n	800584a <USART1_IRQ+0xd2>
 80057d4:	481e      	ldr	r0, [pc, #120]	@ (8005850 <USART1_IRQ+0xd8>)
 80057d6:	f7ff ffa0 	bl	800571a <LL_USART_IsEnabledIT_RXNE_RXFNE>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d034      	beq.n	800584a <USART1_IRQ+0xd2>
        unsigned char data = LL_USART_ReceiveData8(USART1);
 80057e0:	481b      	ldr	r0, [pc, #108]	@ (8005850 <USART1_IRQ+0xd8>)
 80057e2:	f7ff ffad 	bl	8005740 <LL_USART_ReceiveData8>
 80057e6:	4603      	mov	r3, r0
 80057e8:	71bb      	strb	r3, [r7, #6]

        if ((LL_USART_IsActiveFlag_ORE(USART1) != RESET) ||
 80057ea:	4819      	ldr	r0, [pc, #100]	@ (8005850 <USART1_IRQ+0xd8>)
 80057ec:	f7ff fed2 	bl	8005594 <LL_USART_IsActiveFlag_ORE>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <USART1_IRQ+0x96>
            (LL_USART_IsActiveFlag_FE(USART1) != RESET) ||
 80057f6:	4816      	ldr	r0, [pc, #88]	@ (8005850 <USART1_IRQ+0xd8>)
 80057f8:	f7ff fea6 	bl	8005548 <LL_USART_IsActiveFlag_FE>
 80057fc:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(USART1) != RESET) ||
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d105      	bne.n	800580e <USART1_IRQ+0x96>
            (LL_USART_IsActiveFlag_NE(USART1) != RESET)) {
 8005802:	4813      	ldr	r0, [pc, #76]	@ (8005850 <USART1_IRQ+0xd8>)
 8005804:	f7ff feb3 	bl	800556e <LL_USART_IsActiveFlag_NE>
 8005808:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(USART1) != RESET) ||
 800580a:	2b00      	cmp	r3, #0
 800580c:	d009      	beq.n	8005822 <USART1_IRQ+0xaa>
            LL_USART_ClearFlag_ORE(USART1);
 800580e:	4810      	ldr	r0, [pc, #64]	@ (8005850 <USART1_IRQ+0xd8>)
 8005810:	f7ff ff13 	bl	800563a <LL_USART_ClearFlag_ORE>
            LL_USART_ClearFlag_FE(USART1);
 8005814:	480e      	ldr	r0, [pc, #56]	@ (8005850 <USART1_IRQ+0xd8>)
 8005816:	f7ff fef6 	bl	8005606 <LL_USART_ClearFlag_FE>
            LL_USART_ClearFlag_NE(USART1);
 800581a:	480d      	ldr	r0, [pc, #52]	@ (8005850 <USART1_IRQ+0xd8>)
 800581c:	f7ff ff00 	bl	8005620 <LL_USART_ClearFlag_NE>
        } else {
            if (!rbuffer_full(&p_USART1_meta->rb_rx)) {
                rbuffer_insert(data, &p_USART1_meta->rb_rx);
            }
        }
        return;
 8005820:	e012      	b.n	8005848 <USART1_IRQ+0xd0>
            if (!rbuffer_full(&p_USART1_meta->rb_rx)) {
 8005822:	4b0c      	ldr	r3, [pc, #48]	@ (8005854 <USART1_IRQ+0xdc>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff fe10 	bl	800544c <rbuffer_full>
 800582c:	4603      	mov	r3, r0
 800582e:	f083 0301 	eor.w	r3, r3, #1
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d007      	beq.n	8005848 <USART1_IRQ+0xd0>
                rbuffer_insert(data, &p_USART1_meta->rb_rx);
 8005838:	4b06      	ldr	r3, [pc, #24]	@ (8005854 <USART1_IRQ+0xdc>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	79bb      	ldrb	r3, [r7, #6]
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff fe29 	bl	800549a <rbuffer_insert>
        return;
 8005848:	bf00      	nop
    }
}
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40011000 	.word	0x40011000
 8005854:	2400003c 	.word	0x2400003c

08005858 <USART1_init>:

void USART1_init(void) {
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
    rbuffer_init(&p_USART1_meta->rb_tx); // Init Tx buffer
 800585e:	4b10      	ldr	r3, [pc, #64]	@ (80058a0 <USART1_init+0x48>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff fdd6 	bl	8005418 <rbuffer_init>
    rbuffer_init(&p_USART1_meta->rb_rx); // Init Rx buffer
 800586c:	4b0c      	ldr	r3, [pc, #48]	@ (80058a0 <USART1_init+0x48>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff fdd1 	bl	8005418 <rbuffer_init>
    LL_USART_EnableIT_RXNE(USART1);
 8005876:	480b      	ldr	r0, [pc, #44]	@ (80058a4 <USART1_init+0x4c>)
 8005878:	f7ff feec 	bl	8005654 <LL_USART_EnableIT_RXNE_RXFNE>
    uint8_t status[3] = {1, 'O', 'K'};
 800587c:	4a0a      	ldr	r2, [pc, #40]	@ (80058a8 <USART1_init+0x50>)
 800587e:	1d3b      	adds	r3, r7, #4
 8005880:	6812      	ldr	r2, [r2, #0]
 8005882:	4611      	mov	r1, r2
 8005884:	8019      	strh	r1, [r3, #0]
 8005886:	3302      	adds	r3, #2
 8005888:	0c12      	lsrs	r2, r2, #16
 800588a:	701a      	strb	r2, [r3, #0]
    USART1_send_array((const char*)status, 3);
 800588c:	1d3b      	adds	r3, r7, #4
 800588e:	2103      	movs	r1, #3
 8005890:	4618      	mov	r0, r3
 8005892:	f000 f82f 	bl	80058f4 <USART1_send_array>
}
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	2400003c 	.word	0x2400003c
 80058a4:	40011000 	.word	0x40011000
 80058a8:	08006920 	.word	0x08006920

080058ac <USART1_send_char>:

void USART1_send_char(char c) {
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	4603      	mov	r3, r0
 80058b4:	71fb      	strb	r3, [r7, #7]
    while (rbuffer_full(&p_USART1_meta->rb_tx))
 80058b6:	bf00      	nop
 80058b8:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <USART1_send_char+0x40>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff fdc3 	bl	800544c <rbuffer_full>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1f5      	bne.n	80058b8 <USART1_send_char+0xc>
        ;
    rbuffer_insert(c, &p_USART1_meta->rb_tx);
 80058cc:	4b07      	ldr	r3, [pc, #28]	@ (80058ec <USART1_send_char+0x40>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f503 7283 	add.w	r2, r3, #262	@ 0x106
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	4611      	mov	r1, r2
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff fdde 	bl	800549a <rbuffer_insert>
    LL_USART_EnableIT_TXE(USART1);
 80058de:	4804      	ldr	r0, [pc, #16]	@ (80058f0 <USART1_send_char+0x44>)
 80058e0:	f7ff fed9 	bl	8005696 <LL_USART_EnableIT_TXE_TXFNF>
}
 80058e4:	bf00      	nop
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	2400003c 	.word	0x2400003c
 80058f0:	40011000 	.word	0x40011000

080058f4 <USART1_send_array>:
    while (*str) {
        USART1_send_char(*str++);
    }
}

void USART1_send_array(const char *str, uint8_t len) {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	70fb      	strb	r3, [r7, #3]
    uint8_t udx;
    for (udx = 0; udx < len; udx++) {
 8005900:	2300      	movs	r3, #0
 8005902:	73fb      	strb	r3, [r7, #15]
 8005904:	e009      	b.n	800591a <USART1_send_array+0x26>
        USART1_send_char(*str++);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff ffcc 	bl	80058ac <USART1_send_char>
    for (udx = 0; udx < len; udx++) {
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	3301      	adds	r3, #1
 8005918:	73fb      	strb	r3, [r7, #15]
 800591a:	7bfa      	ldrb	r2, [r7, #15]
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	429a      	cmp	r2, r3
 8005920:	d3f1      	bcc.n	8005906 <USART1_send_array+0x12>
    }
}
 8005922:	bf00      	nop
 8005924:	bf00      	nop
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <LL_APB2_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8005934:	4b06      	ldr	r3, [pc, #24]	@ (8005950 <LL_APB2_GRP1_ForceReset+0x24>)
 8005936:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800593a:	4905      	ldr	r1, [pc, #20]	@ (8005950 <LL_APB2_GRP1_ForceReset+0x24>)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4313      	orrs	r3, r2
 8005940:	f8c1 3098 	str.w	r3, [r1, #152]	@ 0x98
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	58024400 	.word	0x58024400

08005954 <LL_APB2_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800595c:	4b07      	ldr	r3, [pc, #28]	@ (800597c <LL_APB2_GRP1_ReleaseReset+0x28>)
 800595e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	43db      	mvns	r3, r3
 8005966:	4905      	ldr	r1, [pc, #20]	@ (800597c <LL_APB2_GRP1_ReleaseReset+0x28>)
 8005968:	4013      	ands	r3, r2
 800596a:	f8c1 3098 	str.w	r3, [r1, #152]	@ 0x98
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	58024400 	.word	0x58024400

08005980 <BL_UART_Fetch_Host_Command>:
bool receiving_frame = false;
uint16_t frame_timeout = 0;

/************************************ Software Interfaces Implementations ************************************/
void BL_UART_Fetch_Host_Command(void*)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
    uint8_t data;
    if (receiving_frame)
 8005988:	4b64      	ldr	r3, [pc, #400]	@ (8005b1c <BL_UART_Fetch_Host_Command+0x19c>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80b4 	beq.w	8005afa <BL_UART_Fetch_Host_Command+0x17a>
    {
        if (frame_timeout++ > 500)
 8005992:	4b63      	ldr	r3, [pc, #396]	@ (8005b20 <BL_UART_Fetch_Host_Command+0x1a0>)
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	b291      	uxth	r1, r2
 800599a:	4a61      	ldr	r2, [pc, #388]	@ (8005b20 <BL_UART_Fetch_Host_Command+0x1a0>)
 800599c:	8011      	strh	r1, [r2, #0]
 800599e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80059a2:	f240 80aa 	bls.w	8005afa <BL_UART_Fetch_Host_Command+0x17a>
        {
            receiving_frame = false;
 80059a6:	4b5d      	ldr	r3, [pc, #372]	@ (8005b1c <BL_UART_Fetch_Host_Command+0x19c>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]
            frame_length = 0;
 80059ac:	4b5d      	ldr	r3, [pc, #372]	@ (8005b24 <BL_UART_Fetch_Host_Command+0x1a4>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	701a      	strb	r2, [r3, #0]
            frame_index = 0;
 80059b2:	4b5d      	ldr	r3, [pc, #372]	@ (8005b28 <BL_UART_Fetch_Host_Command+0x1a8>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	701a      	strb	r2, [r3, #0]
            frame_timeout = 0;
 80059b8:	4b59      	ldr	r3, [pc, #356]	@ (8005b20 <BL_UART_Fetch_Host_Command+0x1a0>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	801a      	strh	r2, [r3, #0]
        }
    }
    while (!rbuffer_empty(&p_USART1_meta->rb_rx))
 80059be:	e09c      	b.n	8005afa <BL_UART_Fetch_Host_Command+0x17a>
    {
        data = rbuffer_remove(&p_USART1_meta->rb_rx);
 80059c0:	4b5a      	ldr	r3, [pc, #360]	@ (8005b2c <BL_UART_Fetch_Host_Command+0x1ac>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7ff fd94 	bl	80054f2 <rbuffer_remove>
 80059ca:	4603      	mov	r3, r0
 80059cc:	73fb      	strb	r3, [r7, #15]
        if (!receiving_frame)
 80059ce:	4b53      	ldr	r3, [pc, #332]	@ (8005b1c <BL_UART_Fetch_Host_Command+0x19c>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	f083 0301 	eor.w	r3, r3, #1
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d01f      	beq.n	8005a1c <BL_UART_Fetch_Host_Command+0x9c>
        {
            // Nhận byte đầu tiên (FRAME LENGTH)
            frame_timeout = 0;
 80059dc:	4b50      	ldr	r3, [pc, #320]	@ (8005b20 <BL_UART_Fetch_Host_Command+0x1a0>)
 80059de:	2200      	movs	r2, #0
 80059e0:	801a      	strh	r2, [r3, #0]
            frame_length = data;
 80059e2:	4a50      	ldr	r2, [pc, #320]	@ (8005b24 <BL_UART_Fetch_Host_Command+0x1a4>)
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	7013      	strb	r3, [r2, #0]
            if (frame_length > 0 && frame_length < 255)
 80059e8:	4b4e      	ldr	r3, [pc, #312]	@ (8005b24 <BL_UART_Fetch_Host_Command+0x1a4>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00e      	beq.n	8005a0e <BL_UART_Fetch_Host_Command+0x8e>
 80059f0:	4b4c      	ldr	r3, [pc, #304]	@ (8005b24 <BL_UART_Fetch_Host_Command+0x1a4>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2bff      	cmp	r3, #255	@ 0xff
 80059f6:	d00a      	beq.n	8005a0e <BL_UART_Fetch_Host_Command+0x8e>
            {
                BL_Host_Buffer[0] = frame_length;
 80059f8:	4b4a      	ldr	r3, [pc, #296]	@ (8005b24 <BL_UART_Fetch_Host_Command+0x1a4>)
 80059fa:	781a      	ldrb	r2, [r3, #0]
 80059fc:	4b4c      	ldr	r3, [pc, #304]	@ (8005b30 <BL_UART_Fetch_Host_Command+0x1b0>)
 80059fe:	701a      	strb	r2, [r3, #0]
                frame_index = 1;
 8005a00:	4b49      	ldr	r3, [pc, #292]	@ (8005b28 <BL_UART_Fetch_Host_Command+0x1a8>)
 8005a02:	2201      	movs	r2, #1
 8005a04:	701a      	strb	r2, [r3, #0]
                receiving_frame = true;
 8005a06:	4b45      	ldr	r3, [pc, #276]	@ (8005b1c <BL_UART_Fetch_Host_Command+0x19c>)
 8005a08:	2201      	movs	r2, #1
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	e075      	b.n	8005afa <BL_UART_Fetch_Host_Command+0x17a>
            }
            else
            {
                // Nếu frame_length không hợp lệ, reset trạng thái
                frame_index = 0;
 8005a0e:	4b46      	ldr	r3, [pc, #280]	@ (8005b28 <BL_UART_Fetch_Host_Command+0x1a8>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	701a      	strb	r2, [r3, #0]
                receiving_frame = false;
 8005a14:	4b41      	ldr	r3, [pc, #260]	@ (8005b1c <BL_UART_Fetch_Host_Command+0x19c>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	e06e      	b.n	8005afa <BL_UART_Fetch_Host_Command+0x17a>
            }
        }
        else
        {
            BL_Host_Buffer[frame_index++] = data;
 8005a1c:	4b42      	ldr	r3, [pc, #264]	@ (8005b28 <BL_UART_Fetch_Host_Command+0x1a8>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	b2d1      	uxtb	r1, r2
 8005a24:	4a40      	ldr	r2, [pc, #256]	@ (8005b28 <BL_UART_Fetch_Host_Command+0x1a8>)
 8005a26:	7011      	strb	r1, [r2, #0]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4a41      	ldr	r2, [pc, #260]	@ (8005b30 <BL_UART_Fetch_Host_Command+0x1b0>)
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	5453      	strb	r3, [r2, r1]

            if (frame_index >= frame_length + 1)
 8005a30:	4b3c      	ldr	r3, [pc, #240]	@ (8005b24 <BL_UART_Fetch_Host_Command+0x1a4>)
 8005a32:	781a      	ldrb	r2, [r3, #0]
 8005a34:	4b3c      	ldr	r3, [pc, #240]	@ (8005b28 <BL_UART_Fetch_Host_Command+0x1a8>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d25e      	bcs.n	8005afa <BL_UART_Fetch_Host_Command+0x17a>
            {
                receiving_frame = false;
 8005a3c:	4b37      	ldr	r3, [pc, #220]	@ (8005b1c <BL_UART_Fetch_Host_Command+0x19c>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
                frame_length = 0;
 8005a42:	4b38      	ldr	r3, [pc, #224]	@ (8005b24 <BL_UART_Fetch_Host_Command+0x1a4>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]
                uint16_t Host_CMD_Packet_Len = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	81bb      	strh	r3, [r7, #12]
                uint32_t Host_CRC32 = 0;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60bb      	str	r3, [r7, #8]
                /* Extract the CRC32 and packet length sent by the HOST */
                Host_CMD_Packet_Len = BL_Host_Buffer[0] + 1;
 8005a50:	4b37      	ldr	r3, [pc, #220]	@ (8005b30 <BL_UART_Fetch_Host_Command+0x1b0>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	3301      	adds	r3, #1
 8005a56:	81bb      	strh	r3, [r7, #12]
                Host_CRC32 = *((uint32_t*) ((BL_Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8005a58:	89bb      	ldrh	r3, [r7, #12]
 8005a5a:	3b04      	subs	r3, #4
 8005a5c:	4a34      	ldr	r2, [pc, #208]	@ (8005b30 <BL_UART_Fetch_Host_Command+0x1b0>)
 8005a5e:	4413      	add	r3, r2
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60bb      	str	r3, [r7, #8]
                if ((Bootloader_CRC_Verify((uint8_t*) &BL_Host_Buffer[0], Host_CMD_Packet_Len - 4, Host_CRC32) == CRC_VERIFICATION_FAILED)&&
 8005a64:	89bb      	ldrh	r3, [r7, #12]
 8005a66:	3b04      	subs	r3, #4
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4830      	ldr	r0, [pc, #192]	@ (8005b30 <BL_UART_Fetch_Host_Command+0x1b0>)
 8005a6e:	f000 fb65 	bl	800613c <Bootloader_CRC_Verify>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d105      	bne.n	8005a84 <BL_UART_Fetch_Host_Command+0x104>
					(BL_Host_Buffer[1] != CBL_CHECK_CONNECTION))
 8005a78:	4b2d      	ldr	r3, [pc, #180]	@ (8005b30 <BL_UART_Fetch_Host_Command+0x1b0>)
 8005a7a:	785b      	ldrb	r3, [r3, #1]
                if ((Bootloader_CRC_Verify((uint8_t*) &BL_Host_Buffer[0], Host_CMD_Packet_Len - 4, Host_CRC32) == CRC_VERIFICATION_FAILED)&&
 8005a7c:	2b62      	cmp	r3, #98	@ 0x62
 8005a7e:	d001      	beq.n	8005a84 <BL_UART_Fetch_Host_Command+0x104>
                {
                    Bootloader_Send_NACK();
 8005a80:	f000 fb94 	bl	80061ac <Bootloader_Send_NACK>
                }
                switch (BL_Host_Buffer[1])
 8005a84:	4b2a      	ldr	r3, [pc, #168]	@ (8005b30 <BL_UART_Fetch_Host_Command+0x1b0>)
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	2b17      	cmp	r3, #23
 8005a8a:	dc17      	bgt.n	8005abc <BL_UART_Fetch_Host_Command+0x13c>
 8005a8c:	2b10      	cmp	r3, #16
 8005a8e:	db33      	blt.n	8005af8 <BL_UART_Fetch_Host_Command+0x178>
 8005a90:	3b10      	subs	r3, #16
 8005a92:	2b07      	cmp	r3, #7
 8005a94:	d830      	bhi.n	8005af8 <BL_UART_Fetch_Host_Command+0x178>
 8005a96:	a201      	add	r2, pc, #4	@ (adr r2, 8005a9c <BL_UART_Fetch_Host_Command+0x11c>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005ac3 	.word	0x08005ac3
 8005aa0:	08005af9 	.word	0x08005af9
 8005aa4:	08005acb 	.word	0x08005acb
 8005aa8:	08005ad1 	.word	0x08005ad1
 8005aac:	08005ad9 	.word	0x08005ad9
 8005ab0:	08005af9 	.word	0x08005af9
 8005ab4:	08005ae9 	.word	0x08005ae9
 8005ab8:	08005ae1 	.word	0x08005ae1
 8005abc:	2b62      	cmp	r3, #98	@ 0x62
 8005abe:	d017      	beq.n	8005af0 <BL_UART_Fetch_Host_Command+0x170>
						break;
					case CBL_CHECK_CONNECTION:
						Bootloader_check_connection(BL_Host_Buffer);
						break;
					default:
						break;
 8005ac0:	e01a      	b.n	8005af8 <BL_UART_Fetch_Host_Command+0x178>
						Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 8005ac2:	481b      	ldr	r0, [pc, #108]	@ (8005b30 <BL_UART_Fetch_Host_Command+0x1b0>)
 8005ac4:	f000 f836 	bl	8005b34 <Bootloader_Get_Chip_Identification_Number>
						break;
 8005ac8:	e017      	b.n	8005afa <BL_UART_Fetch_Host_Command+0x17a>
						Bootloader_Jump_To_User_App();
 8005aca:	f000 f977 	bl	8005dbc <Bootloader_Jump_To_User_App>
						break;
 8005ace:	e014      	b.n	8005afa <BL_UART_Fetch_Host_Command+0x17a>
						Bootloader_Erase_Flash(BL_Host_Buffer);
 8005ad0:	4817      	ldr	r0, [pc, #92]	@ (8005b30 <BL_UART_Fetch_Host_Command+0x1b0>)
 8005ad2:	f000 f9f5 	bl	8005ec0 <Bootloader_Erase_Flash>
						break;
 8005ad6:	e010      	b.n	8005afa <BL_UART_Fetch_Host_Command+0x17a>
						Bootloader_Memory_Write(BL_Host_Buffer);
 8005ad8:	4815      	ldr	r0, [pc, #84]	@ (8005b30 <BL_UART_Fetch_Host_Command+0x1b0>)
 8005ada:	f000 faa7 	bl	800602c <Bootloader_Memory_Write>
						break;
 8005ade:	e00c      	b.n	8005afa <BL_UART_Fetch_Host_Command+0x17a>
						Set_Firmware_Version(BL_Host_Buffer);
 8005ae0:	4813      	ldr	r0, [pc, #76]	@ (8005b30 <BL_UART_Fetch_Host_Command+0x1b0>)
 8005ae2:	f000 fbbd 	bl	8006260 <Set_Firmware_Version>
						break;
 8005ae6:	e008      	b.n	8005afa <BL_UART_Fetch_Host_Command+0x17a>
						Get_Firmware_Version(BL_Host_Buffer);
 8005ae8:	4811      	ldr	r0, [pc, #68]	@ (8005b30 <BL_UART_Fetch_Host_Command+0x1b0>)
 8005aea:	f000 fbff 	bl	80062ec <Get_Firmware_Version>
						break;
 8005aee:	e004      	b.n	8005afa <BL_UART_Fetch_Host_Command+0x17a>
						Bootloader_check_connection(BL_Host_Buffer);
 8005af0:	480f      	ldr	r0, [pc, #60]	@ (8005b30 <BL_UART_Fetch_Host_Command+0x1b0>)
 8005af2:	f000 fd1f 	bl	8006534 <Bootloader_check_connection>
						break;
 8005af6:	e000      	b.n	8005afa <BL_UART_Fetch_Host_Command+0x17a>
						break;
 8005af8:	bf00      	nop
    while (!rbuffer_empty(&p_USART1_meta->rb_rx))
 8005afa:	4b0c      	ldr	r3, [pc, #48]	@ (8005b2c <BL_UART_Fetch_Host_Command+0x1ac>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff fcb8 	bl	8005474 <rbuffer_empty>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f083 0301 	eor.w	r3, r3, #1
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f47f af57 	bne.w	80059c0 <BL_UART_Fetch_Host_Command+0x40>
                }
            }
        }
    }
}
 8005b12:	bf00      	nop
 8005b14:	bf00      	nop
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	2400036c 	.word	0x2400036c
 8005b20:	2400036e 	.word	0x2400036e
 8005b24:	2400036b 	.word	0x2400036b
 8005b28:	2400036a 	.word	0x2400036a
 8005b2c:	2400003c 	.word	0x2400003c
 8005b30:	240002d4 	.word	0x240002d4

08005b34 <Bootloader_Get_Chip_Identification_Number>:

/**
 * Lấy số nhận dạng chip và gửi về host
 * @param Host_Buffer: Buffer từ host (không dùng trong hàm này)
 */
static void Bootloader_Get_Chip_Identification_Number(uint8_t *Host_Buffer) {
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
    uint16_t MCU_Identification_Number = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	81fb      	strh	r3, [r7, #14]

    // Lấy Device ID từ DBGMCU->IDCODE
    MCU_Identification_Number = (uint16_t)(DBGMCU->IDCODE & 0x00000FFF);
 8005b40:	4b08      	ldr	r3, [pc, #32]	@ (8005b64 <Bootloader_Get_Chip_Identification_Number+0x30>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	81fb      	strh	r3, [r7, #14]

    // Gửi về host
    Bootloader_Send_Data_To_Host((uint8_t*)&MCU_Identification_Number, 2);
 8005b4e:	f107 030e 	add.w	r3, r7, #14
 8005b52:	2102      	movs	r1, #2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 fb37 	bl	80061c8 <Bootloader_Send_Data_To_Host>
}
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	5c001000 	.word	0x5c001000

08005b68 <Jump_To_App>:
/**
 * Nhảy đến ứng dụng người dùng
 * @param app_address: Địa chỉ bắt đầu của ứng dụng
 * @return true nếu nhảy thành công, false nếu thất bại
 */
bool Jump_To_App(uint32_t app_address) {
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08e      	sub	sp, #56	@ 0x38
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
    if (*((volatile uint32_t*)app_address) != 0xFFFFFFFF)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b78:	f000 8112 	beq.w	8005da0 <Jump_To_App+0x238>
    {
        uint8_t appExists = 1;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]

//		HAL_HSEM_Release(HSEM_ID_0,0);

        Bootloader_Send_Data_To_Host((uint8_t*)&appExists, 1);
 8005b80:	f107 030f 	add.w	r3, r7, #15
 8005b84:	2101      	movs	r1, #1
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fb1e 	bl	80061c8 <Bootloader_Send_Data_To_Host>
        HAL_Delay(1);
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	f7fb f915 	bl	8000dbc <HAL_Delay>

        while (!rbuffer_empty(&p_USART1_meta->rb_tx));
 8005b92:	bf00      	nop
 8005b94:	4b85      	ldr	r3, [pc, #532]	@ (8005dac <Jump_To_App+0x244>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff fc69 	bl	8005474 <rbuffer_empty>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	f083 0301 	eor.w	r3, r3, #1
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f2      	bne.n	8005b94 <Jump_To_App+0x2c>
  __ASM volatile ("cpsid i" : : : "memory");
 8005bae:	b672      	cpsid	i
}
 8005bb0:	bf00      	nop
        __disable_irq();

        for (uint8_t i = 0; i < 8; i++)
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005bb8:	e014      	b.n	8005be4 <Jump_To_App+0x7c>
        {
            NVIC->ICER[i] = 0xFFFFFFFF;
 8005bba:	4a7d      	ldr	r2, [pc, #500]	@ (8005db0 <Jump_To_App+0x248>)
 8005bbc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005bc0:	3320      	adds	r3, #32
 8005bc2:	f04f 31ff 	mov.w	r1, #4294967295
 8005bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            NVIC->ICPR[i] = 0xFFFFFFFF;
 8005bca:	4a79      	ldr	r2, [pc, #484]	@ (8005db0 <Jump_To_App+0x248>)
 8005bcc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005bd0:	3360      	adds	r3, #96	@ 0x60
 8005bd2:	f04f 31ff 	mov.w	r1, #4294967295
 8005bd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (uint8_t i = 0; i < 8; i++)
 8005bda:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005bde:	3301      	adds	r3, #1
 8005be0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005be4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005be8:	2b07      	cmp	r3, #7
 8005bea:	d9e6      	bls.n	8005bba <Jump_To_App+0x52>
        }

        LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_USART1);
 8005bec:	2010      	movs	r0, #16
 8005bee:	f7ff fe9d 	bl	800592c <LL_APB2_GRP1_ForceReset>
        LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_USART1);
 8005bf2:	2010      	movs	r0, #16
 8005bf4:	f7ff feae 	bl	8005954 <LL_APB2_GRP1_ReleaseReset>

        if (SCB->CCR & SCB_CCR_DC_Msk)
 8005bf8:	4b6e      	ldr	r3, [pc, #440]	@ (8005db4 <Jump_To_App+0x24c>)
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d06a      	beq.n	8005cda <Jump_To_App+0x172>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8005c04:	4b6b      	ldr	r3, [pc, #428]	@ (8005db4 <Jump_To_App+0x24c>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005c0c:	f3bf 8f4f 	dsb	sy
}
 8005c10:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8005c12:	4b68      	ldr	r3, [pc, #416]	@ (8005db4 <Jump_To_App+0x24c>)
 8005c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c18:	61fb      	str	r3, [r7, #28]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	0b5b      	lsrs	r3, r3, #13
 8005c1e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005c22:	61bb      	str	r3, [r7, #24]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	08db      	lsrs	r3, r3, #3
 8005c28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c2c:	617b      	str	r3, [r7, #20]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8005c36:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8005c3c:	495d      	ldr	r1, [pc, #372]	@ (8005db4 <Jump_To_App+0x24c>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	1e5a      	subs	r2, r3, #1
 8005c48:	617a      	str	r2, [r7, #20]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1ef      	bne.n	8005c2e <Jump_To_App+0xc6>
    } while(sets-- != 0U);
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	1e5a      	subs	r2, r3, #1
 8005c52:	61ba      	str	r2, [r7, #24]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e5      	bne.n	8005c24 <Jump_To_App+0xbc>
  __ASM volatile ("dsb 0xF":::"memory");
 8005c58:	f3bf 8f4f 	dsb	sy
}
 8005c5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005c5e:	f3bf 8f6f 	isb	sy
}
 8005c62:	bf00      	nop
}
 8005c64:	bf00      	nop
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8005c66:	4b53      	ldr	r3, [pc, #332]	@ (8005db4 <Jump_To_App+0x24c>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005c6e:	f3bf 8f4f 	dsb	sy
}
 8005c72:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8005c74:	4b4f      	ldr	r3, [pc, #316]	@ (8005db4 <Jump_To_App+0x24c>)
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	4a4e      	ldr	r2, [pc, #312]	@ (8005db4 <Jump_To_App+0x24c>)
 8005c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c7e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c80:	f3bf 8f4f 	dsb	sy
}
 8005c84:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8005c86:	4b4b      	ldr	r3, [pc, #300]	@ (8005db4 <Jump_To_App+0x24c>)
 8005c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c90:	0b5b      	lsrs	r3, r3, #13
 8005c92:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005c96:	627b      	str	r3, [r7, #36]	@ 0x24
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c9a:	08db      	lsrs	r3, r3, #3
 8005c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ca0:	623b      	str	r3, [r7, #32]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8005caa:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8005cac:	6a3a      	ldr	r2, [r7, #32]
 8005cae:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8005cb0:	4940      	ldr	r1, [pc, #256]	@ (8005db4 <Jump_To_App+0x24c>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	1e5a      	subs	r2, r3, #1
 8005cbc:	623a      	str	r2, [r7, #32]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1ef      	bne.n	8005ca2 <Jump_To_App+0x13a>
    } while(sets-- != 0U);
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	1e5a      	subs	r2, r3, #1
 8005cc6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1e5      	bne.n	8005c98 <Jump_To_App+0x130>
  __ASM volatile ("dsb 0xF":::"memory");
 8005ccc:	f3bf 8f4f 	dsb	sy
}
 8005cd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005cd2:	f3bf 8f6f 	isb	sy
}
 8005cd6:	bf00      	nop
}
 8005cd8:	bf00      	nop
        {
            SCB_CleanInvalidateDCache();
            SCB_DisableDCache();
        }
        if (SCB->CCR & SCB_CCR_IC_Msk)
 8005cda:	4b36      	ldr	r3, [pc, #216]	@ (8005db4 <Jump_To_App+0x24c>)
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d027      	beq.n	8005d36 <Jump_To_App+0x1ce>
  __ASM volatile ("dsb 0xF":::"memory");
 8005ce6:	f3bf 8f4f 	dsb	sy
}
 8005cea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005cec:	f3bf 8f6f 	isb	sy
}
 8005cf0:	bf00      	nop
    SCB->ICIALLU = 0UL;
 8005cf2:	4b30      	ldr	r3, [pc, #192]	@ (8005db4 <Jump_To_App+0x24c>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005cfa:	f3bf 8f4f 	dsb	sy
}
 8005cfe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d00:	f3bf 8f6f 	isb	sy
}
 8005d04:	bf00      	nop
}
 8005d06:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8005d08:	f3bf 8f4f 	dsb	sy
}
 8005d0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d0e:	f3bf 8f6f 	isb	sy
}
 8005d12:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8005d14:	4b27      	ldr	r3, [pc, #156]	@ (8005db4 <Jump_To_App+0x24c>)
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	4a26      	ldr	r2, [pc, #152]	@ (8005db4 <Jump_To_App+0x24c>)
 8005d1a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005d1e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005d20:	4b24      	ldr	r3, [pc, #144]	@ (8005db4 <Jump_To_App+0x24c>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005d28:	f3bf 8f4f 	dsb	sy
}
 8005d2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d2e:	f3bf 8f6f 	isb	sy
}
 8005d32:	bf00      	nop
}
 8005d34:	bf00      	nop
        {
            SCB_InvalidateICache();
            SCB_DisableICache();
        }

        HAL_RCC_DeInit();
 8005d36:	f7fb fe1b 	bl	8001970 <HAL_RCC_DeInit>
        HAL_DeInit();
 8005d3a:	f7fa ff83 	bl	8000c44 <HAL_DeInit>

        SCB->ICSR |= SCB_ICSR_PENDSVCLR_Msk | SCB_ICSR_PENDSTCLR_Msk;
 8005d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005db4 <Jump_To_App+0x24c>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	4a1c      	ldr	r2, [pc, #112]	@ (8005db4 <Jump_To_App+0x24c>)
 8005d44:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 8005d48:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d4a:	f3bf 8f4f 	dsb	sy
}
 8005d4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d50:	f3bf 8f6f 	isb	sy
}
 8005d54:	bf00      	nop
        __DSB();
        __ISB();

        __set_MSP(*((volatile uint32_t*)app_address));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f383 8808 	msr	MSP, r3
}
 8005d62:	bf00      	nop
        SCB->VTOR = app_address;
 8005d64:	4a13      	ldr	r2, [pc, #76]	@ (8005db4 <Jump_To_App+0x24c>)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6093      	str	r3, [r2, #8]
        SysTick->CTRL = 0;
 8005d6a:	4b13      	ldr	r3, [pc, #76]	@ (8005db8 <Jump_To_App+0x250>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]
        SysTick->LOAD = 0;
 8005d70:	4b11      	ldr	r3, [pc, #68]	@ (8005db8 <Jump_To_App+0x250>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	605a      	str	r2, [r3, #4]
        SysTick->VAL = 0;
 8005d76:	4b10      	ldr	r3, [pc, #64]	@ (8005db8 <Jump_To_App+0x250>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d7c:	f3bf 8f4f 	dsb	sy
}
 8005d80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d82:	f3bf 8f6f 	isb	sy
}
 8005d86:	bf00      	nop

        __DSB();
        __ISB();

        uint32_t MainAppAddr = *((volatile uint32_t*)(app_address + 4));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	633b      	str	r3, [r7, #48]	@ 0x30
        void (*reset_handler)(void) = (void(*)(void))MainAppAddr;
 8005d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsie i" : : : "memory");
 8005d94:	b662      	cpsie	i
}
 8005d96:	bf00      	nop

        __enable_irq();
        reset_handler();
 8005d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d9a:	4798      	blx	r3

        return true;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e000      	b.n	8005da2 <Jump_To_App+0x23a>
    }
    return false;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3738      	adds	r7, #56	@ 0x38
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	2400003c 	.word	0x2400003c
 8005db0:	e000e100 	.word	0xe000e100
 8005db4:	e000ed00 	.word	0xe000ed00
 8005db8:	e000e010 	.word	0xe000e010

08005dbc <Bootloader_Jump_To_User_App>:
/**
 * Xử lý lệnh nhảy đến ứng dụng từ host
 * @param Host_Buffer: Buffer chứa địa chỉ ứng dụng
 */
static void Bootloader_Jump_To_User_App(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
	uint32_t app_address = FIRMWARE_BANK1_BASE;
 8005dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005df0 <Bootloader_Jump_To_User_App+0x34>)
 8005dc4:	607b      	str	r3, [r7, #4]
	if (!Jump_To_App(app_address))
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff fece 	bl	8005b68 <Jump_To_App>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	f083 0301 	eor.w	r3, r3, #1
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d006      	beq.n	8005de6 <Bootloader_Jump_To_User_App+0x2a>
	{
		uint8_t appExists = ADDRESS_IS_INVALID;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	70fb      	strb	r3, [r7, #3]
		Bootloader_Send_Data_To_Host(&appExists, 1);
 8005ddc:	1cfb      	adds	r3, r7, #3
 8005dde:	2101      	movs	r1, #1
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 f9f1 	bl	80061c8 <Bootloader_Send_Data_To_Host>
	}
}
 8005de6:	bf00      	nop
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	08040000 	.word	0x08040000

08005df4 <Perform_Flash_Erase>:
 * @param Sector_Number: Số sector bắt đầu (0-15) hoặc CBL_FLASH_MASS_ERASE
 * @param Number_Of_Sectors: Số sector cần xóa
 * @return SUCCESSFUL_ERASE (0), UNSUCCESSFUL_ERASE (1), hoặc INVALID_SECTOR_NUMBER (2)
 */
static uint8_t Perform_Flash_Erase(uint8_t Sector_Number, uint8_t Number_Of_Sectors)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	460a      	mov	r2, r1
 8005dfe:	71fb      	strb	r3, [r7, #7]
 8005e00:	4613      	mov	r3, r2
 8005e02:	71bb      	strb	r3, [r7, #6]
    FLASH_EraseInitTypeDef EraseInitStruct = {0};
 8005e04:	f107 030c 	add.w	r3, r7, #12
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	605a      	str	r2, [r3, #4]
 8005e0e:	609a      	str	r2, [r3, #8]
 8005e10:	60da      	str	r2, [r3, #12]
 8005e12:	611a      	str	r2, [r3, #16]
    uint32_t SectorError = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60bb      	str	r3, [r7, #8]

    // Kiểm tra số sector hợp lệ
    if (Number_Of_Sectors > CBL_FLASH_MAX_SECTOR_NUMBER)
 8005e18:	79bb      	ldrb	r3, [r7, #6]
 8005e1a:	2b10      	cmp	r3, #16
 8005e1c:	d901      	bls.n	8005e22 <Perform_Flash_Erase+0x2e>
    {
        return INVALID_SECTOR_NUMBER;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e04a      	b.n	8005eb8 <Perform_Flash_Erase+0xc4>
    }
    // Kiểm tra Sector_Number hợp lệ
    if ((Sector_Number != CBL_FLASH_MASS_ERASE) && (Sector_Number > 16))
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	2bff      	cmp	r3, #255	@ 0xff
 8005e26:	d004      	beq.n	8005e32 <Perform_Flash_Erase+0x3e>
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	2b10      	cmp	r3, #16
 8005e2c:	d901      	bls.n	8005e32 <Perform_Flash_Erase+0x3e>
    {
        return UNSUCCESSFUL_ERASE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e042      	b.n	8005eb8 <Perform_Flash_Erase+0xc4>
    }

    HAL_FLASH_Unlock(); // Mở khóa flash
 8005e32:	f7fb fad3 	bl	80013dc <HAL_FLASH_Unlock>
    // Xử lý mass erase
    if (Sector_Number == CBL_FLASH_MASS_ERASE)
 8005e36:	79fb      	ldrb	r3, [r7, #7]
 8005e38:	2bff      	cmp	r3, #255	@ 0xff
 8005e3a:	d118      	bne.n	8005e6e <Perform_Flash_Erase+0x7a>
    {
        EraseInitStruct.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	60fb      	str	r3, [r7, #12]
        EraseInitStruct.Banks = FLASH_BANK_BOTH; // Xóa cả hai bank
 8005e40:	2303      	movs	r3, #3
 8005e42:	613b      	str	r3, [r7, #16]
        EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8005e44:	2320      	movs	r3, #32
 8005e46:	61fb      	str	r3, [r7, #28]
        if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8005e48:	f107 0208 	add.w	r2, r7, #8
 8005e4c:	f107 030c 	add.w	r3, r7, #12
 8005e50:	4611      	mov	r1, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fb fbc0 	bl	80015d8 <HAL_FLASHEx_Erase>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <Perform_Flash_Erase+0x72>
        {
            HAL_FLASH_Lock();
 8005e5e:	f7fb faf7 	bl	8001450 <HAL_FLASH_Lock>
            return UNSUCCESSFUL_ERASE;
 8005e62:	2300      	movs	r3, #0
 8005e64:	e028      	b.n	8005eb8 <Perform_Flash_Erase+0xc4>
        }
        HAL_FLASH_Lock();
 8005e66:	f7fb faf3 	bl	8001450 <HAL_FLASH_Lock>
        return SUCCESSFUL_ERASE;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e024      	b.n	8005eb8 <Perform_Flash_Erase+0xc4>
    }
    // Xóa từng sector
    if (Sector_Number < 8)
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	2b07      	cmp	r3, #7
 8005e72:	d804      	bhi.n	8005e7e <Perform_Flash_Erase+0x8a>
    {
    	EraseInitStruct.Banks = FLASH_BANK_1;
 8005e74:	2301      	movs	r3, #1
 8005e76:	613b      	str	r3, [r7, #16]
    	EraseInitStruct.Sector = Sector_Number;
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	e004      	b.n	8005e88 <Perform_Flash_Erase+0x94>
    }
    else
    {
    	EraseInitStruct.Banks = FLASH_BANK_2;
 8005e7e:	2302      	movs	r3, #2
 8005e80:	613b      	str	r3, [r7, #16]
    	EraseInitStruct.Sector = Sector_Number - 8;
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	3b08      	subs	r3, #8
 8005e86:	617b      	str	r3, [r7, #20]
    }
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8005e8c:	2320      	movs	r3, #32
 8005e8e:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.NbSectors = Number_Of_Sectors;
 8005e90:	79bb      	ldrb	r3, [r7, #6]
 8005e92:	61bb      	str	r3, [r7, #24]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8005e94:	f107 0208 	add.w	r2, r7, #8
 8005e98:	f107 030c 	add.w	r3, r7, #12
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fb fb9a 	bl	80015d8 <HAL_FLASHEx_Erase>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <Perform_Flash_Erase+0xbe>
    {
        HAL_FLASH_Lock();
 8005eaa:	f7fb fad1 	bl	8001450 <HAL_FLASH_Lock>
        return UNSUCCESSFUL_ERASE;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e002      	b.n	8005eb8 <Perform_Flash_Erase+0xc4>
    }

    HAL_FLASH_Lock();
 8005eb2:	f7fb facd 	bl	8001450 <HAL_FLASH_Lock>
    return SUCCESSFUL_ERASE;
 8005eb6:	2301      	movs	r3, #1
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3720      	adds	r7, #32
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <Bootloader_Erase_Flash>:
/**
 * Xóa firmware trong Flash dựa trên lựa chọn từ host
 * @param Host_Buffer: Dữ liệu từ host, Host_Buffer[2] chọn firmware (1: Bank 1, 2: Bank 2)
 */
static void Bootloader_Erase_Flash(uint8_t *Host_Buffer)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
    uint8_t Erase_Status = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	77fb      	strb	r3, [r7, #31]
    s_firmware_info fw_info;
	fw_info.is_Available = false;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	723b      	strb	r3, [r7, #8]
	fw_info.address = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60fb      	str	r3, [r7, #12]
	fw_info.length = 0;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	613b      	str	r3, [r7, #16]
	fw_info.crc = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
	fw_info.version_major = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	763b      	strb	r3, [r7, #24]
	fw_info.version_minor = 0;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	767b      	strb	r3, [r7, #25]
	fw_info.version_patch = 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	76bb      	strb	r3, [r7, #26]

    switch (Host_Buffer[2]) {
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3302      	adds	r3, #2
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d002      	beq.n	8005ef8 <Bootloader_Erase_Flash+0x38>
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d013      	beq.n	8005f1e <Bootloader_Erase_Flash+0x5e>
 8005ef6:	e025      	b.n	8005f44 <Bootloader_Erase_Flash+0x84>
        case 1: // Xóa Firmware 1 (Bank 2, 4 sector)
            Erase_Status = Perform_Flash_Erase(FIRMWARE1_SECTOR, FIRMWARE_NUM_SECTORS);
 8005ef8:	2104      	movs	r1, #4
 8005efa:	2002      	movs	r0, #2
 8005efc:	f7ff ff7a 	bl	8005df4 <Perform_Flash_Erase>
 8005f00:	4603      	mov	r3, r0
 8005f02:	77fb      	strb	r3, [r7, #31]
            Erase_Status += Flash_Write_Metadata(&fw_info, 1);
 8005f04:	f107 0308 	add.w	r3, r7, #8
 8005f08:	2101      	movs	r1, #1
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fa58 	bl	80063c0 <Flash_Write_Metadata>
 8005f10:	4603      	mov	r3, r0
 8005f12:	461a      	mov	r2, r3
 8005f14:	7ffb      	ldrb	r3, [r7, #31]
 8005f16:	4413      	add	r3, r2
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	77fb      	strb	r3, [r7, #31]
		break;
 8005f1c:	e015      	b.n	8005f4a <Bootloader_Erase_Flash+0x8a>

        case 2: // Xóa Firmware 2 (Bank 2, 4 sector)
            Erase_Status = Perform_Flash_Erase(FIRMWARE2_SECTOR, FIRMWARE_NUM_SECTORS);
 8005f1e:	2104      	movs	r1, #4
 8005f20:	200a      	movs	r0, #10
 8005f22:	f7ff ff67 	bl	8005df4 <Perform_Flash_Erase>
 8005f26:	4603      	mov	r3, r0
 8005f28:	77fb      	strb	r3, [r7, #31]
            Erase_Status += Flash_Write_Metadata(&fw_info, 2);
 8005f2a:	f107 0308 	add.w	r3, r7, #8
 8005f2e:	2102      	movs	r1, #2
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 fa45 	bl	80063c0 <Flash_Write_Metadata>
 8005f36:	4603      	mov	r3, r0
 8005f38:	461a      	mov	r2, r3
 8005f3a:	7ffb      	ldrb	r3, [r7, #31]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	77fb      	strb	r3, [r7, #31]
		break;
 8005f42:	e002      	b.n	8005f4a <Bootloader_Erase_Flash+0x8a>

        default:
            Erase_Status = UNSUCCESSFUL_ERASE; // Lựa chọn không hợp lệ
 8005f44:	2300      	movs	r3, #0
 8005f46:	77fb      	strb	r3, [r7, #31]
		break;
 8005f48:	bf00      	nop
    }

    /* Gửi kết quả về host */
    if (Erase_Status > 1)
 8005f4a:	7ffb      	ldrb	r3, [r7, #31]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d908      	bls.n	8005f62 <Bootloader_Erase_Flash+0xa2>
    {
    	Erase_Status = SUCCESSFUL_ERASE;
 8005f50:	2301      	movs	r3, #1
 8005f52:	77fb      	strb	r3, [r7, #31]
    	Bootloader_Send_Data_To_Host((uint8_t*)&Erase_Status, 1);
 8005f54:	f107 031f 	add.w	r3, r7, #31
 8005f58:	2101      	movs	r1, #1
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f934 	bl	80061c8 <Bootloader_Send_Data_To_Host>
 8005f60:	e007      	b.n	8005f72 <Bootloader_Erase_Flash+0xb2>
    	return;
    }
    Erase_Status = UNSUCCESSFUL_ERASE;
 8005f62:	2300      	movs	r3, #0
 8005f64:	77fb      	strb	r3, [r7, #31]
    Bootloader_Send_Data_To_Host((uint8_t*)&Erase_Status, 1);
 8005f66:	f107 031f 	add.w	r3, r7, #31
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 f92b 	bl	80061c8 <Bootloader_Send_Data_To_Host>

}
 8005f72:	3720      	adds	r7, #32
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <Flash_Memory_Write_Payload>:
 * @param Payload_Start_Address: Địa chỉ bắt đầu trong Flash
 * @param Payload_Len: Độ dài dữ liệu (byte)
 * @return FLASH_PAYLOAD_WRITE_PASSED (0) nếu thành công, FLASH_PAYLOAD_WRITE_FAILED (1) nếu lỗi
 */
static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len)
{
 8005f78:	b590      	push	{r4, r7, lr}
 8005f7a:	b095      	sub	sp, #84	@ 0x54
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80fb      	strh	r3, [r7, #6]
 8005f86:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005f8a:	3b40      	subs	r3, #64	@ 0x40
 8005f8c:	331f      	adds	r3, #31
 8005f8e:	095b      	lsrs	r3, r3, #5
 8005f90:	015c      	lsls	r4, r3, #5
	if (Host_Payload == NULL || Payload_Len == 0)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <Flash_Memory_Write_Payload+0x26>
 8005f98:	88fb      	ldrh	r3, [r7, #6]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <Flash_Memory_Write_Payload+0x2a>
	{
		return FLASH_PAYLOAD_WRITE_FAILED;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	e03f      	b.n	8006022 <Flash_Memory_Write_Payload+0xaa>
	}
	// Mở khóa flash
	if (HAL_FLASH_Unlock() != HAL_OK)
 8005fa2:	f7fb fa1b 	bl	80013dc <HAL_FLASH_Unlock>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <Flash_Memory_Write_Payload+0x38>
	{
		return FLASH_PAYLOAD_WRITE_FAILED;
 8005fac:	2300      	movs	r3, #0
 8005fae:	e038      	b.n	8006022 <Flash_Memory_Write_Payload+0xaa>
	}

    uint16_t i = 0;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint8_t buffer[32] __attribute__((aligned(32))); 	// Bộ đệm 32 byte cho 256-bit

    while (i < Payload_Len)
 8005fb6:	e02c      	b.n	8006012 <Flash_Memory_Write_Payload+0x9a>
    {
        memset(buffer, 0xFF, sizeof(buffer)); 			// Padding mặc định là 0xFF
 8005fb8:	2220      	movs	r2, #32
 8005fba:	21ff      	movs	r1, #255	@ 0xff
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f000 fbf5 	bl	80067ac <memset>
        // Tính số byte cần ghi (tối đa 32 byte)
        uint16_t bytes_to_write = (Payload_Len - i > 32) ? 32 : (Payload_Len - i);
 8005fc2:	88fa      	ldrh	r2, [r7, #6]
 8005fc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	bfa8      	it	ge
 8005fce:	2320      	movge	r3, #32
 8005fd0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
        memcpy(buffer, &Host_Payload[i], bytes_to_write);
 8005fd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f000 fc0e 	bl	8006804 <memcpy>
        // Ghi 32-bit vào flash
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Payload_Start_Address + i, (uint32_t)buffer) != HAL_OK)
 8005fe8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4413      	add	r3, r2
 8005ff0:	4622      	mov	r2, r4
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	f7fb f95f 	bl	80012b8 <HAL_FLASH_Program>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <Flash_Memory_Write_Payload+0x90>
        {
            HAL_FLASH_Lock();
 8006000:	f7fb fa26 	bl	8001450 <HAL_FLASH_Lock>
            return FLASH_PAYLOAD_WRITE_FAILED;
 8006004:	2300      	movs	r3, #0
 8006006:	e00c      	b.n	8006022 <Flash_Memory_Write_Payload+0xaa>
        }
        i += 32; // Tăng bước nhảy 4 byte
 8006008:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800600c:	3320      	adds	r3, #32
 800600e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    while (i < Payload_Len)
 8006012:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8006016:	88fb      	ldrh	r3, [r7, #6]
 8006018:	429a      	cmp	r2, r3
 800601a:	d3cd      	bcc.n	8005fb8 <Flash_Memory_Write_Payload+0x40>
    }
    HAL_FLASH_Lock();
 800601c:	f7fb fa18 	bl	8001450 <HAL_FLASH_Lock>
    return FLASH_PAYLOAD_WRITE_PASSED;
 8006020:	2301      	movs	r3, #1
}
 8006022:	4618      	mov	r0, r3
 8006024:	3754      	adds	r7, #84	@ 0x54
 8006026:	46bd      	mov	sp, r7
 8006028:	bd90      	pop	{r4, r7, pc}
	...

0800602c <Bootloader_Memory_Write>:
 * Byte 6-7: Total Frames
 * Byte 8...: Chunk data
 * Byte cuối (4 bytes): CRC32
 */
static void Bootloader_Memory_Write(uint8_t *Host_Buffer)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
	uint8_t Payload_Len = 0;
 8006034:	2300      	movs	r3, #0
 8006036:	75fb      	strb	r3, [r7, #23]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8006038:	2300      	movs	r3, #0
 800603a:	743b      	strb	r3, [r7, #16]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 800603c:	2300      	movs	r3, #0
 800603e:	73fb      	strb	r3, [r7, #15]
	uint16_t Frame_Index = 0;
 8006040:	2300      	movs	r3, #0
 8006042:	82bb      	strh	r3, [r7, #20]
	uint16_t Total_Frame = 0;
 8006044:	2300      	movs	r3, #0
 8006046:	827b      	strh	r3, [r7, #18]

	Frame_Index = *((uint16_t*) (&Host_Buffer[4]));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	889b      	ldrh	r3, [r3, #4]
 800604c:	82bb      	strh	r3, [r7, #20]
	Total_Frame = *((uint16_t*) (&Host_Buffer[6]));
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	88db      	ldrh	r3, [r3, #6]
 8006052:	827b      	strh	r3, [r7, #18]

	uint8_t fw_number = Host_Buffer[2];
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	789b      	ldrb	r3, [r3, #2]
 8006058:	747b      	strb	r3, [r7, #17]
	if((fw_number > 2)||(fw_number < 1))
 800605a:	7c7b      	ldrb	r3, [r7, #17]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d802      	bhi.n	8006066 <Bootloader_Memory_Write+0x3a>
 8006060:	7c7b      	ldrb	r3, [r7, #17]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d108      	bne.n	8006078 <Bootloader_Memory_Write+0x4c>
	{
		Address_Verification = ADDRESS_IS_INVALID;
 8006066:	2300      	movs	r3, #0
 8006068:	743b      	strb	r3, [r7, #16]
		Bootloader_Send_Data_To_Host((uint8_t*) &Address_Verification, 1);
 800606a:	f107 0310 	add.w	r3, r7, #16
 800606e:	2101      	movs	r1, #1
 8006070:	4618      	mov	r0, r3
 8006072:	f000 f8a9 	bl	80061c8 <Bootloader_Send_Data_To_Host>
 8006076:	e056      	b.n	8006126 <Bootloader_Memory_Write+0xfa>
		return;
	}
	if(!Frame_Index)
 8006078:	8abb      	ldrh	r3, [r7, #20]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d111      	bne.n	80060a2 <Bootloader_Memory_Write+0x76>
	{
		Address_to_write = (fw_number == 1) ? FIRMWARE_BANK1_BASE : FIRMWARE_BANK2_BASE;
 800607e:	7c7b      	ldrb	r3, [r7, #17]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d101      	bne.n	8006088 <Bootloader_Memory_Write+0x5c>
 8006084:	4b29      	ldr	r3, [pc, #164]	@ (800612c <Bootloader_Memory_Write+0x100>)
 8006086:	e000      	b.n	800608a <Bootloader_Memory_Write+0x5e>
 8006088:	4b29      	ldr	r3, [pc, #164]	@ (8006130 <Bootloader_Memory_Write+0x104>)
 800608a:	4a2a      	ldr	r2, [pc, #168]	@ (8006134 <Bootloader_Memory_Write+0x108>)
 800608c:	6013      	str	r3, [r2, #0]
		Temp_Firmware.address = Address_to_write;
 800608e:	4b29      	ldr	r3, [pc, #164]	@ (8006134 <Bootloader_Memory_Write+0x108>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a29      	ldr	r2, [pc, #164]	@ (8006138 <Bootloader_Memory_Write+0x10c>)
 8006094:	6053      	str	r3, [r2, #4]
		Temp_Firmware.crc = 0;
 8006096:	4b28      	ldr	r3, [pc, #160]	@ (8006138 <Bootloader_Memory_Write+0x10c>)
 8006098:	2200      	movs	r2, #0
 800609a:	60da      	str	r2, [r3, #12]
		Temp_Firmware.length = 0;
 800609c:	4b26      	ldr	r3, [pc, #152]	@ (8006138 <Bootloader_Memory_Write+0x10c>)
 800609e:	2200      	movs	r2, #0
 80060a0:	609a      	str	r2, [r3, #8]
	}

	Payload_Len = Host_Buffer[3];	//Frame size
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	78db      	ldrb	r3, [r3, #3]
 80060a6:	75fb      	strb	r3, [r7, #23]

	/* Write the payload to the Flash memory */
	Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t*) &Host_Buffer[8], Address_to_write, Payload_Len);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3308      	adds	r3, #8
 80060ac:	4a21      	ldr	r2, [pc, #132]	@ (8006134 <Bootloader_Memory_Write+0x108>)
 80060ae:	6811      	ldr	r1, [r2, #0]
 80060b0:	7dfa      	ldrb	r2, [r7, #23]
 80060b2:	b292      	uxth	r2, r2
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff ff5f 	bl	8005f78 <Flash_Memory_Write_Payload>
 80060ba:	4603      	mov	r3, r0
 80060bc:	73fb      	strb	r3, [r7, #15]
	if (Flash_Payload_Write_Status == FLASH_PAYLOAD_WRITE_PASSED)
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d12a      	bne.n	800611a <Bootloader_Memory_Write+0xee>
	{
		Address_to_write += Payload_Len;
 80060c4:	7dfa      	ldrb	r2, [r7, #23]
 80060c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006134 <Bootloader_Memory_Write+0x108>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4413      	add	r3, r2
 80060cc:	4a19      	ldr	r2, [pc, #100]	@ (8006134 <Bootloader_Memory_Write+0x108>)
 80060ce:	6013      	str	r3, [r2, #0]
		Temp_Firmware.length += Payload_Len;
 80060d0:	4b19      	ldr	r3, [pc, #100]	@ (8006138 <Bootloader_Memory_Write+0x10c>)
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	4413      	add	r3, r2
 80060d8:	4a17      	ldr	r2, [pc, #92]	@ (8006138 <Bootloader_Memory_Write+0x10c>)
 80060da:	6093      	str	r3, [r2, #8]

		if (Frame_Index == (Total_Frame - 1))
 80060dc:	8aba      	ldrh	r2, [r7, #20]
 80060de:	8a7b      	ldrh	r3, [r7, #18]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d112      	bne.n	800610c <Bootloader_Memory_Write+0xe0>
		{
			Temp_Firmware.crc = Firmware_CRC_Verification(Temp_Firmware.address, Temp_Firmware.length);
 80060e6:	4b14      	ldr	r3, [pc, #80]	@ (8006138 <Bootloader_Memory_Write+0x10c>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	4a13      	ldr	r2, [pc, #76]	@ (8006138 <Bootloader_Memory_Write+0x10c>)
 80060ec:	6892      	ldr	r2, [r2, #8]
 80060ee:	4611      	mov	r1, r2
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 f879 	bl	80061e8 <Firmware_CRC_Verification>
 80060f6:	4603      	mov	r3, r0
 80060f8:	4a0f      	ldr	r2, [pc, #60]	@ (8006138 <Bootloader_Memory_Write+0x10c>)
 80060fa:	60d3      	str	r3, [r2, #12]
			Temp_Firmware.is_Available = true;
 80060fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006138 <Bootloader_Memory_Write+0x10c>)
 80060fe:	2201      	movs	r2, #1
 8006100:	701a      	strb	r2, [r3, #0]
			Flash_Write_Metadata(&Temp_Firmware, fw_number);
 8006102:	7c7b      	ldrb	r3, [r7, #17]
 8006104:	4619      	mov	r1, r3
 8006106:	480c      	ldr	r0, [pc, #48]	@ (8006138 <Bootloader_Memory_Write+0x10c>)
 8006108:	f000 f95a 	bl	80063c0 <Flash_Write_Metadata>
		}
		Bootloader_Send_Data_To_Host((uint8_t*) &Flash_Payload_Write_Status, 1);
 800610c:	f107 030f 	add.w	r3, r7, #15
 8006110:	2101      	movs	r1, #1
 8006112:	4618      	mov	r0, r3
 8006114:	f000 f858 	bl	80061c8 <Bootloader_Send_Data_To_Host>
 8006118:	e005      	b.n	8006126 <Bootloader_Memory_Write+0xfa>
	}

	else Bootloader_Send_Data_To_Host((uint8_t*) &Flash_Payload_Write_Status, 1);
 800611a:	f107 030f 	add.w	r3, r7, #15
 800611e:	2101      	movs	r1, #1
 8006120:	4618      	mov	r0, r3
 8006122:	f000 f851 	bl	80061c8 <Bootloader_Send_Data_To_Host>

}
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	08040000 	.word	0x08040000
 8006130:	08140000 	.word	0x08140000
 8006134:	240002c8 	.word	0x240002c8
 8006138:	240002b4 	.word	0x240002b4

0800613c <Bootloader_CRC_Verify>:
 * @param Data_Len: Độ dài dữ liệu
 * @param Host_CRC: Giá trị CRC từ host
 * @return CRC_VERIFICATION_PASSED (1) nếu khớp, CRC_VERIFICATION_FAILED (0) nếu không
 */
static uint8_t Bootloader_CRC_Verify(uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC)
{
 800613c:	b480      	push	{r7}
 800613e:	b089      	sub	sp, #36	@ 0x24
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
    uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 8006148:	2300      	movs	r3, #0
 800614a:	77fb      	strb	r3, [r7, #31]
    uint32_t MCU_CRC_Calculated = 0;
 800614c:	2300      	movs	r3, #0
 800614e:	617b      	str	r3, [r7, #20]
    if (Data_Len == 0xFFFFFFFF)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d102      	bne.n	800615e <Bootloader_CRC_Verify+0x22>
        return MCU_CRC_Calculated;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	b2db      	uxtb	r3, r3
 800615c:	e01d      	b.n	800619a <Bootloader_CRC_Verify+0x5e>
    CRC->CR = CRC_CR_RESET;
 800615e:	4b12      	ldr	r3, [pc, #72]	@ (80061a8 <Bootloader_CRC_Verify+0x6c>)
 8006160:	2201      	movs	r2, #1
 8006162:	609a      	str	r2, [r3, #8]
    for (unsigned int i = 0; i < Data_Len; i++)
 8006164:	2300      	movs	r3, #0
 8006166:	61bb      	str	r3, [r7, #24]
 8006168:	e008      	b.n	800617c <Bootloader_CRC_Verify+0x40>
        CRC->DR = (uint32_t) pData[i];
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	4413      	add	r3, r2
 8006170:	781a      	ldrb	r2, [r3, #0]
 8006172:	4b0d      	ldr	r3, [pc, #52]	@ (80061a8 <Bootloader_CRC_Verify+0x6c>)
 8006174:	601a      	str	r2, [r3, #0]
    for (unsigned int i = 0; i < Data_Len; i++)
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	3301      	adds	r3, #1
 800617a:	61bb      	str	r3, [r7, #24]
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	429a      	cmp	r2, r3
 8006182:	d3f2      	bcc.n	800616a <Bootloader_CRC_Verify+0x2e>
    if (CRC->DR == Host_CRC)
 8006184:	4b08      	ldr	r3, [pc, #32]	@ (80061a8 <Bootloader_CRC_Verify+0x6c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	429a      	cmp	r2, r3
 800618c:	d102      	bne.n	8006194 <Bootloader_CRC_Verify+0x58>
    {
        CRC_Status = CRC_VERIFICATION_PASSED;
 800618e:	2301      	movs	r3, #1
 8006190:	77fb      	strb	r3, [r7, #31]
 8006192:	e001      	b.n	8006198 <Bootloader_CRC_Verify+0x5c>
    }
    else
    {
        CRC_Status = CRC_VERIFICATION_FAILED;
 8006194:	2300      	movs	r3, #0
 8006196:	77fb      	strb	r3, [r7, #31]
    }

    return CRC_Status;
 8006198:	7ffb      	ldrb	r3, [r7, #31]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3724      	adds	r7, #36	@ 0x24
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	58024c00 	.word	0x58024c00

080061ac <Bootloader_Send_NACK>:
}

/**
 * Gửi NACK về host
 */
static void Bootloader_Send_NACK(void) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
    uint8_t Ack_Value = CBL_SEND_NACK;
 80061b2:	23ab      	movs	r3, #171	@ 0xab
 80061b4:	71fb      	strb	r3, [r7, #7]
    USART1_send_array((const char*) &Ack_Value, 1);
 80061b6:	1dfb      	adds	r3, r7, #7
 80061b8:	2101      	movs	r1, #1
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff fb9a 	bl	80058f4 <USART1_send_array>
}
 80061c0:	bf00      	nop
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <Bootloader_Send_Data_To_Host>:
/**
 * Gửi dữ liệu về host
 * @param Host_Buffer: Dữ liệu cần gửi
 * @param Data_Len: Độ dài dữ liệu
 */
static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer, uint32_t Data_Len) {
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
    USART1_send_array((const char*) Host_Buffer, (uint8_t) Data_Len);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7ff fb8b 	bl	80058f4 <USART1_send_array>
}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <Firmware_CRC_Verification>:
 * Tính CRC cho firmware
 * @param start_address: Địa chỉ bắt đầu
 * @param length: Độ dài firmware
 * @return Giá trị CRC
 */
static uint32_t Firmware_CRC_Verification(uint32_t start_address, uint32_t length) {
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
    if (length == 0) return 0;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <Firmware_CRC_Verification+0x14>
 80061f8:	2300      	movs	r3, #0
 80061fa:	e029      	b.n	8006250 <Firmware_CRC_Verification+0x68>

    uint32_t address = start_address;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	617b      	str	r3, [r7, #20]
    uint32_t end_address = start_address + length;
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	4413      	add	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
    uint32_t data = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	60fb      	str	r3, [r7, #12]

    CRC->CR = CRC_CR_RESET;
 800620c:	4b13      	ldr	r3, [pc, #76]	@ (800625c <Firmware_CRC_Verification+0x74>)
 800620e:	2201      	movs	r2, #1
 8006210:	609a      	str	r2, [r3, #8]

    while (address < end_address - 3) {
 8006212:	e008      	b.n	8006226 <Firmware_CRC_Verification+0x3e>
        data = *(uint32_t*)address;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60fb      	str	r3, [r7, #12]
        CRC->DR = data;
 800621a:	4a10      	ldr	r2, [pc, #64]	@ (800625c <Firmware_CRC_Verification+0x74>)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6013      	str	r3, [r2, #0]
        address += 4;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	3304      	adds	r3, #4
 8006224:	617b      	str	r3, [r7, #20]
    while (address < end_address - 3) {
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	3b03      	subs	r3, #3
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	429a      	cmp	r2, r3
 800622e:	d3f1      	bcc.n	8006214 <Firmware_CRC_Verification+0x2c>
    }

    while (address < end_address) {
 8006230:	e008      	b.n	8006244 <Firmware_CRC_Verification+0x5c>
        uint8_t byte = *(uint8_t*)address;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	72fb      	strb	r3, [r7, #11]
        CRC->DR = (uint32_t)byte;
 8006238:	4a08      	ldr	r2, [pc, #32]	@ (800625c <Firmware_CRC_Verification+0x74>)
 800623a:	7afb      	ldrb	r3, [r7, #11]
 800623c:	6013      	str	r3, [r2, #0]
        address++;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	3301      	adds	r3, #1
 8006242:	617b      	str	r3, [r7, #20]
    while (address < end_address) {
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	429a      	cmp	r2, r3
 800624a:	d3f2      	bcc.n	8006232 <Firmware_CRC_Verification+0x4a>
    }

    return CRC->DR;
 800624c:	4b03      	ldr	r3, [pc, #12]	@ (800625c <Firmware_CRC_Verification+0x74>)
 800624e:	681b      	ldr	r3, [r3, #0]
}
 8006250:	4618      	mov	r0, r3
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	58024c00 	.word	0x58024c00

08006260 <Set_Firmware_Version>:
/**
 * Thiết lập phiên bản firmware
 * @param Host_Buffer: Buffer chứa thông tin phiên bản
 */
static void Set_Firmware_Version(uint8_t *Host_Buffer)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]

    uint8_t status = FLASH_PAYLOAD_WRITE_FAILED;
 8006268:	2300      	movs	r3, #0
 800626a:	77bb      	strb	r3, [r7, #30]
    uint8_t fw_number = Host_Buffer[2];
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	789b      	ldrb	r3, [r3, #2]
 8006270:	77fb      	strb	r3, [r7, #31]
    if((fw_number < 1)||(fw_number > 2))
 8006272:	7ffb      	ldrb	r3, [r7, #31]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <Set_Firmware_Version+0x1e>
 8006278:	7ffb      	ldrb	r3, [r7, #31]
 800627a:	2b02      	cmp	r3, #2
 800627c:	d908      	bls.n	8006290 <Set_Firmware_Version+0x30>
	{
    	status = FLASH_PAYLOAD_WRITE_FAILED;
 800627e:	2300      	movs	r3, #0
 8006280:	77bb      	strb	r3, [r7, #30]
    	Bootloader_Send_Data_To_Host((uint8_t*)&status, 1);
 8006282:	f107 031e 	add.w	r3, r7, #30
 8006286:	2101      	movs	r1, #1
 8006288:	4618      	mov	r0, r3
 800628a:	f7ff ff9d 	bl	80061c8 <Bootloader_Send_Data_To_Host>
    	return;
 800628e:	e02a      	b.n	80062e6 <Set_Firmware_Version+0x86>
	}

    s_firmware_info fw_info;

    if(!Flash_Read_Metadata(&fw_info, fw_number))
 8006290:	7ffa      	ldrb	r2, [r7, #31]
 8006292:	f107 0308 	add.w	r3, r7, #8
 8006296:	4611      	mov	r1, r2
 8006298:	4618      	mov	r0, r3
 800629a:	f000 f901 	bl	80064a0 <Flash_Read_Metadata>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d108      	bne.n	80062b6 <Set_Firmware_Version+0x56>
    {
    	status = FLASH_PAYLOAD_WRITE_FAILED;
 80062a4:	2300      	movs	r3, #0
 80062a6:	77bb      	strb	r3, [r7, #30]
		Bootloader_Send_Data_To_Host((uint8_t*)&status, 1);
 80062a8:	f107 031e 	add.w	r3, r7, #30
 80062ac:	2101      	movs	r1, #1
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff ff8a 	bl	80061c8 <Bootloader_Send_Data_To_Host>
		return;
 80062b4:	e017      	b.n	80062e6 <Set_Firmware_Version+0x86>
    }

    fw_info.version_major = Host_Buffer[3];
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	78db      	ldrb	r3, [r3, #3]
 80062ba:	763b      	strb	r3, [r7, #24]
    fw_info.version_minor = Host_Buffer[4];
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	791b      	ldrb	r3, [r3, #4]
 80062c0:	767b      	strb	r3, [r7, #25]
    fw_info.version_patch = Host_Buffer[5];
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	795b      	ldrb	r3, [r3, #5]
 80062c6:	76bb      	strb	r3, [r7, #26]

    status = Flash_Write_Metadata(&fw_info, fw_number);
 80062c8:	7ffa      	ldrb	r2, [r7, #31]
 80062ca:	f107 0308 	add.w	r3, r7, #8
 80062ce:	4611      	mov	r1, r2
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 f875 	bl	80063c0 <Flash_Write_Metadata>
 80062d6:	4603      	mov	r3, r0
 80062d8:	77bb      	strb	r3, [r7, #30]
    Bootloader_Send_Data_To_Host((uint8_t*)&status, 1);
 80062da:	f107 031e 	add.w	r3, r7, #30
 80062de:	2101      	movs	r1, #1
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff ff71 	bl	80061c8 <Bootloader_Send_Data_To_Host>
}
 80062e6:	3720      	adds	r7, #32
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <Get_Firmware_Version>:
/**
 * Lấy phiên bản firmware
 * @param Host_Buffer: Buffer chứa yêu cầu
 */
static void Get_Firmware_Version(uint8_t *Host_Buffer)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08a      	sub	sp, #40	@ 0x28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
    uint8_t fw_number = Host_Buffer[2];
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	789b      	ldrb	r3, [r3, #2]
 80062f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t status[7];
    memset(status, 0, sizeof(status));
 80062fc:	f107 031c 	add.w	r3, r7, #28
 8006300:	2207      	movs	r2, #7
 8006302:	2100      	movs	r1, #0
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fa51 	bl	80067ac <memset>

    if((fw_number < 1)||(fw_number > 2))
 800630a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <Get_Firmware_Version+0x2e>
 8006312:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006316:	2b02      	cmp	r3, #2
 8006318:	d908      	bls.n	800632c <Get_Firmware_Version+0x40>
	{
		status[0] = FLASH_PAYLOAD_WRITE_FAILED;
 800631a:	2300      	movs	r3, #0
 800631c:	773b      	strb	r3, [r7, #28]
		Bootloader_Send_Data_To_Host((uint8_t*)status, 7);
 800631e:	f107 031c 	add.w	r3, r7, #28
 8006322:	2107      	movs	r1, #7
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff ff4f 	bl	80061c8 <Bootloader_Send_Data_To_Host>
		return;
 800632a:	e044      	b.n	80063b6 <Get_Firmware_Version+0xca>
	}

	s_firmware_info fw_info;

	if(!Flash_Read_Metadata(&fw_info, fw_number))
 800632c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006330:	f107 0308 	add.w	r3, r7, #8
 8006334:	4611      	mov	r1, r2
 8006336:	4618      	mov	r0, r3
 8006338:	f000 f8b2 	bl	80064a0 <Flash_Read_Metadata>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d108      	bne.n	8006354 <Get_Firmware_Version+0x68>
	{
		status[0] = FLASH_PAYLOAD_WRITE_FAILED;
 8006342:	2300      	movs	r3, #0
 8006344:	773b      	strb	r3, [r7, #28]
		Bootloader_Send_Data_To_Host((uint8_t*)status, 7);
 8006346:	f107 031c 	add.w	r3, r7, #28
 800634a:	2107      	movs	r1, #7
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff ff3b 	bl	80061c8 <Bootloader_Send_Data_To_Host>
		return;
 8006352:	e030      	b.n	80063b6 <Get_Firmware_Version+0xca>
	}
	uint16_t fw_size = ceil(fw_info.length / 1024.0f);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	ee07 3a90 	vmov	s15, r3
 800635a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800635e:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80063bc <Get_Firmware_Version+0xd0>
 8006362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006366:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800636a:	eeb0 0b47 	vmov.f64	d0, d7
 800636e:	f000 fa57 	bl	8006820 <ceil>
 8006372:	eeb0 7b40 	vmov.f64	d7, d0
 8006376:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800637a:	ee17 3a90 	vmov	r3, s15
 800637e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    status[0] = FLASH_PAYLOAD_WRITE_PASSED;
 8006380:	2301      	movs	r3, #1
 8006382:	773b      	strb	r3, [r7, #28]
    status[1] = fw_info.version_major;
 8006384:	7e3b      	ldrb	r3, [r7, #24]
 8006386:	777b      	strb	r3, [r7, #29]
    status[2] = fw_info.version_minor;
 8006388:	7e7b      	ldrb	r3, [r7, #25]
 800638a:	77bb      	strb	r3, [r7, #30]
    status[3] = fw_info.version_patch;
 800638c:	7ebb      	ldrb	r3, [r7, #26]
 800638e:	77fb      	strb	r3, [r7, #31]
    status[4] = fw_info.is_Available;
 8006390:	7a3b      	ldrb	r3, [r7, #8]
 8006392:	f887 3020 	strb.w	r3, [r7, #32]
    status[5] = (uint8_t)(fw_size >> 8);
 8006396:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006398:	0a1b      	lsrs	r3, r3, #8
 800639a:	b29b      	uxth	r3, r3
 800639c:	b2db      	uxtb	r3, r3
 800639e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    status[6] = (uint8_t)fw_size;
 80063a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    Bootloader_Send_Data_To_Host((uint8_t*)status, 7);
 80063aa:	f107 031c 	add.w	r3, r7, #28
 80063ae:	2107      	movs	r1, #7
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff ff09 	bl	80061c8 <Bootloader_Send_Data_To_Host>
}
 80063b6:	3728      	adds	r7, #40	@ 0x28
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	44800000 	.word	0x44800000

080063c0 <Flash_Write_Metadata>:
 * @param fw: Con trỏ tới thông tin firmware (s_firmware_info).
 * @param fw_number: Số thứ tự firmware (1 cho bank 1, 2 cho bank 2).
 * @return FLASH_PAYLOAD_WRITE_PASSED nếu thành công, FLASH_PAYLOAD_WRITE_FAILED nếu lỗi hoặc đầu vào không hợp lệ.
 */
static uint8_t Flash_Write_Metadata(s_firmware_info* fw, uint8_t fw_number)
{
 80063c0:	b590      	push	{r4, r7, lr}
 80063c2:	b09b      	sub	sp, #108	@ 0x6c
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
 80063cc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80063d0:	3b60      	subs	r3, #96	@ 0x60
 80063d2:	331f      	adds	r3, #31
 80063d4:	095b      	lsrs	r3, r3, #5
 80063d6:	015c      	lsls	r4, r3, #5
	if((fw == NULL)||(fw_number < 1)||(fw_number > 2))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <Flash_Write_Metadata+0x2a>
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <Flash_Write_Metadata+0x2a>
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <Flash_Write_Metadata+0x2e>
	{
		return FLASH_PAYLOAD_WRITE_FAILED;
 80063ea:	2300      	movs	r3, #0
 80063ec:	e050      	b.n	8006490 <Flash_Write_Metadata+0xd0>
	}
	uint32_t metadata_addr = (fw_number == 1) ? METADATA_BANK1_BASE : METADATA_BANK2_BASE;
 80063ee:	78fb      	ldrb	r3, [r7, #3]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <Flash_Write_Metadata+0x38>
 80063f4:	4b28      	ldr	r3, [pc, #160]	@ (8006498 <Flash_Write_Metadata+0xd8>)
 80063f6:	e000      	b.n	80063fa <Flash_Write_Metadata+0x3a>
 80063f8:	4b28      	ldr	r3, [pc, #160]	@ (800649c <Flash_Write_Metadata+0xdc>)
 80063fa:	667b      	str	r3, [r7, #100]	@ 0x64
    uint8_t bank = (fw_number == 1) ? FLASH_BANK_1 : FLASH_BANK_2;
 80063fc:	78fb      	ldrb	r3, [r7, #3]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <Flash_Write_Metadata+0x46>
 8006402:	2301      	movs	r3, #1
 8006404:	e000      	b.n	8006408 <Flash_Write_Metadata+0x48>
 8006406:	2302      	movs	r3, #2
 8006408:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

    uint8_t data[32] __attribute__((aligned(32)));
    uint32_t fw_info_size = sizeof(s_firmware_info);
 800640c:	2314      	movs	r3, #20
 800640e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    memset(data, 0xFF, sizeof(data));
 8006410:	2220      	movs	r2, #32
 8006412:	21ff      	movs	r1, #255	@ 0xff
 8006414:	4620      	mov	r0, r4
 8006416:	f000 f9c9 	bl	80067ac <memset>
    memcpy(data, fw, fw_info_size);
 800641a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800641c:	6879      	ldr	r1, [r7, #4]
 800641e:	4620      	mov	r0, r4
 8006420:	f000 f9f0 	bl	8006804 <memcpy>

    HAL_FLASH_Unlock();
 8006424:	f7fa ffda 	bl	80013dc <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInitStruct = {0};
 8006428:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	605a      	str	r2, [r3, #4]
 8006432:	609a      	str	r2, [r3, #8]
 8006434:	60da      	str	r2, [r3, #12]
 8006436:	611a      	str	r2, [r3, #16]
	uint32_t SectorError = 0;
 8006438:	2300      	movs	r3, #0
 800643a:	647b      	str	r3, [r7, #68]	@ 0x44
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800643c:	2300      	movs	r3, #0
 800643e:	64bb      	str	r3, [r7, #72]	@ 0x48
	EraseInitStruct.Banks = bank;
 8006440:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8006444:	64fb      	str	r3, [r7, #76]	@ 0x4c
	EraseInitStruct.Sector = 1; 						// Metadata ở Sector 1
 8006446:	2301      	movs	r3, #1
 8006448:	653b      	str	r3, [r7, #80]	@ 0x50
	EraseInitStruct.NbSectors = 1;
 800644a:	2301      	movs	r3, #1
 800644c:	657b      	str	r3, [r7, #84]	@ 0x54
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800644e:	2320      	movs	r3, #32
 8006450:	65bb      	str	r3, [r7, #88]	@ 0x58

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8006452:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8006456:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800645a:	4611      	mov	r1, r2
 800645c:	4618      	mov	r0, r3
 800645e:	f7fb f8bb 	bl	80015d8 <HAL_FLASHEx_Erase>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <Flash_Write_Metadata+0xb0>
	{
		HAL_FLASH_Lock();
 8006468:	f7fa fff2 	bl	8001450 <HAL_FLASH_Lock>
		return FLASH_PAYLOAD_WRITE_FAILED;
 800646c:	2300      	movs	r3, #0
 800646e:	e00f      	b.n	8006490 <Flash_Write_Metadata+0xd0>
	}

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, metadata_addr, (uint32_t)data) != HAL_OK)
 8006470:	4623      	mov	r3, r4
 8006472:	461a      	mov	r2, r3
 8006474:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006476:	2001      	movs	r0, #1
 8006478:	f7fa ff1e 	bl	80012b8 <HAL_FLASH_Program>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <Flash_Write_Metadata+0xca>
	{
		HAL_FLASH_Lock();
 8006482:	f7fa ffe5 	bl	8001450 <HAL_FLASH_Lock>
		return FLASH_PAYLOAD_WRITE_FAILED;
 8006486:	2300      	movs	r3, #0
 8006488:	e002      	b.n	8006490 <Flash_Write_Metadata+0xd0>
	}

    HAL_FLASH_Lock();
 800648a:	f7fa ffe1 	bl	8001450 <HAL_FLASH_Lock>
    return FLASH_PAYLOAD_WRITE_PASSED;
 800648e:	2301      	movs	r3, #1
}
 8006490:	4618      	mov	r0, r3
 8006492:	376c      	adds	r7, #108	@ 0x6c
 8006494:	46bd      	mov	sp, r7
 8006496:	bd90      	pop	{r4, r7, pc}
 8006498:	08020000 	.word	0x08020000
 800649c:	08120000 	.word	0x08120000

080064a0 <Flash_Read_Metadata>:
 * @param fw_number: Số thứ tự firmware (1 cho bank 1, 2 cho bank 2).
 * @return FLASH_PAYLOAD_WRITE_PASSED nếu đọc thành công và metadata hợp lệ,
 *         FLASH_PAYLOAD_WRITE_FAILED nếu fw_number không hợp lệ hoặc metadata không hợp lệ.
 */
static uint8_t Flash_Read_Metadata(s_firmware_info* fw_info, uint8_t fw_number)
{
 80064a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064a2:	b093      	sub	sp, #76	@ 0x4c
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	70fb      	strb	r3, [r7, #3]
 80064ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80064b0:	3b40      	subs	r3, #64	@ 0x40
 80064b2:	331f      	adds	r3, #31
 80064b4:	095b      	lsrs	r3, r3, #5
 80064b6:	015e      	lsls	r6, r3, #5
	if((fw_number < 1)||(fw_number > 2))
 80064b8:	78fb      	ldrb	r3, [r7, #3]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <Flash_Read_Metadata+0x24>
 80064be:	78fb      	ldrb	r3, [r7, #3]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <Flash_Read_Metadata+0x28>
	{
		return FLASH_PAYLOAD_WRITE_FAILED;
 80064c4:	2300      	movs	r3, #0
 80064c6:	e02c      	b.n	8006522 <Flash_Read_Metadata+0x82>
	}

	uint32_t metadata_addr = (fw_number == 1) ? METADATA_BANK1_BASE : METADATA_BANK2_BASE;
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <Flash_Read_Metadata+0x32>
 80064ce:	4b17      	ldr	r3, [pc, #92]	@ (800652c <Flash_Read_Metadata+0x8c>)
 80064d0:	e000      	b.n	80064d4 <Flash_Read_Metadata+0x34>
 80064d2:	4b17      	ldr	r3, [pc, #92]	@ (8006530 <Flash_Read_Metadata+0x90>)
 80064d4:	647b      	str	r3, [r7, #68]	@ 0x44

    uint8_t data[32] __attribute__((aligned(32)));
    uint32_t fw_info_size = sizeof(s_firmware_info);
 80064d6:	2314      	movs	r3, #20
 80064d8:	643b      	str	r3, [r7, #64]	@ 0x40

    memcpy(data, (void*)metadata_addr, sizeof(data));
 80064da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064dc:	4634      	mov	r4, r6
 80064de:	461d      	mov	r5, r3
 80064e0:	6828      	ldr	r0, [r5, #0]
 80064e2:	6869      	ldr	r1, [r5, #4]
 80064e4:	68aa      	ldr	r2, [r5, #8]
 80064e6:	68eb      	ldr	r3, [r5, #12]
 80064e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064ea:	6928      	ldr	r0, [r5, #16]
 80064ec:	6969      	ldr	r1, [r5, #20]
 80064ee:	69aa      	ldr	r2, [r5, #24]
 80064f0:	69eb      	ldr	r3, [r5, #28]
 80064f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    memcpy(fw_info, data, fw_info_size);
 80064f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064f6:	4631      	mov	r1, r6
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f983 	bl	8006804 <memcpy>

    if((fw_info->address == 0xffffffff)||
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006506:	d009      	beq.n	800651c <Flash_Read_Metadata+0x7c>
	(fw_info->length == 0xffffffff)||
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
    if((fw_info->address == 0xffffffff)||
 800650c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006510:	d004      	beq.n	800651c <Flash_Read_Metadata+0x7c>
	(fw_info->crc == 0xffffffff))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68db      	ldr	r3, [r3, #12]
	(fw_info->length == 0xffffffff)||
 8006516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651a:	d101      	bne.n	8006520 <Flash_Read_Metadata+0x80>
    	return FLASH_PAYLOAD_WRITE_FAILED;
 800651c:	2300      	movs	r3, #0
 800651e:	e000      	b.n	8006522 <Flash_Read_Metadata+0x82>
    return FLASH_PAYLOAD_WRITE_PASSED;
 8006520:	2301      	movs	r3, #1
}
 8006522:	4618      	mov	r0, r3
 8006524:	374c      	adds	r7, #76	@ 0x4c
 8006526:	46bd      	mov	sp, r7
 8006528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800652a:	bf00      	nop
 800652c:	08020000 	.word	0x08020000
 8006530:	08120000 	.word	0x08120000

08006534 <Bootloader_check_connection>:



static void Bootloader_check_connection(uint8_t *Host_Buffer)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
	if((Host_Buffer[2] == 't')||(Host_Buffer[3] == 'm')||
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3302      	adds	r3, #2
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b74      	cmp	r3, #116	@ 0x74
 8006544:	d013      	beq.n	800656e <Bootloader_check_connection+0x3a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3303      	adds	r3, #3
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b6d      	cmp	r3, #109	@ 0x6d
 800654e:	d00e      	beq.n	800656e <Bootloader_check_connection+0x3a>
	(Host_Buffer[4] == 'o')||(Host_Buffer[5] == 'd')||(Host_Buffer[6] == 'e'))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3304      	adds	r3, #4
 8006554:	781b      	ldrb	r3, [r3, #0]
	if((Host_Buffer[2] == 't')||(Host_Buffer[3] == 'm')||
 8006556:	2b6f      	cmp	r3, #111	@ 0x6f
 8006558:	d009      	beq.n	800656e <Bootloader_check_connection+0x3a>
	(Host_Buffer[4] == 'o')||(Host_Buffer[5] == 'd')||(Host_Buffer[6] == 'e'))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	3305      	adds	r3, #5
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b64      	cmp	r3, #100	@ 0x64
 8006562:	d004      	beq.n	800656e <Bootloader_check_connection+0x3a>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3306      	adds	r3, #6
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b65      	cmp	r3, #101	@ 0x65
 800656c:	d111      	bne.n	8006592 <Bootloader_check_connection+0x5e>
	{
		check_connection = true;
 800656e:	4b0b      	ldr	r3, [pc, #44]	@ (800659c <Bootloader_check_connection+0x68>)
 8006570:	2201      	movs	r2, #1
 8006572:	701a      	strb	r2, [r3, #0]
		uint8_t status[3] = {0x01, 'O', 'K'};
 8006574:	4a0a      	ldr	r2, [pc, #40]	@ (80065a0 <Bootloader_check_connection+0x6c>)
 8006576:	f107 030c 	add.w	r3, r7, #12
 800657a:	6812      	ldr	r2, [r2, #0]
 800657c:	4611      	mov	r1, r2
 800657e:	8019      	strh	r1, [r3, #0]
 8006580:	3302      	adds	r3, #2
 8006582:	0c12      	lsrs	r2, r2, #16
 8006584:	701a      	strb	r2, [r3, #0]
	    Bootloader_Send_Data_To_Host((uint8_t*)status, 3);
 8006586:	f107 030c 	add.w	r3, r7, #12
 800658a:	2103      	movs	r1, #3
 800658c:	4618      	mov	r0, r3
 800658e:	f7ff fe1b 	bl	80061c8 <Bootloader_Send_Data_To_Host>
	}
}
 8006592:	bf00      	nop
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	240002d0 	.word	0x240002d0
 80065a0:	08006924 	.word	0x08006924

080065a4 <Firmware_Check_Available>:

/**
 * Kiểm tra firmware có sẵn
 */
static uint8_t Firmware_Check_Available(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b088      	sub	sp, #32
 80065a8:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	77fb      	strb	r3, [r7, #31]
    uint32_t CRC_Result = 0;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61bb      	str	r3, [r7, #24]
    s_firmware_info fw_info;

    // Kiểm tra Firmware 1
    Flash_Read_Metadata(&fw_info, 1);
 80065b2:	463b      	mov	r3, r7
 80065b4:	2101      	movs	r1, #1
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff ff72 	bl	80064a0 <Flash_Read_Metadata>

    if (fw_info.is_Available && (fw_info.length > 0))
 80065bc:	783b      	ldrb	r3, [r7, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d010      	beq.n	80065e4 <Firmware_Check_Available+0x40>
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00d      	beq.n	80065e4 <Firmware_Check_Available+0x40>
    {
		CRC_Result = Firmware_CRC_Verification(fw_info.address, fw_info.length);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	4611      	mov	r1, r2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7ff fe0a 	bl	80061e8 <Firmware_CRC_Verification>
 80065d4:	61b8      	str	r0, [r7, #24]
		if (CRC_Result == fw_info.crc)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d102      	bne.n	80065e4 <Firmware_Check_Available+0x40>
		{
			status ++;
 80065de:	7ffb      	ldrb	r3, [r7, #31]
 80065e0:	3301      	adds	r3, #1
 80065e2:	77fb      	strb	r3, [r7, #31]
		}
    }

    // Kiểm tra Firmware 2
    Flash_Read_Metadata(&fw_info, 2);
 80065e4:	463b      	mov	r3, r7
 80065e6:	2102      	movs	r1, #2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7ff ff59 	bl	80064a0 <Flash_Read_Metadata>

    if (fw_info.is_Available && (fw_info.length > 0))
 80065ee:	783b      	ldrb	r3, [r7, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d010      	beq.n	8006616 <Firmware_Check_Available+0x72>
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00d      	beq.n	8006616 <Firmware_Check_Available+0x72>
	{
		CRC_Result = Firmware_CRC_Verification(fw_info.address, fw_info.length);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	4611      	mov	r1, r2
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff fdf1 	bl	80061e8 <Firmware_CRC_Verification>
 8006606:	61b8      	str	r0, [r7, #24]
		if (CRC_Result == fw_info.crc)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	429a      	cmp	r2, r3
 800660e:	d102      	bne.n	8006616 <Firmware_Check_Available+0x72>
		{
			status++;
 8006610:	7ffb      	ldrb	r3, [r7, #31]
 8006612:	3301      	adds	r3, #1
 8006614:	77fb      	strb	r3, [r7, #31]
		}
	}


    if(status > 1)			// Cả 2 core đều có sẵn firmware
 8006616:	7ffb      	ldrb	r3, [r7, #31]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d904      	bls.n	8006626 <Firmware_Check_Available+0x82>
    {
    	uint32_t app_address = FIRMWARE_BANK1_BASE;
 800661c:	4b04      	ldr	r3, [pc, #16]	@ (8006630 <Firmware_Check_Available+0x8c>)
 800661e:	617b      	str	r3, [r7, #20]
    	Jump_To_App(app_address);
 8006620:	6978      	ldr	r0, [r7, #20]
 8006622:	f7ff faa1 	bl	8005b68 <Jump_To_App>
    }
    return 0;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3720      	adds	r7, #32
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	08040000 	.word	0x08040000

08006634 <Bootloader_Check_Available>:

/**
 * Kiểm tra firmware có sẵn và nhảy đến nếu hợp lệ
 */
void Bootloader_Check_Available(void*)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
	if(check_connection) boot_timeout = 0;
 800663c:	4b0c      	ldr	r3, [pc, #48]	@ (8006670 <Bootloader_Check_Available+0x3c>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <Bootloader_Check_Available+0x16>
 8006644:	4b0b      	ldr	r3, [pc, #44]	@ (8006674 <Bootloader_Check_Available+0x40>)
 8006646:	2200      	movs	r2, #0
 8006648:	601a      	str	r2, [r3, #0]
	if(boot_timeout > BL_TIMEOUT)
 800664a:	4b0a      	ldr	r3, [pc, #40]	@ (8006674 <Bootloader_Check_Available+0x40>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006652:	4293      	cmp	r3, r2
 8006654:	d907      	bls.n	8006666 <Bootloader_Check_Available+0x32>
	{
		if(!Firmware_Check_Available())		//fail
 8006656:	f7ff ffa5 	bl	80065a4 <Firmware_Check_Available>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d102      	bne.n	8006666 <Bootloader_Check_Available+0x32>
		{
			check_connection = true;
 8006660:	4b03      	ldr	r3, [pc, #12]	@ (8006670 <Bootloader_Check_Available+0x3c>)
 8006662:	2201      	movs	r2, #1
 8006664:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8006666:	bf00      	nop
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	240002d0 	.word	0x240002d0
 8006674:	240002cc 	.word	0x240002cc

08006678 <SchedulerSysTickIntHandler>:
//! \return None.
//
//*****************************************************************************
void
SchedulerSysTickIntHandler(void)
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
    g_ui32SchedulerTickCount++;
 800667c:	4b0a      	ldr	r3, [pc, #40]	@ (80066a8 <SchedulerSysTickIntHandler+0x30>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3301      	adds	r3, #1
 8006682:	4a09      	ldr	r2, [pc, #36]	@ (80066a8 <SchedulerSysTickIntHandler+0x30>)
 8006684:	6013      	str	r3, [r2, #0]
    if(!check_connection)	boot_timeout++;
 8006686:	4b09      	ldr	r3, [pc, #36]	@ (80066ac <SchedulerSysTickIntHandler+0x34>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	f083 0301 	eor.w	r3, r3, #1
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	d004      	beq.n	800669e <SchedulerSysTickIntHandler+0x26>
 8006694:	4b06      	ldr	r3, [pc, #24]	@ (80066b0 <SchedulerSysTickIntHandler+0x38>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3301      	adds	r3, #1
 800669a:	4a05      	ldr	r2, [pc, #20]	@ (80066b0 <SchedulerSysTickIntHandler+0x38>)
 800669c:	6013      	str	r3, [r2, #0]
}
 800669e:	bf00      	nop
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	24000370 	.word	0x24000370
 80066ac:	240002d0 	.word	0x240002d0
 80066b0:	240002cc 	.word	0x240002cc

080066b4 <SchedulerInit>:
//!
//! \return None.
//
//*****************************************************************************
void SchedulerInit(uint32_t TicksPerSecond)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((SystemCoreClock / TicksPerSecond) - 1UL);  /* set reload register */
 80066bc:	4b0b      	ldr	r3, [pc, #44]	@ (80066ec <SchedulerInit+0x38>)
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c6:	4a0a      	ldr	r2, [pc, #40]	@ (80066f0 <SchedulerInit+0x3c>)
 80066c8:	3b01      	subs	r3, #1
 80066ca:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80066cc:	4b08      	ldr	r3, [pc, #32]	@ (80066f0 <SchedulerInit+0x3c>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066d2:	4b07      	ldr	r3, [pc, #28]	@ (80066f0 <SchedulerInit+0x3c>)
 80066d4:	2207      	movs	r2, #7
 80066d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk	|
				   SysTick_CTRL_TICKINT_Msk;                   /* Enable the Systick Timer interrupt */
  SchedulerTickPerSecond = TicksPerSecond;
 80066d8:	4a06      	ldr	r2, [pc, #24]	@ (80066f4 <SchedulerInit+0x40>)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6013      	str	r3, [r2, #0]
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	24000000 	.word	0x24000000
 80066f0:	e000e010 	.word	0xe000e010
 80066f4:	24000040 	.word	0x24000040

080066f8 <SchedulerRun>:
//! \return None.
//
//*****************************************************************************
void
SchedulerRun(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
    tSchedulerTask *pi16Task;

    //
    // Loop through each task in the task table.
    //
    for(ui32Loop = 0; ui32Loop < g_ui32SchedulerNumTasks; ui32Loop++)
 80066fe:	2300      	movs	r3, #0
 8006700:	607b      	str	r3, [r7, #4]
 8006702:	e022      	b.n	800674a <SchedulerRun+0x52>
    {
        //
        // Get a pointer to the task information.
        //
        pi16Task = &g_psSchedulerTable[ui32Loop];
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	4613      	mov	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4a14      	ldr	r2, [pc, #80]	@ (8006760 <SchedulerRun+0x68>)
 8006710:	4413      	add	r3, r2
 8006712:	603b      	str	r3, [r7, #0]

        //
        // Is this task active and, if so, is it time to call it's function?
        //
        if(pi16Task->bActive &&
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	7c1b      	ldrb	r3, [r3, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d013      	beq.n	8006744 <SchedulerRun+0x4c>
           (SchedulerElapsedTicksGet(pi16Task->ui32LastCall) >=
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	4618      	mov	r0, r3
 8006722:	f000 f823 	bl	800676c <SchedulerElapsedTicksGet>
 8006726:	4602      	mov	r2, r0
            pi16Task->ui32FrequencyTicks))
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
        if(pi16Task->bActive &&
 800672c:	429a      	cmp	r2, r3
 800672e:	d309      	bcc.n	8006744 <SchedulerRun+0x4c>
        {
            //
            // Remember the timestamp at which we make the function call.
            //
            pi16Task->ui32LastCall = g_ui32SchedulerTickCount;
 8006730:	4b0c      	ldr	r3, [pc, #48]	@ (8006764 <SchedulerRun+0x6c>)
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	60da      	str	r2, [r3, #12]

            //
            // Call the task function, passing the provided parameter.
            //
            pi16Task->pfnFunction(pi16Task->pvParam);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	6852      	ldr	r2, [r2, #4]
 8006740:	4610      	mov	r0, r2
 8006742:	4798      	blx	r3
    for(ui32Loop = 0; ui32Loop < g_ui32SchedulerNumTasks; ui32Loop++)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3301      	adds	r3, #1
 8006748:	607b      	str	r3, [r7, #4]
 800674a:	4b07      	ldr	r3, [pc, #28]	@ (8006768 <SchedulerRun+0x70>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	429a      	cmp	r2, r3
 8006752:	d3d7      	bcc.n	8006704 <SchedulerRun+0xc>
        }
    }
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	2400000c 	.word	0x2400000c
 8006764:	24000370 	.word	0x24000370
 8006768:	24000008 	.word	0x24000008

0800676c <SchedulerElapsedTicksGet>:
//! \return The number of ticks elapsed since the provided tick count.
//
//*****************************************************************************
uint32_t
SchedulerElapsedTicksGet(uint32_t ui32TickCount)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
    //
    // Determine the calculation based upon whether the global tick count has
    // wrapped since the passed ui32TickCount.
    //
    return(SchedulerElapsedTicksCalc(ui32TickCount, g_ui32SchedulerTickCount));
 8006774:	4b05      	ldr	r3, [pc, #20]	@ (800678c <SchedulerElapsedTicksGet+0x20>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f808 	bl	8006790 <SchedulerElapsedTicksCalc>
 8006780:	4603      	mov	r3, r0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	24000370 	.word	0x24000370

08006790 <SchedulerElapsedTicksCalc>:
//! counts.
//
//*****************************************************************************
uint32_t
SchedulerElapsedTicksCalc(uint32_t ui32TickStart, uint32_t ui32TickEnd)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
    return((ui32TickEnd > ui32TickStart) ? (ui32TickEnd - ui32TickStart) :
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	1ad3      	subs	r3, r2, r3
           ((0xFFFFFFFF - ui32TickStart) + ui32TickEnd + 1));
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <memset>:
 80067ac:	4402      	add	r2, r0
 80067ae:	4603      	mov	r3, r0
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d100      	bne.n	80067b6 <memset+0xa>
 80067b4:	4770      	bx	lr
 80067b6:	f803 1b01 	strb.w	r1, [r3], #1
 80067ba:	e7f9      	b.n	80067b0 <memset+0x4>

080067bc <__libc_init_array>:
 80067bc:	b570      	push	{r4, r5, r6, lr}
 80067be:	4d0d      	ldr	r5, [pc, #52]	@ (80067f4 <__libc_init_array+0x38>)
 80067c0:	4c0d      	ldr	r4, [pc, #52]	@ (80067f8 <__libc_init_array+0x3c>)
 80067c2:	1b64      	subs	r4, r4, r5
 80067c4:	10a4      	asrs	r4, r4, #2
 80067c6:	2600      	movs	r6, #0
 80067c8:	42a6      	cmp	r6, r4
 80067ca:	d109      	bne.n	80067e0 <__libc_init_array+0x24>
 80067cc:	4d0b      	ldr	r5, [pc, #44]	@ (80067fc <__libc_init_array+0x40>)
 80067ce:	4c0c      	ldr	r4, [pc, #48]	@ (8006800 <__libc_init_array+0x44>)
 80067d0:	f000 f89a 	bl	8006908 <_init>
 80067d4:	1b64      	subs	r4, r4, r5
 80067d6:	10a4      	asrs	r4, r4, #2
 80067d8:	2600      	movs	r6, #0
 80067da:	42a6      	cmp	r6, r4
 80067dc:	d105      	bne.n	80067ea <__libc_init_array+0x2e>
 80067de:	bd70      	pop	{r4, r5, r6, pc}
 80067e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e4:	4798      	blx	r3
 80067e6:	3601      	adds	r6, #1
 80067e8:	e7ee      	b.n	80067c8 <__libc_init_array+0xc>
 80067ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ee:	4798      	blx	r3
 80067f0:	3601      	adds	r6, #1
 80067f2:	e7f2      	b.n	80067da <__libc_init_array+0x1e>
 80067f4:	08006978 	.word	0x08006978
 80067f8:	08006978 	.word	0x08006978
 80067fc:	08006978 	.word	0x08006978
 8006800:	0800697c 	.word	0x0800697c

08006804 <memcpy>:
 8006804:	440a      	add	r2, r1
 8006806:	4291      	cmp	r1, r2
 8006808:	f100 33ff 	add.w	r3, r0, #4294967295
 800680c:	d100      	bne.n	8006810 <memcpy+0xc>
 800680e:	4770      	bx	lr
 8006810:	b510      	push	{r4, lr}
 8006812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800681a:	4291      	cmp	r1, r2
 800681c:	d1f9      	bne.n	8006812 <memcpy+0xe>
 800681e:	bd10      	pop	{r4, pc}

08006820 <ceil>:
 8006820:	ee10 1a90 	vmov	r1, s1
 8006824:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006828:	ee10 0a10 	vmov	r0, s0
 800682c:	f2a2 33ff 	subw	r3, r2, #1023	@ 0x3ff
 8006830:	2b13      	cmp	r3, #19
 8006832:	b530      	push	{r4, r5, lr}
 8006834:	4605      	mov	r5, r0
 8006836:	dc2e      	bgt.n	8006896 <ceil+0x76>
 8006838:	2b00      	cmp	r3, #0
 800683a:	da12      	bge.n	8006862 <ceil+0x42>
 800683c:	ed9f 7b2e 	vldr	d7, [pc, #184]	@ 80068f8 <ceil+0xd8>
 8006840:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006844:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800684c:	dd04      	ble.n	8006858 <ceil+0x38>
 800684e:	2900      	cmp	r1, #0
 8006850:	db4b      	blt.n	80068ea <ceil+0xca>
 8006852:	4308      	orrs	r0, r1
 8006854:	d14d      	bne.n	80068f2 <ceil+0xd2>
 8006856:	4601      	mov	r1, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4602      	mov	r2, r0
 800685c:	ec43 2b10 	vmov	d0, r2, r3
 8006860:	e020      	b.n	80068a4 <ceil+0x84>
 8006862:	4a27      	ldr	r2, [pc, #156]	@ (8006900 <ceil+0xe0>)
 8006864:	411a      	asrs	r2, r3
 8006866:	ea01 0402 	and.w	r4, r1, r2
 800686a:	4304      	orrs	r4, r0
 800686c:	d01a      	beq.n	80068a4 <ceil+0x84>
 800686e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80068f8 <ceil+0xd8>
 8006872:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006876:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800687a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687e:	ddeb      	ble.n	8006858 <ceil+0x38>
 8006880:	2900      	cmp	r1, #0
 8006882:	bfc2      	ittt	gt
 8006884:	f44f 1080 	movgt.w	r0, #1048576	@ 0x100000
 8006888:	fa40 f303 	asrgt.w	r3, r0, r3
 800688c:	18c9      	addgt	r1, r1, r3
 800688e:	ea21 0102 	bic.w	r1, r1, r2
 8006892:	2000      	movs	r0, #0
 8006894:	e7e0      	b.n	8006858 <ceil+0x38>
 8006896:	2b33      	cmp	r3, #51	@ 0x33
 8006898:	dd05      	ble.n	80068a6 <ceil+0x86>
 800689a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800689e:	d101      	bne.n	80068a4 <ceil+0x84>
 80068a0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80068a4:	bd30      	pop	{r4, r5, pc}
 80068a6:	f2a2 4413 	subw	r4, r2, #1043	@ 0x413
 80068aa:	f04f 32ff 	mov.w	r2, #4294967295
 80068ae:	40e2      	lsrs	r2, r4
 80068b0:	4210      	tst	r0, r2
 80068b2:	d0f7      	beq.n	80068a4 <ceil+0x84>
 80068b4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80068f8 <ceil+0xd8>
 80068b8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80068bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80068c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c4:	ddc8      	ble.n	8006858 <ceil+0x38>
 80068c6:	2900      	cmp	r1, #0
 80068c8:	dd02      	ble.n	80068d0 <ceil+0xb0>
 80068ca:	2b14      	cmp	r3, #20
 80068cc:	d103      	bne.n	80068d6 <ceil+0xb6>
 80068ce:	3101      	adds	r1, #1
 80068d0:	ea20 0002 	bic.w	r0, r0, r2
 80068d4:	e7c0      	b.n	8006858 <ceil+0x38>
 80068d6:	2401      	movs	r4, #1
 80068d8:	f1c3 0334 	rsb	r3, r3, #52	@ 0x34
 80068dc:	fa04 f303 	lsl.w	r3, r4, r3
 80068e0:	4418      	add	r0, r3
 80068e2:	4285      	cmp	r5, r0
 80068e4:	bf88      	it	hi
 80068e6:	1909      	addhi	r1, r1, r4
 80068e8:	e7f2      	b.n	80068d0 <ceil+0xb0>
 80068ea:	2000      	movs	r0, #0
 80068ec:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80068f0:	e7b2      	b.n	8006858 <ceil+0x38>
 80068f2:	4904      	ldr	r1, [pc, #16]	@ (8006904 <ceil+0xe4>)
 80068f4:	2000      	movs	r0, #0
 80068f6:	e7af      	b.n	8006858 <ceil+0x38>
 80068f8:	8800759c 	.word	0x8800759c
 80068fc:	7e37e43c 	.word	0x7e37e43c
 8006900:	000fffff 	.word	0x000fffff
 8006904:	3ff00000 	.word	0x3ff00000

08006908 <_init>:
 8006908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690a:	bf00      	nop
 800690c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690e:	bc08      	pop	{r3}
 8006910:	469e      	mov	lr, r3
 8006912:	4770      	bx	lr

08006914 <_fini>:
 8006914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006916:	bf00      	nop
 8006918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691a:	bc08      	pop	{r3}
 800691c:	469e      	mov	lr, r3
 800691e:	4770      	bx	lr
